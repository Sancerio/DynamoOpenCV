<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCvSharp</name>
    </assembly>
    <members>
        <member name="T:OpenCvSharp.CvLine2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            初期化
            </summary>
            <param name="vx">直線に乗るように正規化された方向ベクトル (x成分)</param>
            <param name="vy">直線に乗るように正規化された方向ベクトル (y成分)</param>
            <param name="x1">直線上の点のx座標</param>
            <param name="y1">直線上の点のy座標</param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.#ctor(System.Single[])">
            <summary>
            cvFitLineの出力(float[4])から初期化
            </summary>
            <param name="line">cvFitLineの出力結果</param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.GetVectorRadian">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.GetVectorAngle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.Distance(OpenCvSharp.CvPoint)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.Distance(OpenCvSharp.CvPoint2D32f)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.Distance(OpenCvSharp.CvPoint2D64f)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.Distance(System.Double,System.Double)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine2D.FitSize(System.Int32,System.Int32,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            指定したサイズに直線を合わせて、その端点を返す (描画用途)
            </summary>
            <param name="width">合わせこむサイズの幅</param>
            <param name="height">合わせこむサイズの高さ</param>
            <param name="pt1">端点1つ目</param>
            <param name="pt2">端点2つ目</param>
        </member>
        <member name="P:OpenCvSharp.CvLine2D.Vx">
            <summary>
            直線に乗るように正規化された方向ベクトル (x成分)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine2D.Vy">
            <summary>
            直線に乗るように正規化された方向ベクトル (y成分)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine2D.X1">
            <summary>
            直線上の点のx座標
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine2D.Y1">
            <summary>
            直線上の点のy座標
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLine3D">
            <summary>
            3次元空間上の直線
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            初期化
            </summary>
            <param name="vx">直線に乗るように正規化された方向ベクトル (x成分)</param>
            <param name="vy">直線に乗るように正規化された方向ベクトル (y成分)</param>
            <param name="vz">直線に乗るように正規化された方向ベクトル (z成分)</param>
            <param name="x1">直線上の点のx座標</param>
            <param name="y1">直線上の点のy座標</param>
            <param name="z1">直線上の点のz座標</param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.#ctor(System.Single[])">
            <summary>
            cvFitLineの出力(float[6])から初期化
            </summary>
            <param name="line">cvFitLineの出力結果</param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.PerpendicularFoot(OpenCvSharp.CvPoint3D32f)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.PerpendicularFoot(OpenCvSharp.CvPoint3D64f)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.PerpendicularFoot(System.Double,System.Double,System.Double)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.Distance(OpenCvSharp.CvPoint3D32f)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.Distance(OpenCvSharp.CvPoint3D64f)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.Distance(System.Double,System.Double,System.Double)">
            <summary>
            指定した点と直線の距離を返す
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.CrossProduct(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            ベクトルの外積
            </summary>
            <param name="vl"></param>
            <param name="vr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.VectorLength(OpenCvSharp.CvPoint3D64f)">
            <summary>
            ベクトルの長さ(原点からの距離)
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLine3D.VertexDistance(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            2点間(2ベクトル)の距離
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.Vx">
            <summary>
            直線に乗るように正規化された方向ベクトル (x成分)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.Vy">
            <summary>
            直線に乗るように正規化された方向ベクトル (y成分)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.Vz">
            <summary>
            直線に乗るように正規化された方向ベクトル (z成分)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.X1">
            <summary>
            直線上の点のx座標
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.Y1">
            <summary>
            直線上の点のy座標
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLine3D.Z1">
            <summary>
            直線上の点のz座標
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSURFParams">
            <summary>
            SURFのパラメータ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFParams._p">
            <summary>
            Field data
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSURFParams.#ctor(System.Double,System.Boolean)">
            <summary>
            SURFのデフォルトパラメータを生成する
            </summary>
            <param name="hessianThreshold">keypoint.hessian の値がこの閾値よりも大きい特徴だけが検出される</param>
            <param name="extended">false：基本的なディスクリプタ（64要素）, true：拡張されたディスクリプタ（128要素）</param>
        </member>
        <member name="M:OpenCvSharp.CvSURFParams.Clone">
            <summary>
            現在のインスタンスのコピーである新しいオブジェクトを作成します。    
            </summary>
            <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.Extended">
            <summary>
            false : 基本的なディスクリプタ（64要素）
            true: 拡張されたディスクリプタ（128要素）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.HessianThreshold">
            <summary>
            keypoint.hessian の値がこの閾値よりも大きい特徴だけが検出される．
            適切なデフォルト値は，おおよそ300〜500 である（画像の局所的なコントラストと鮮明さの平均に依存する）．
            ユーザは，hessian や，その他の特徴に基づいて，不要な特徴点を除去することができる．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.NOctaves">
            <summary>
            特徴検出に用いられるオクターブ数.
            オクターブが一つ上がる度に，特徴のサイズが2倍になる（デフォルトは3）.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSURFParams.NOctaveLayers">
            <summary>
            各オクターブ内に存在するレイヤ数（デフォルトは4）.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTreeNode`1">
            <summary>
            ツリーノード
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvArr">
            <summary>
            IplImage, CvMatなどの各種配列データの基本クラス. 実体は void* 
            </summary>
        </member>
        <member name="T:OpenCvSharp.DisposableCvObject">
            <summary>
            リソースを解放すべきOpenCVのクラスに継承させる基本クラス
            </summary>
        </member>
        <member name="T:OpenCvSharp.DisposableObject">
            <summary>
            解放処理を行うクラスが継承するための基本クラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.#ctor(System.Boolean)">
            <summary>
            解放の可否を指定して初期化
            </summary>
            <param name="isEnabledDispose">GCで解放するならtrue</param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Dispose">
            <summary>
            リソースの解放
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.Finalize">
            <summary>
            デストラクタ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisposableObject.dataHandle">
            <summary>
            Gets or sets a handle which allocates using cvSetData.
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.AllocGCHandle(System.Object)">
            <summary>
            cvSetDataで割り当てる配列データをGCHandleでピン止めする
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.AllocMemory(System.Int32)">
            <summary>
            指定したサイズの量のメモリを割り当てる。
            Dispose時に解放する
            </summary>
            <param name="size">割り当てたメモリ</param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.NotifyMemoryPressure(System.Int64)">
            <summary>
            アンマネージメモリを確保したメモリサイズを通知する。
            
            実際に確保するならAllocMemoryのほうを使う。
            確保はcvCreateXXXがやってくれるという場合はこっちを使う
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableObject.ThrowIfDisposed">
            <summary>
            このオブジェクトが解放済みの場合はObjectDisposedExceptionを投げる
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.IsDisposed">
            <summary>
            リソースが解放済みかどうかを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.IsEnabledDispose">
            <summary>
            解放処理を許可するかどうかを取得・設定する. falseならばDisposeは何もしない.
            通常はユーザはこのフラグを変更してはならない. CvCapture.QueryFrameで取得したIplImageのように, 
            解放処理をするとエラーとなるオブジェクトの場合に自動的にこのフラグがfalseとなる。
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.AllocatedMemory">
            <summary>
            cvCreateXXX といった関数がなく自前で構造体の分のメモリを確保する場合、
            そのアドレスを入れておく場所
            </summary>
        </member>
        <member name="P:OpenCvSharp.DisposableObject.AllocatedMemorySize">
            <summary>
            AllocatedMemoryに確保されているメモリのサイズ
            </summary>
        </member>
        <member name="T:OpenCvSharp.ICvPtrHolder">
            <summary>
            OpenCVのネイティブデータポインタを持つことを示すインターフェイス
            </summary>
        </member>
        <member name="P:OpenCvSharp.ICvPtrHolder.CvPtr">
            <summary>
            Unmanaged OpenCV data pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisposableCvObject.ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisposableCvObject.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.DisposableCvObject.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="P:OpenCvSharp.DisposableCvObject.CvPtr">
            <summary>
            OpenCVの構造体へのネイティブポインタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.AbsDiff(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの差の絶対値を計算する.
            dst(I) = abs(src1(I) - src2(I)).
            </summary>
            <param name="src2">2番目の入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Abs(OpenCvSharp.CvArr)">
            <summary>
            配列の要素の絶対値を計算する. 
            dst(I) = abs(src(I)).
            すべての配列は同じタイプ，同じサイズ（または同じROIサイズ）でなければならない．
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AbsDiffS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            配列の要素と定数との差の絶対値を計算する. 
            dst(I) = abs(src(I) - value).
            </summary>
            <param name="dst">出力画像</param>
            <param name="value">スカラー</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Acc(OpenCvSharp.CvArr)">
            <summary>
            アキュムレータにフレームを加算する
            </summary>
            <param name="sum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータにフレームを加算する
            </summary>
            <param name="sum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
            <param name="mask">オプションの処理マスク．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
            <param name="blockSize">ピクセルの閾値を計算するために用いる隣接領域のサイズ： 3, 5, 7, ... </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AdaptiveThreshold(OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
            <param name="blockSize">ピクセルの閾値を計算するために用いる隣接領域のサイズ： 3, 5, 7, ... </param>
            <param name="param1">各適応手法に応じたパラメータ. 適応手法がMeanCおよびGaussianCの場合は，平均値または重み付き平均値から引く定数. 負の値の場合もある.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列を要素ごとに加算する. 
            dst(I)=src1(I)+src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列を要素ごとに加算する. 
            dst(I)=src1(I)+src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I)=src(I)+value
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I)=src(I)+value [mask(I)!=0 の場合]
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddText(System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont)">
            <summary>
            画像上にテキストを描画します．
            </summary>
            <param name="text">画像上に描画されるテキスト．</param>
            <param name="location">画像上のテキストの開始位置 Point(x,y)．</param>
            <param name="font">テキストを描画するのに利用されるフォント．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AddWeighted(System.Double,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I) = src1(I)*alpha + src2(I)*beta + gamma
            </summary>
            <param name="alpha">1番目の配列要素への重み</param>
            <param name="src2">2番目の入力配列スカラー</param>
            <param name="beta">2番目の配列要素への重み</param>
            <param name="gamma">加算結果に，さらに加えられるスカラー値</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理積（AND）を計算する. 
            dst(I)=src1(I)&amp;src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理積（AND）を計算する. 
            dst(I)=src1(I)&amp;src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AndS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理積(AND)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)&amp;value
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AndS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理積(AND)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)&amp;value [mask(I)!=0の場合]
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength(OpenCvSharp.CvSlice)">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <param name="slice">曲線の始点と終点．デフォルトでは曲線の全ての長さが計算される．</param>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ArcLength(OpenCvSharp.CvSlice,System.Int32)">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <param name="slice">曲線の始点と終点．デフォルトでは曲線の全ての長さが計算される．</param>
            <param name="isClosed">閉曲線かどうかを示す．次の3つの状態がある： 
            is_closed=0 - 曲線は閉曲線として扱われない． 
            is_closed&gt;0 - 曲線は閉曲線として扱われる． 
            is_closed&lt;0 - 曲線がシーケンスの場合， ((CvSeq*)curve)-&gt;flagsのフラグCV_SEQ_FLAG_CLOSEDから閉曲線かどうかを判別する．そうでない（曲線が点の配列（CvMat*）で表現される）場合，閉曲線として扱われない． 
            </param>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Avg">
            <summary>
            配列要素の平均値を各チャンネルで独立に計算する．
            </summary>
            <returns>平均値</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Avg(OpenCvSharp.CvArr)">
            <summary>
            配列要素の平均値を各チャンネルで独立に計算する．
            </summary>
            <param name="mask">オプションの処理マスク</param>
            <returns>平均値</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.AvgSdv(OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@)">
            <summary>
            配列要素の平均と標準偏差を各チャンネルで独立に計算する．
            </summary>
            <param name="mean">計算結果の平均値の出力</param>
            <param name="stdDev">計算結果の標準偏差の出力</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.AvgSdv(OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@,OpenCvSharp.CvArr)">
            <summary>
            配列要素の平均と標準偏差を各チャンネルで独立に計算する．
            </summary>
            <param name="mean">計算結果の平均値の出力</param>
            <param name="stdDev">計算結果の標準偏差の出力</param>
            <param name="mask">オプションの処理マスク</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.BoundingRect">
            <summary>
            2次元点列を包含するまっすぐな矩形を返す．
            </summary>
            <returns>矩形</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.BoundingRect(System.Boolean)">
            <summary>
            2次元点列を包含するまっすぐな矩形を返す．
            </summary>
            <param name="update">更新フラグ. 
            pointsがCvContour で，update=falseの場合： 包含矩形は計算されず，輪郭ヘッダのrectフィールドから読み込まれる． 
            pointsがCvContour で，update=trueの場合： 包含矩形は計算され，輪郭ヘッダのrectフィールドに書き込まれる． 
            pointsがCvSeqかCvMatの場合： updateは無視されて，包含矩形は計算されて返される． </param>
            <returns>矩形</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Canny(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Cannyアルゴリズムを使用して，入力画像 imageに含まれているエッジを検出し，それを出力画像 edges に保存する [aperture_size=3]． 
            threshold1 と threshold2 のうち小さいほうがエッジ同士を接続するために用いられ，大きいほうが強いエッジの初期検出に用いられる． 
            </summary>
            <param name="edges">この関数によって得られたエッジ画像</param>
            <param name="threshold1">１番目の閾値</param>
            <param name="threshold2">２番目の閾値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Canny(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            Cannyアルゴリズムを使用して，入力画像 imageに含まれているエッジを検出し，それを出力画像 edges に保存する． 
            threshold1 と threshold2 のうち小さいほうがエッジ同士を接続するために用いられ，大きいほうが強いエッジの初期検出に用いられる． 
            </summary>
            <param name="edges">この関数によって得られたエッジ画像</param>
            <param name="threshold1">１番目の閾値</param>
            <param name="threshold2">２番目の閾値</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする 
            </summary>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr(OpenCvSharp.CheckArrFlag)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする 
            </summary>
            <param name="flags">処理フラグ</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArr(OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする
            </summary>
            <param name="flags">処理フラグ</param>
            <param name="minVal">有効な値域の下限値(この値以上)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <param name="maxVal">有効な値域の上限値(この値未満)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス.
            </summary>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray(OpenCvSharp.CheckArrFlag)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス. 
            </summary>
            <param name="flags">処理フラグ</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckArray(OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス. 
            </summary>
            <param name="flags">処理フラグ</param>
            <param name="minVal">有効な値域の下限値(この値以上)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <param name="maxVal">有効な値域の上限値(この値未満)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CheckContourConvexity">
            <summary>
            輪郭が凸であるかを調べる
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Circle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawCircle(OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ClearND(System.Int32[])">
            <summary>
            密な配列と疎な配列の指定した要素をクリア（0にセット）する．要素が存在しなければ，この関数は何もしない．
            </summary>
            <param name="idx">要素のインデックスの配列(可変長引数）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Cmp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            二つの配列の各要素ごとの比較を行う. 対応する要素を比較し，出力配列の値にセットする．
            dst(I) = src1(I) op src2(I) .
            比較結果が真（true）であれば dst(I) には 0xff（要素すべてのビットが 1 ）をセットし，それ以外の場合（false）であれば 0 をセットする．
            </summary>
            <param name="src2">2番目の入力配列．どちらの入力配列もシングルチャンネルでなければならない．</param>
            <param name="dst">出力配列（タイプは 8u か 8s でないといけない）</param>
            <param name="cmpOp">比較方法を示すフラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CmpS(System.Double,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            配列要素とスカラーを比較し，出力配列の値をセットする．
            dst(I) = src1(I) op scalar .
            比較結果が真（true）であれば dst(I) には 0xff（要素すべてのビットが 1 ）をセットし，それ以外の場合（false）であれば 0 をセットする．
            </summary>
            <param name="value">それぞれの配列要素と比較されるスカラー</param>
            <param name="dst">出力配列（タイプは 8u か 8s でないといけない）</param>
            <param name="cmpOp">比較方法を示すフラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourArea">
            <summary>
            輪郭全体の領域，または輪郭の一部を計算する． 
            後者の場合，輪郭の弧と選択された2点を繋ぐ弦で区切られたエリア全体が計算される．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourArea(OpenCvSharp.CvSlice)">
            <summary>
            輪郭全体の領域，または輪郭の一部を計算する． 
            後者の場合，輪郭の弧と選択された2点を繋ぐ弦で区切られたエリア全体が計算される．
            </summary>
            <param name="slice">注目領域の輪郭の始点と終点．デフォルトでは全領域が計算される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ContourPerimeter">
            <summary>
            cvArcLength(curve,Whole_Seq,1) のエイリアス
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Scale(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Convert(OpenCvSharp.CvArr)">
            <summary>
            scale=1, shift=0 でのcvConvertScale呼び出し. 任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[scale=1, shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvertScaleAbs(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[scale=1, shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[shift=0]
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtScaleAbs(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．
            </summary>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexHull2(OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(OpenCvSharp.CvArr)">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのポインタまたはインデックスを持つ，つまりcvConvexHull2のreturn_pointsパラメータが0であるような cvConvexHull2 を使って得られた凸包．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのポインタまたはインデックスを持つ，つまりcvConvexHull2のreturn_pointsパラメータが0であるような cvConvexHull2 を使って得られた凸包．</param>
            <param name="storage">凹状欠損の出力シーケンスを格納する変数．これがnullである場合，代わりに，輪郭あるいは凸包のストレージが（この順番で）利用される．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ConvexityDefects(System.Int32[])">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのインデックスを持つ cvConvexHull2 を使って得られた凸包．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Copy(OpenCvSharp.CvArr)">
            <summary>
            一つの配列を別の配列にコピーする.
            </summary>
            <param name="dst">コピー先の画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            一つの配列を別の配列にコピーする.
            </summary>
            <param name="dst">コピー先の画像</param>
            <param name="mask">8 ビットシングルチャンネル配列の処理マスク．コピー先の配列の変更する要素を指定する．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType)">
            <summary>
            画像をコピーし，その周りに境界線をつける
            </summary>
            <param name="dst">出力画像</param>
            <param name="offset">入力画像（あるいはROI）がコピーされる出力画像内矩形領域の左上角座標 （左下に原点を持つ画像の場合は，左下角座標）．</param>
            <param name="bordertype">コピーされた矩形領域の周りに生成する境界線のタイプ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType,OpenCvSharp.CvScalar)">
            <summary>
            画像をコピーし，その周りに境界線をつける
            </summary>
            <param name="dst">出力画像</param>
            <param name="offset">入力画像（あるいはROI）がコピーされる出力画像内矩形領域の左上角座標 （左下に原点を持つ画像の場合は，左下角座標）．</param>
            <param name="bordertype">コピーされた矩形領域の周りに生成する境界線のタイプ</param>
            <param name="value">bordertype=Constant の場合は境界を埋める値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerEigenValsAndVecs(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            コーナー検出のために画像ブロックの固有値と固有ベクトルを計算する.
            </summary>
            <param name="eigenvv">結果保存用の画像．入力画像の6倍のサイズが必要．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerEigenValsAndVecs(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために画像ブロックの固有値と固有ベクトルを計算する.
            </summary>
            <param name="eigenvv">結果保存用の画像．入力画像の6倍のサイズが必要．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerHarris(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize,System.Double)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
            <param name="k">Harris検出器のパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerMinEigenVal(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="eigenval">最小固有値を保存する画像．image と同じサイズでなくてはならない．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CornerMinEigenVal(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="eigenval">最小固有値を保存する画像．image と同じサイズでなくてはならない．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CountNonZero">
            <summary>
            配列要素において 0 ではない要素をカウントする.
            配列が IplImage の場合， ROI，COI の両方に対応している．
            </summary>
            <returns>0 ではない要素数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CreateData">
            <summary>
            画像，行列あるいは多次元配列のデータを確保する．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.CreatePyramid(System.Int32,System.Double,OpenCvSharp.CvSize[],OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvFilter)">
            <summary>
            Builds pyramid for an image
            </summary>
            <param name="extraLayers"></param>
            <param name="rate"></param>
            <param name="layerSizes"></param>
            <param name="bufarr"></param>
            <param name="calc"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.CrossProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの3次元ベクトルの外積を計算する.
            dst = src1 × src2,  (dst1 = src12src23 - src13src22 , dst2 = src13src21 - src11src23 , dst3 = src11src22 - src12src21).
            </summary>
            <param name="src2">2番目の入力ベクトル</param>
            <param name="dst">出力ベクトル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtColor(OpenCvSharp.CvArr,OpenCvSharp.ColorConversion)">
            <summary>
            入力画像の色空間を変換する
            </summary>
            <param name="dst">出力画像. 入力画像と同じデータタイプ. チャンネル数は違うこともある．</param>
            <param name="code">色空間の変換の方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DCT(OpenCvSharp.CvArr,OpenCvSharp.DCTFlag)">
            <summary>
            次元あるいは2次元浮動小数点型配列の順方向・逆方向離散コサイン変換を行う
            </summary>
            <param name="dst">入力と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DecRefData">
            <summary>
            参照カウンタのポインタが null ではない場合に CvMat あるいは CvMatND のデータの参照カウンタをデクリメントし，さらにカウンタが 0 になった場合にはデータを解放する．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Det">
            <summary>
            行列式を返す
            </summary>
            <returns>行列式</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.DFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.
            </summary>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.
            </summary>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
            <param name="nonzeroRows">入力配列の非0である行の数（2次元順変換の場合），あるいは出力配列で注目する行の数（2次元逆変換の場合）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う. cvDFTのエイリアス.
            </summary>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FFT(OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.cvDFTのエイリアス.
            </summary>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
            <param name="nonzeroRows">入力配列の非0である行の数（2次元順変換の場合），あるいは出力配列で注目する行の数（2次元逆変換の場合）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
            <param name="element">膨張に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dilate(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
            <param name="element">膨張に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
            <param name="iterations">膨張の回数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[])">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
            <param name="mask">ユーザ定義の距離の場合はユーザ定義のマスク．3×3のマスクを用いる場合は2つの値（上下シフト値，斜めシフト値）を指定，5×5のマスクを用いる場合は3つの値（上下シフト値，斜めシフト値，ナイト移動シフト値（桂馬飛びのシフト値））を指定する．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[],OpenCvSharp.CvArr)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
            <param name="mask">ユーザ定義の距離の場合はユーザ定義のマスク．3×3のマスクを用いる場合は2つの値（上下シフト値，斜めシフト値）を指定，5×5のマスクを用いる場合は3つの値（上下シフト値，斜めシフト値，ナイト移動シフト値（桂馬飛びのシフト値））を指定する．</param>
            <param name="labels">オプション出力．整数ラベルに変換された2次元配列で，src ，dstと同じサイズ．現在は mask_size==3 あるいは 5 のときのみに使用される．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素同士を除算する (scale=1).
            dst(I)=scale*src1(I)/src2(I) [src1!=nullの場合],  
            dst(I)=scale/src2(I) [src1=nullの場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            二つの配列の要素同士を除算する.
            dst(I)=scale*src1(I)/src2(I) [src1!=nullの場合],  
            dst(I)=scale/src2(I) [src1=nullの場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">任意のスケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[],System.Boolean)">
            <summary>
            チェスボードからコーナーが完全に検出されていない場合（pattern_was_found=false）は，検出されたコーナーそれぞれに赤色の円を描く．
            また完全に検出されている場合（pattern_was_found=true）は，色付けされた各コーナを線分で接続して表示する． 
            </summary>
            <param name="patternSize">チェスボードの各行と各列の内部コーナーの数．</param>
            <param name="corners">検出されたコーナーの配列．</param>
            <param name="patternWasFound">チェスボードからコーナーが完全に発見された(true)か，そうでない(false)かを示す．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawContours(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CvPoint)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
            <param name="lineType">線の種類</param>
            <param name="offset">全ての座標を指定した値だけシフトする</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
            <param name="eps">対角化の精度（一般的に，DBL_EPSILON=≈10^-15 で十分である）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ellipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
            <param name="shift">中心座標と軸の長さの小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawEllipse(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
            <param name="shift">中心座標と軸の長さの小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
            <param name="lineType">楕円境界線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EllipseBox(OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
            <param name="lineType">楕円境界線の種類．</param>
            <param name="shift">矩形領域の頂点座標の小数点以下の桁を表すビット数．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.EqualizeHist(OpenCvSharp.CvArr)">
            <summary>
            グレースケール画像のヒストグラムを均一化する．輝度を均一化し，画像のコントラストを上げる．
            </summary>
            <param name="dst">出力画像．srcと同じサイズ, 同じデータタイプ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
            <param name="element">収縮に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Erode(OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="dst">出力画像</param>
            <param name="element">収縮に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
            <param name="iterations">収縮の回数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Exp(OpenCvSharp.CvArr)">
            <summary>
            すべての配列要素について自然対数の底（ネイピア数）eのべき乗を求める
            </summary>
            <param name="dst">出力配列．倍精度の浮動小数点型（double），または入力配列と同じタイプでなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractMSER(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvMSERParams)">
            <summary>
            Extracts the contours of Maximally Stable Extremal Regions
            </summary>
            <param name="mask"></param>
            <param name="storage"></param>
            <param name="params"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.IntPtr}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="storage">キーポイントとディスクリプタが格納されるメモリストレージ</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.IntPtr}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams,System.Boolean)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="storage">キーポイントとディスクリプタが格納されるメモリストレージ</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
            <param name="useProvidedKeyPts">If useProvidedKeyPts!=0, keypoints are not detected, but descriptors are computed at the locations provided in keypoints (a CvSeq of CvSURFPoint).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvSURFPoint[]@,System.Single[][]@,OpenCvSharp.CvSURFParams)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvSURFPoint[]@,System.Single[][]@,OpenCvSharp.CvSURFParams,System.Boolean)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
            <param name="useProvidedKeyPts">If useProvidedKeyPts!=0, keypoints are not detected, but descriptors are computed at the locations provided in keypoints (a CvSeq of CvSURFPoint).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillConvexPoly(OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
            <param name="lineType">線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FillPoly(OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
            <param name="lineType">線の種類．</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            画像に線形フィルタを適用する
            </summary>
            <param name="dst">出力画像</param>
            <param name="kernel">フィルタマスク．係数のシングルチャンネルの2次元浮動小数点型行列．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvPoint)">
            <summary>
            画像に線形フィルタを適用する
            </summary>
            <param name="dst">出力画像</param>
            <param name="kernel">フィルタマスク．係数のシングルチャンネルの2次元浮動小数点型行列．</param>
            <param name="anchor">カーネルのアンカー．カーネルマスクでカバーされる隣接領域内における， フィルタ対象となるピクセルの相対位置を表す．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <param name="cornerCount">コーナーの数が出力される</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindChessboardCorners(OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,OpenCvSharp.ChessboardFlag)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <param name="cornerCount">コーナーの数が出力される</param>
            <param name="flags">処理フラグ</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <param name="method">近似手法</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindContours(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <param name="method">近似手法</param>
            <param name="offset">オフセット．全ての輪郭点はこれによってシフトされる.</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FindCornerSubPix(OpenCvSharp.CvPoint2D32f[],System.Int32,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            コーナー位置を高精度化する.
            </summary>
            <param name="corners">コーナーの初期座標が入力され，高精度化された座標が出力される.</param>
            <param name="count">コーナーの数</param>
            <param name="win">検索ウィンドウの半分のサイズ．（例）win=(5,5) ならば 5*2+1 × 5*2+1 = 11 × 11 が探索ウィンドウして使われる.</param>
            <param name="zeroZone">総和を計算する際に含まれない，探索領域の中心に存在する総和対象外領域の半分のサイズ．この値は，自己相関行列において発生しうる特異点を避けるために用いられる． 値が (-1,-1) の場合は，そのようなサイズはないということを意味する</param>
            <param name="criteria">コーナー座標の高精度化のための繰り返し処理の終了条件．コーナー位置の高精度化の繰り返し処理は，規定回数に達するか，目標精度に達したときに終了する．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FitEllipse2">
            <summary>
            2次元の点列に楕円をフィッティングする
            </summary>
            <returns>2次元の点列にフィットする最良の楕円</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.FitLine(OpenCvSharp.DistanceType,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            2次元または3次元の点列に線をフィッティングする
            </summary>
            <param name="distType">フィッティングに使われる距離．</param>
            <param name="param">それぞれの距離関数における数値パラメータ（C）．0を指定した場合，最適な値が選択される．</param>
            <param name="reps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="aeps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="line">出力される線のパラメータ．2次元フィッティングの場合，四つの浮動小数点型数(vx, vy, x0, y0)の配列で，(vx, vy)は正規化された方向ベクトル，(x0, y0)は線上の点を意味する．3次元フィッティングの場合，(vx, vy, vz, x0, y0, z0)の六つの浮動小数点型数の配列で，(vx, vy, vz)は正規化された方向ベクトル，(x0, y0, z0)は線上の点を意味する．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip(OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Flip(OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
            <param name="flipMode">配列の反転方法の指定</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror(OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mirror(OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
            <param name="flipMode">配列の反転方法の指定</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,OpenCvSharp.FloodFillFlag)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
            <param name="flags">操作フラグ．下位ビットは関数内で用いられる連結性に関する値4（デフォルト）または8が入っている． 
            連結性は，どのピクセルを隣接ピクセルと見なすかを定義する．上位ビットは0，あるいはCv.FLOODFILL_FIXED_RANGE, Cv.FLOODFILL_MASK_ONLY との組み合わせである.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.FloodFill(OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,OpenCvSharp.FloodFillFlag,OpenCvSharp.CvArr)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
            <param name="flags">操作フラグ．下位ビットは関数内で用いられる連結性に関する値4（デフォルト）または8が入っている． 
            連結性は，どのピクセルを隣接ピクセルと見なすかを定義する．上位ビットは0，あるいはCv.FLOODFILL_FIXED_RANGE, Cv.FLOODFILL_MASK_ONLY との組み合わせである.</param>
            <param name="mask">処理用マスク</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get1D(System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get2D(System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Get3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetND(System.Int32[])">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値. </returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetCol(System.Int32)">
            <summary>
            指定された列を返す
            </summary>
            <param name="col">選択した列の，0を基準としたインデックス．</param>
            <returns>指定された範囲の列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetCols(System.Int32,System.Int32)">
            <summary>
            指定された範囲の列（複数列）を返す
            </summary>
            <param name="startCol">範囲の最初の（この値を含む）列の，0を基準としたインデックス．</param>
            <param name="endCol">範囲の最後の（この値を含まない）列の，0を基準としたインデックス．</param>
            <returns>指定された範囲の列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDiag(OpenCvSharp.CvMat@)">
            <summary>
            入力配列中の指定された対角列に相当するヘッダを返す. 
            </summary>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDiag(OpenCvSharp.CvMat@,OpenCvSharp.DiagType)">
            <summary>
            入力配列中の指定された対角列に相当するヘッダを返す. 
            </summary>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="diag">対角配列の種類</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDims">
            <summary>
            配列の次元とそれらのサイズを返す．
            IplImageまたは CvMatの場合には，画像や行列の行数に関係なく常に 2 を返す．
            </summary>
            <returns>配列の次元数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDims(System.Int32[]@)">
            <summary>
            配列の次元とそれらのサイズを返す．
            IplImageまたは CvMatの場合には，画像や行列の行数に関係なく常に 2 を返す．
            </summary>
            <param name="sizes">配列の次元の大きさを示すオプションの出力ベクトル．2次元配列の場合は1番目に行数（高さ），次は列数（幅）を示す．</param>
            <returns>配列の次元数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetDimSize(System.Int32)">
            <summary>
            配列の指定された次元の要素数を返す. 
            </summary>
            <param name="index">0を基準にした次元のインデックス（行列では0は行数，1は列数を示す．画像では0は高さ, 1は幅を示す）．</param>
            <returns>指定された次元の要素数</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetElemType">
            <summary>
            配列要素のタイプを返す. 
            </summary>
            <returns>配列要素のタイプ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetQuadrangleSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            四角形領域のピクセル値を画像からサブピクセル精度で取得する（画像の回転＋並進移動を行なう）.
            </summary>
            <param name="dst">抽出された矩形</param>
            <param name="mapMatrix">2 × 3 の変換行列[A|b]</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@,System.Int32@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
            <param name="step">出力であるバイト単位で表された行の長さ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRawData(System.IntPtr@,System.Int32@,OpenCvSharp.CvSize@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
            <param name="step">出力であるバイト単位で表された行の長さ．</param>
            <param name="roiSize">出力であるROI サイズ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal1D(System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal2D(System.Int32,System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetReal3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRealND(System.Int32[])">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRectSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f)">
            <summary>
            矩形領域のピクセル値を画像からサブピクセル精度で取得する（画像の並進移動を行なう）.
            </summary>
            <param name="dst">抽出された矩形</param>
            <param name="center">入力画像中にある抽出された矩形中心の浮動小数点型座標．中心は画像中になければならない．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRow(System.Int32)">
            <summary>
            指定された行を返す
            </summary>
            <param name="row">選択した行の，0を基準としたインデックス．</param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRows(System.Int32,System.Int32)">
            <summary>
            指定された範囲の行（複数行）を返す
            </summary>
            <param name="startRow">範囲の最初の（この値を含む）行の，0を基準としたインデックス．</param>
            <param name="endRow">範囲の最後の（この値を含まない）行の，0を基準としたインデックス．</param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            指定された範囲の行（複数行）を返す
            </summary>
            <param name="startRow">範囲の最初の（この値を含む）行の，0を基準としたインデックス．</param>
            <param name="endRow">範囲の最後の（この値を含まない）行の，0を基準としたインデックス．</param>
            <param name="deltaRow">行の範囲のインデックス間隔． この関数は，start_rowからend_row（は含まない）まで，delta_row毎に行を抽出する. </param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSize">
            <summary>
            行列または画像の ROI のサイズを返す
            </summary>
            <returns>サイズ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetStarKeypoints(OpenCvSharp.CvMemStorage)">
            <summary>
            StarDetectorアルゴリズムによりキーポイントを取得する
            </summary>
            <param name="storage">キーポイントが格納されるメモリストレージ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetStarKeypoints(OpenCvSharp.CvMemStorage,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            StarDetectorアルゴリズムによりキーポイントを取得する
            </summary>
            <param name="storage">キーポイントが格納されるメモリストレージ</param>
            <param name="params">CvStarDetectorParams構造体としてまとめて与えられる、アルゴリズムのための各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSubRect(OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            入力配列中の指定した矩形領域に相当するヘッダを返す．
            つまり，入力配列の一部の矩形領域を，独立した配列として扱えるようにする．この関数では ROI を考慮し，実際には ROI の部分配列が取り出される.
            </summary>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="rect">着目する矩形領域の，0 を基準とした座標</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.GetSubArr(OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            入力配列中の指定した矩形領域に相当するヘッダを返す．
            つまり，入力配列の一部の矩形領域を，独立した配列として扱えるようにする．この関数では ROI を考慮し，実際には ROI の部分配列が取り出される.
            </summary>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="rect">着目する矩形領域の，0 を基準とした座標</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HaarDetectObjects(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <param name="minSize">最小ウィンドウサイズ．デフォルトでは分類器の学習に用いられたサンプルのサイズが設定される（顔検出の場合は，~20×20）.</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <param name="maxRadius">検出すべき円の最大半径 デフォルトの最大半径は max(image_width, image_height) にセットされている．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughCircles(OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <param name="maxRadius">検出すべき円の最大半径 デフォルトの最大半径は max(image_width, image_height) にセットされている．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="lineStorage">検出された線を保存するメモリストレージ. 関数によって線分のシーケンスがストレージ内につくられ，その参照が返される</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="lineStorage">検出された線を保存するメモリストレージ. 関数によって線分のシーケンスがストレージ内につくられ，その参照が返される</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="lineStorage">検出された線を保存する1行の行列/1列の行列. 行列のヘッダは，そのcols か rowsが検出された線の数となるように，この関数によって変更される．もし実際の線の数が行列のサイズを超える場合は，線の最大可能数が返される（標準的ハフ変換の場合は 投票数でソートされる）．</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLines2(OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="lineStorage">検出された線を保存する1行の行列/1列の行列. 行列のヘッダは，そのcols か rowsが検出された線の数となるように，この関数によって変更される．もし実際の線の数が行列のサイズを超える場合は，線の最大可能数が返される（標準的ハフ変換の場合は 投票数でソートされる）．</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.IncRefData">
            <summary>
            参照カウンタポインタが null ではない場合に， CvMat あるいは CvMatND のデータの参照カウンタをインクリメントし，新たなカウンタ値を返す．
            そうでない場合は 0 を返す． 
            </summary>
            <returns>新たなカウンタ値</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inpaint(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.InpaintMethod)">
            <summary>
            配列の要素値が他の二つの配列要素で表される範囲内に位置するかをチェックする
            </summary>
            <param name="mask">修復マスク．8ビット，1チャンネル画像． 非0のピクセルが，修復の必要がある領域であることを示す．</param>
            <param name="dst">出力画像（入力画像と同じサイズ，同じタイプ）．</param>
            <param name="inpaintRange">修復されるピクセルの円状の隣接領域を示す半径</param>
            <param name="flags">修復方法</param>	
        </member>
        <member name="M:OpenCvSharp.CvArr.InRange(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の要素値が他の二つの配列要素で表される範囲内に位置するかをチェックする
            </summary>
            <param name="lower">下限値（その値を含む）を表す配列</param>
            <param name="upper">上限値（その値は含まない）を表す配列</param>
            <param name="dst">出力配列（タイプは8u または 8s）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.InRangeS(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の要素値が二つのスカラーの間に位置するかをチェックする
            </summary>
            <param name="lower">下限値（その値を含む）</param>
            <param name="upper">上限値（その値は含まない）</param>
            <param name="dst">出力配列（タイプは8u または 8s）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
            <param name="sqsum">オプション：各ピクセル値を2乗したインテグラルイメージ，W+1×H+1，倍精度浮動小数点型（64f）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
            <param name="sqsum">オプション：各ピクセル値を2乗したインテグラルイメージ，W+1×H+1，倍精度浮動小数点型（64f）． </param>
            <param name="tiltedSum">オプション：45度回転させた入力画像のインテグラルイメージ，W+1×H+1，sumと同じデータフォーマット．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Invert(OpenCvSharp.CvArr)">
            <summary>
            逆行列または擬似逆行列を求める.
            </summary>
            <param name="dst">出力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Invert(OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            逆行列または擬似逆行列を求める.
            </summary>
            <param name="dst">出力行列</param>
            <param name="method">逆行列を求める手法</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inv(OpenCvSharp.CvArr)">
            <summary>
            逆行列または擬似逆行列を求める. Invertのエイリアス.
            </summary>
            <param name="dst">出力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Inv(OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            逆行列または擬似逆行列を求める. Invertのエイリアス.
            </summary>
            <param name="dst">出力行列</param>
            <param name="method">逆行列を求める手法</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.KMeans2(System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Laplace(OpenCvSharp.CvArr)">
            <summary>
            Sobel演算子を用いて計算されたxとyの2次微分を加算することで，入力画像のラプラシアン（Laplacian）を計算する [aperture_size=3]
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Laplace(OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Sobel演算子を用いて計算されたxとyの2次微分を加算することで，入力画像のラプラシアン（Laplacian）を計算する
            </summary>
            <param name="dst">出力画像</param>
            <param name="apertureSize">拡張Sobelカーネルのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Line(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Log(OpenCvSharp.CvArr)">
            <summary>
            すべての配列要素の絶対値の自然対数を計算する
            </summary>
            <param name="dst">出力配列．倍精度の浮動小数点型（double），または入力配列と同じタイプでなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            画像を対数極座標（Log-Polar）空間に再マッピングする.
            この関数は人間の網膜をモデル化したものであり，オブジェクトトラッキング等のための高速なスケーリングと，
            回転に不変なテンプレートマッチングに用いることができる．
            </summary>
            <param name="dst">出力画像</param>
            <param name="center">出力精度が最大となるような変換の中心座標</param>
            <param name="m">スケーリング係数の大きさ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            画像を対数極座標（Log-Polar）空間に再マッピングする. 
            この関数は人間の網膜をモデル化したものであり，オブジェクトトラッキング等のための高速なスケーリングと，
            回転に不変なテンプレートマッチングに用いることができる．
            </summary>
            <param name="dst">出力画像</param>
            <param name="center">出力精度が最大となるような変換の中心座標</param>
            <param name="m">スケーリング係数の大きさ</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）．</param>
            <param name="lut">要素数が256であるルックアップテーブル（出力配列と同じデプスでなければならない）．マルチチャンネルの入力/出力配列の場合，テーブルはシングルチャンネル（この場合すべてのチャンネル対して，同じテーブルを使う）か，入力/出力配列と同じチャンネル数でなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Byte[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Int16[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Single[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.LUT(OpenCvSharp.CvArr,System.Double[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MatchTemplate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            テンプレートと重なった画像領域を比較する. 
            templを，image全体に対してスライドさせ，それとサイズ w×h で重なる領域とを指定された方法で比較し，その結果を result に保存する． 
            </summary>
            <param name="templ">探索用テンプレート．画像より大きくてはならない，かつ画像と同じタイプである必要がある． </param>
            <param name="result">比較結果のマップ．シングルチャンネルの32ビット浮動小数点型データ．image が W×H で templ が w×h ならば， result は W-w+1×H-h+1のサイズが必要． </param>
            <param name="method">テンプレートマッチングの方法（以下を参照）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Max(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の各要素についての最大値を求める. 
            dst(I)=max(src1(I), src2(I)) 
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MaxS(System.Double,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーについての最大値を求める. 
            dst(I)=max(src(I), value) 
            </summary>
            <param name="value">スカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Min(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の各要素についての最小値を求める. 
            dst(I)=min(src1(I), src2(I)) 
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinAreaRect2">
            <summary>
            与えられた2次元の点列を囲む最小矩形を求める
            </summary>
            <returns>2次元の点列に対する最小矩形</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinAreaRect2(OpenCvSharp.CvMemStorage)">
            <summary>
            与えられた2次元の点列を囲む最小矩形を求める
            </summary>
            <param name="storage">一時的なメモリストレージ</param>
            <returns>2次元の点列に対する最小矩形</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinEnclosingCircle(OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            与えられた2次元の点列を囲む最小円を求める
            </summary>
            <param name="center">出力パラメータ．囲む円の中心．</param>
            <param name="radius">出力パラメータ．囲む円の半径．</param>
            <returns>結果の円が全ての入力点を含む場合はtrueを返し， それ以外（すなわちアルゴリズムの失敗）の場合はfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinMaxLoc(System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MinS(System.Double,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーについての最小値を求める. 
            dst(I)=min(src(I), value) 
            </summary>
            <param name="value">スカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Moments(System.Boolean)">
            <summary>
            ポリゴンまたはラスタ形状の３次までのモーメントを計算する
            </summary>
            <param name="isBinary">（画像の場合のみ）このフラグがtrueの場合，値0のピクセルは0として，その他のピクセル値は1として扱われる． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素同士を乗算する (scale=1).
            dst(I) = scale * src1(I) * src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            二つの配列の要素同士を乗算する.
            dst(I) = scale * src1(I) * src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">任意のスケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm">
            <summary>
            配列の絶対値ノルム（absolute array norm）を計算する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr,OpenCvSharp.NormType)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <param name="normType">ノルムのタイプ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Norm(OpenCvSharp.CvArr,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <param name="normType">ノルムのタイプ</param>
            <param name="mask">オプションの処理マスク</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="dst">出力配列．インプレース処理が可能．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
            <param name="normType">正規化のタイプ. C, L1, L2, MinMaxのうち1つ.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Normalize(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
            <param name="normType">正規化のタイプ. C, L1, L2, MinMaxのうち1つ.</param>
            <param name="mask">操作マスク．特定の配列要素のみを正規化するためのマスク．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Not(OpenCvSharp.CvArr)">
            <summary>
            各配列要素のビット単位の反転を行う
            </summary>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理和（OR）を計算する. 
            dst(I)=src1(I)|src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理和（OR）を計算する. 
            dst(I)=src1(I)|src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.OrS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理和(OR)を計算する.
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)|value
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.OrS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理和(OR)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)|value [mask(I)!=0の場合]
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PerspectiveTransform(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            ベクトルの透視投影変換を行う
            </summary>
            <param name="dst">3チャンネルの浮動小数点型出力配列</param>
            <param name="mat">3×3 または 4×4 の変換行列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PointPolygonTest(OpenCvSharp.CvPoint2D32f,System.Boolean)">
            <summary>
            点と輪郭の関係を調べる
            </summary>
            <param name="pt">入力輪郭に対して調べる点</param>
            <param name="measureDist">非0の場合, この関数は与えた点に最も近い輪郭までの距離を求める.</param>
            <returns>点が輪郭の内側にあるか，外側にあるか，輪郭上に乗っている（あるいは，頂点と一致している）かを判別し，それぞれの場合に応じて正か負か0を返す．
            measure_dist=0の場合，戻り値はそれぞれ+1，-1，0である． measure_dist≠0の場合，点と最近傍輪郭までの符号付きの距離を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawPolyLine(OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Pow(OpenCvSharp.CvArr,System.Double)">
            <summary>
            すべての配列要素を累乗する.
            </summary>
            <param name="dst">出力配列．入力と同じタイプでなければならない.</param>
            <param name="power">累乗の指数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PreCornerDetect(OpenCvSharp.CvArr)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="corners">コーナーの候補を保存する画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="corners">コーナーの候補を保存する画像</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr1D(System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr1D(System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr2D(System.Int32,System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr2D(System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Ptr3D(System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[])">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@,System.Boolean)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <param name="createNode">疎な行列に対するオプションの入力パラメータ. trueの場合，指定された要素が存在しないときは要素を生成する.</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PtrND(System.Int32[],OpenCvSharp.MatrixType@,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <param name="createNode">疎な行列に対するオプションの入力パラメータ. trueの場合，指定された要素が存在しないときは要素を生成する.</param>
            <param name="precalcHashval">疎な行列に対するオプションの入力パラメータ．nullでないとき，関数はノードのハッシュ値を再計算せず，指定された場所から取ってくる． これにより，ペアワイズ操作の速度が向上する．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.PutText(System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont,OpenCvSharp.CvScalar)">
            <summary>
            文字列を描画する
            </summary>
            <param name="text">描画する文字列</param>
            <param name="org">最初の文字の左下の座標</param>
            <param name="font">フォント構造体</param>
            <param name="color">文字の色</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrDown(OpenCvSharp.CvArr)">
            <summary>
            画像のダウンサンプリングを行う
            </summary>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            画像のダウンサンプリングを行う
            </summary>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
            <param name="filter">畳み込みに使うフィルタ．現在は CV_GAUSSIAN_5x5 のみサポート．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double,System.Int32)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
            <param name="maxLevel">セグメント化のためのピラミッドの最大レベル</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrMeanShiftFiltering(OpenCvSharp.CvArr,System.Double,System.Double,System.Int32,OpenCvSharp.CvTermCriteria)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
            <param name="maxLevel">セグメント化のためのピラミッドの最大レベル</param>
            <param name="termcrit">終了条件．平均値シフトをいつまで繰り返すか</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrUp(OpenCvSharp.CvArr)">
            <summary>
            画像のアップサンプリングを行う
            </summary>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            画像のアップサンプリングを行う
            </summary>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
            <param name="filter">畳み込みに使うフィルタ．現在は CV_GAUSSIAN_5x5 のみサポート．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle(OpenCvSharp.CvRNG)">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
            <param name="rng">要素のシャッフルで用いられる Random Number Generator．ポインタがnullの場合，一時的なRNGが生成され，利用される．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandShuffle(OpenCvSharp.CvRNG,System.Double)">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
            <param name="rng">要素のシャッフルで用いられる Random Number Generator．ポインタがnullの場合，一時的なRNGが生成され，利用される．</param>
            <param name="iterFactor">シャッフルの強さを指定するパラメータ.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Range(System.Double,System.Double)">
            <summary>
            与えられた範囲の数で行列を埋める．次のように行列を初期化する．
            arr(i,j) = (End-Start) * (i*cols(arr)+j) / (cols(arr)*rows(arr)) 
            </summary>
            <param name="start">範囲の下限（範囲に含まれる）</param>
            <param name="end">範囲の上限（範囲に含まれない）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Rectangle(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.DrawRect(OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
            <param name="dim">配列をどのように縮小するかを示すインデックス</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reduce(OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
            <param name="dim">配列をどのように縮小するかを示すインデックス</param>
            <param name="type">縮小処理の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReleaseData">
            <summary>
            配列データを解放する． 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
            <param name="flags">補間方法</param>
            <param name="fillval">対応の取れない点に対して与える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Repeat(OpenCvSharp.CvArr)">
            <summary>
            出力配列を入力配列でタイル状に埋める
            </summary>
            <param name="dst">出力配列，画像または行列．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="newRows">新しい行数． new_rows = 0は，行数がnew_cnの値に応じて変更する必要があるのにも関わらず，変更されないままであることを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Reshape(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="newRows">新しい行数． new_rows = 0は，行数がnew_cnの値に応じて変更する必要があるのにも関わらず，変更されないままであることを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReshapeMatND``1(System.Int32,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            cvReshape の拡張バージョン．
            これは多次元配列を扱うことが可能（普通の画像と行列に対しても使用することが可能）で，さらに次元の変更も可能である．
            </summary>
            <typeparam name="T">出力ヘッダの型</typeparam>
            <param name="sizeofHeader">IplImageとCvMat，CvMatNDそれぞれの出力ヘッダを区別するための出力ヘッダのサイズ．</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="newDims">新しい次元数． new_dims = 0は，次元数が同じままであることを意味する．</param>
            <param name="newSizes">新しい次元サイズの配列．要素の総数は変化してはいけないので，new_dims-1の値のみ使用される．従って，new_dims = 1であればnew_sizesは使用されない．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ReshapeND``1(``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            cvReshape の拡張バージョン．
            これは多次元配列を扱うことが可能（普通の画像と行列に対しても使用することが可能）で，さらに次元の変更も可能である．
            </summary>
            <typeparam name="T">出力ヘッダの型</typeparam>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="newCn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="newDims">新しい次元数． new_dims = 0は，次元数が同じままであることを意味する．</param>
            <param name="newSizes">新しい次元サイズの配列．要素の総数は変化してはいけないので，new_dims-1の値のみ使用される．従って，new_dims = 1であればnew_sizesは使用されない．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Resize(OpenCvSharp.CvArr)">
            <summary>
            画像のサイズ変更を行う (バイリニア補間)
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Resize(OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            画像のサイズ変更を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="interpolation">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SampleLine(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            ラスタ表現の線分を構成する点をサンプリングする
            </summary>
            <param name="pt1">線分の始点</param>
            <param name="pt2">線分の終点</param>
            <param name="buffer">線分上の点を保存するためのバッファ</param>
            <param name="connectivity">線分の接続性．4 または 8．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ScaleAdd(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スケーリングされた配列ともう一つの配列の和を計算する.
            dst(I)=src1(I)*scale + src2(I)
            </summary>
            <param name="scale">1番目の配列のためのスケールファクタ</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.MulAddS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スケーリングされた配列ともう一つの配列の和を計算する (cvScaleAddのエイリアス).
            dst(I)=src1(I)*scale + src2(I)
            </summary>
            <param name="scale">1番目の配列のためのスケールファクタ</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set(OpenCvSharp.CvScalar)">
            <summary>
            スカラー値 value を，配列の選択された各要素にコピーする．
            </summary>
            <param name="value">配列を埋める値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            スカラー値 value を，配列の選択された各要素にコピーする．
            mask(I) != null の場合，arr(I)=value. 
            </summary>
            <param name="value">配列を埋める値</param>
            <param name="mask">8 ビットシングルチャンネル配列の処理マスク．配列の変更する要素を指定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set1D(System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set2D(System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Set3D(System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetND(OpenCvSharp.CvScalar,System.Int32[])">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="value">割り当てる値</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetData``1(``0[],System.Int32)">
            <summary>
            ユーザデータを配列のヘッダに割り当てる． 
            ヘッダは，関数 cvCreate*Header，関数 cvInit*Header あるいは 関数 cvMat（行列の場合）を用いて，あらかじめ初期化されるべきである．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">ユーザデータ</param>
            <param name="step">バイト単位で表された行の長さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetData(System.IntPtr,System.Int32)">
            <summary>
            ユーザデータを配列のヘッダに割り当てる． 
            ヘッダは，関数 cvCreate*Header，関数 cvInit*Header あるいは 関数 cvMat（行列の場合）を用いて，あらかじめ初期化されるべきである．
            </summary>
            <param name="data">ユーザデータ</param>
            <param name="step">バイト単位で表された行の長さ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetIdentity">
            <summary>
            スカラー倍された単位行列を用いた初期化を行う
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetIdentity(OpenCvSharp.CvScalar)">
            <summary>
            スカラー倍された単位行列を用いた初期化を行う
            </summary>
            <param name="value">対角成分の値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal1D(System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal2D(System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetReal3D(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetRealND(System.Double,System.Int32[])">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="value">割り当てる値</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SetZero">
            <summary>
            配列をクリアする
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Zero">
            <summary>
            配列をクリアする
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
            <param name="param3">ガウシアン平滑化 の場合，このパラメータがガウシアンsigma（標準偏差）を示す．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Smooth(OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
            <param name="param3">ガウシアン平滑化 の場合，このパラメータがガウシアンsigma（標準偏差）を示す．</param>
            <param name="param4">非正方形のガウシアンカーネルを使用する場合，垂直方向に異なるsigma 値(param3と違う値)指定するために用いられる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sobel(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            拡張Sobel演算子を用いて1次，2次，3次または混合次数の微分画像を計算する [aperture_size=3]
            </summary>
            <param name="dst">出力画像</param>
            <param name="xorder">x-導関数の次数</param>
            <param name="yorder">y-導関数の次数</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sobel(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            拡張Sobel演算子を用いて1次，2次，3次または混合次数の微分画像を計算する
            </summary>
            <param name="dst">出力画像</param>
            <param name="xorder">x-導関数の次数</param>
            <param name="yorder">y-導関数の次数</param>
            <param name="apertureSize">拡張Sobelカーネルのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SortFlag)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
            <param name="flags">Sorting parameter</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Split(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            マルチチャンネルの配列を，複数のシングルチャンネルの配列に分割する．または，配列から一つのチャンネルを取り出す．
            </summary>
            <param name="dst0">出力チャンネル1</param>
            <param name="dst1">出力チャンネル2</param>
            <param name="dst2">出力チャンネル3</param>
            <param name="dst3">出力チャンネル4</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtPixToPlane(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            マルチチャンネルの配列を，複数のシングルチャンネルの配列に分割する．または，配列から一つのチャンネルを取り出す．
            </summary>
            <param name="dst0">出力チャンネル1</param>
            <param name="dst1">出力チャンネル2</param>
            <param name="dst2">出力チャンネル3</param>
            <param name="dst3">出力チャンネル4</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SquareAcc(OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに入力画像の二乗を加算する
            </summary>
            <param name="sqsum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに入力画像の二乗を加算する
            </summary>
            <param name="sqsum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型． </param>
            <param name="mask">オプションの処理マスク</param>        
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize"></param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.StartFindContours(OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <param name="offset">ROIのオフセット．cvFindContoursを参照． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの減算を行う. 
            dst(I)=src1(I)-src2(I) 
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの減算を行う.
            dst(I)=src1(I)-src2(I) [mask(I)!=0 の場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列要素からスカラーを減算する.
            dst(I) = src(I)-value 
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列要素からスカラーを減算する.
            dst(I) = src(I)-value [mask(I)!=0]
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubRS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            スカラーから配列要素を減算する.
            dst(I)=value-src(I)
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SubRS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スカラーから配列要素を減算する.
            dst(I)=value-src(I) [mask(I)!=0 の場合]
            </summary>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Sum">
            <summary>
            配列要素の総和を計算する.
            配列のタイプが IplImage で COI がセットされている場合，指定されたチャンネルのみを処理し，総和を１番目のスカラー値（S0）として保存する．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="w">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="w">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="u">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="w">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="u">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
            <param name="v">任意の右直交行列（N×N)．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="w">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="u">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
            <param name="v">任意の右直交行列（N×N)．</param>
            <param name="flags">操作フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Threshold(OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            シングルチャンネルの配列に対して，固定閾値での閾値処理を行う
            </summary>
            <param name="dst">出力配列．src と同じデータタイプ，または8ビット． </param>
            <param name="threshold">閾値</param>
            <param name="maxValue">threshold_type が Binary と BinaryInv のときに使用する最大値</param>
            <param name="thresholdType">閾値処理の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Trace">
            <summary>
            行列のトレース(対角成分の和)を返す
            </summary>
            <returns>対角成分の和</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Transpose(OpenCvSharp.CvArr)">
            <summary>
            行列の転置を行う.
            </summary>
            <param name="dst">出力行列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.T(OpenCvSharp.CvArr)">
            <summary>
            行列の転置を行う.
            </summary>
            <param name="dst">出力行列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            半径方向や円周方向のレンズ歪みを補正するために画像を変換する．
            </summary>
            <param name="dst">出力画像（補正済み）</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数ベクトル． 4x1 または 1x4 [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            半径方向や円周方向のレンズ歪みを補正するために画像を変換する．
            </summary>
            <param name="dst">出力画像（補正済み）</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数ベクトル． 4x1 または 1x4 [k1, k2, p1, p2]. </param>
            <param name="newCameraMatrix"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ValidateDisparity(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.ValidateDisparity(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="disp12MaxDiff"></param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
            <param name="flags">補間方法</param>
            <param name="fillval">対応の取れない点に対して与える値</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Watershed(OpenCvSharp.CvArr)">
            <summary>
            watershedアルゴリズムによる画像のセグメント化を行う.
            画像をこの関数に渡す前に，ユーザーは大まかに画像markers中の処理対象領域を，正（>0）のインデックスを用いて区切っておかなければならない．
            </summary>
            <param name="markers">入出力画像．32ビットシングルチャンネルのマーカー画像（マップ）.</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの排他的論理和（XOR）を計算する. 
            dst(I)=src1(I)^src2(I)
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの排他的論理和（XOR）を計算する. 
            dst(I)=src1(I)^src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.XorS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の排他的論理和(XOR)を計算する.
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)^value
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.XorS(OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の排他的論理和(XOR)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)^value [mask(I)!=0の場合]
            </summary>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvArr.#ctor(System.Boolean)">
            <summary>
            解放の可否を指定して初期化
            </summary>
            <param name="isEnabledDispose">GCで解放するならtrue</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesStandard(System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換で、method=CV_HOUGH_STANDARDを用いて2値画像から直線を検出する
            </summary>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns>検出した直線の極座標形式、の配列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesStandard(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換で、method=CV_HOUGH_STANDARDを用いて2値画像から直線を検出する
            </summary>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns>検出した直線の極座標形式、の配列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesProbabilistic(System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換で、method=CV_HOUGH_PROBABILISTICを用いて2値画像から直線を検出する
            </summary>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns>検出した直線を両端の点で表した形式、の配列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.HoughLinesProbabilistic(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換で、method=CV_HOUGH_PROBABILISTICを用いて2値画像から直線を検出する
            </summary>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns>検出した直線を両端の点で表した形式、の配列</returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.Merge(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            複数のシングルチャンネルの配列からマルチチャンネル配列を構成する．または，配列に一つのシングルチャンネルを挿入する. (cvMerge)
            </summary>
            <param name="src0">入力配列1</param>
            <param name="src1">入力配列2</param>
            <param name="src2">入力配列3</param>
            <param name="src3">入力配列4</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.CvtPlaneToPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            複数のシングルチャンネルの配列からマルチチャンネル配列を構成する．または，配列に一つのシングルチャンネルを挿入する. (cvCvtPlaneToPix)
            </summary>
            <param name="src0">入力配列1</param>
            <param name="src1">入力配列2</param>
            <param name="src2">入力配列3</param>
            <param name="src3">入力配列4</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.RandArr(OpenCvSharp.CvRNG,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            一様または正規分布の乱数で出力配列を埋める 
            </summary>
            <param name="rng">cvRNGによって初期化されたRNGの状態</param>
            <param name="distType">分布のタイプ</param>
            <param name="param1">分布の第一パラメータ．一様分布では，発生する乱数の下限値（この値を含む）である． 正規分布では，乱数の平均値である．</param>
            <param name="param2">分布の第二パラメータ．一様分布では，発生する乱数の上限値（この値は含まない）である． 正規分布では，乱数の標準偏差である．</param>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String)">
            <summary>
            画像を指定したファイルに保存する．画像フォーマットは，filename の拡張子により決定される．
            この関数で保存できるのは，8 ビット 1チャンネル，あるいは 8 ビット3 チャンネル（'BGR' の順）画像だけである．
            </summary>
            <param name="filename">ファイル名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String,System.Int32[])">
            <summary>
            画像を指定したファイルに保存する．画像フォーマットは，filename の拡張子により決定される．
            この関数で保存できるのは，8 ビット 1チャンネル，あるいは 8 ビット3 チャンネル（'BGR' の順）画像だけである．
            </summary>
            <param name="fileName">ファイル名</param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.SaveImage(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            画像を指定したファイルに保存する．画像フォーマットは，filename の拡張子により決定される．
            この関数で保存できるのは，8 ビット 1チャンネル，あるいは 8 ビット3 チャンネル（'BGR' の順）画像だけである．
            </summary>
            <param name="fileName">ファイル名</param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ToBytes(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            cvEncodeImageにより、この画像をメモリ上に展開する
            </summary>
            <param name="ext">拡張子。.jpgや.pngなど。これによりエンコード形式が決定される。</param>
            <param name="encodingParams">JPEGの圧縮率などのエンコード設定</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvArr.ToStream(System.IO.Stream,System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            cvEncodeImageにより、この画像をメモリ上に展開する
            </summary>
            <param name="outStream">出力先ストリーム</param>
            <param name="ext">拡張子。.jpgや.pngなど。これによりエンコード形式が決定される。</param>
            <param name="encodingParams">JPEGの圧縮率などのエンコード設定</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvArr.Dims">
            <summary>
            配列の次元数を取得する 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemType">
            <summary>
            配列要素のタイプを取得する 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemChannels">
            <summary>
            配列要素のチャンネル数を取得する. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.ElemDepth">
            <summary>
            配列要素のビット深度を取得する. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32)">
            <summary>
            特定の配列要素を返す (cvGet/Set1D相当). 
            比較的低速なため、高速にアクセスしたい場合はこのメソッドではなくポインタを利用すること。
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す (cvGet/Set2D相当). 
            比較的低速なため、高速にアクセスしたい場合はこのメソッドではなくポインタを利用すること。
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
        </member>
        <member name="P:OpenCvSharp.CvArr.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す (cvGet/Set3D相当). 
            比較的低速なため、高速にアクセスしたい場合はこのメソッドではなくポインタを利用すること。
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.#ctor">
            <summary>
            既定の初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvTreeNode*</param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.Initialize(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="p">struct CvTreeNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvTreeNode`1.SizeOf">
            <summary>
            sizeof(CvTreeNode)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.InsertNodeIntoTree(OpenCvSharp.CvTreeNode{`0},OpenCvSharp.CvTreeNode{`0})">
            <summary>
            ツリーに新しいノードを追加する
            </summary>
            <param name="parent">ツリー内に既に存在している親ノード．</param>
            <param name="frame">トップレベルノード．parent と frame が同じである場合， nodeのv_prevフィールドには，parent ではなく，nullがセットされる．</param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.RemoveNodeFromTree(OpenCvSharp.CvTreeNode{`0})">
            <summary>
            ツリーからノードを削除する
            </summary>
            <param name="frame">トップレベルノード．node->v_prev = null かつ node->h_prev = null （つまり，node が frameの最初の子ノードである）である場合， 
            frame->v_next は node->h_next にセットされる (つまり，最初の子ノードかframeが変更される）．</param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNode`1.TreeToNodeSeq(System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            すべてのノードへのポインタを一つのシーケンスに集める
            </summary>
            <param name="headerSize">作成したシーケンスのヘッダサイズ（sizeof(CvSeq) が用いられることが多い）．</param>
            <param name="storage">シーケンスのためのコンテナ．</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.Flags">
            <summary>
            様々なフラグ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HeaderSize">
            <summary>
            シーケンスのヘッダサイズ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HPrev">
            <summary>
            一つ前のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.HNext">
            <summary>
            一つ後のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.VPrev">
            <summary>
            一つ前のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNode`1.VNext">
            <summary>
            一つ後のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTypeInfo">
            <summary>
            型情報
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.#ctor">
            <summary>
            メモリを確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr">struct CvTypeInfo*</param>
        </member>
        <member name="F:OpenCvSharp.CvTypeInfo.SizeOf">
            <summary>
            sizeof(CvTypeInfo) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTypeInfo.RegisterType">
            <summary>
            新しい型を登録する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.HeaderSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Prev">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.IsInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Release">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Read">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Write">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTypeInfo.Clone">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLSH">
            <summary>
            Locality Sensitive Hash (LSH) table
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSH.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSH.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.FromPtr(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Add(OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Add(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="data"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Query(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Query the LSH n times for at most k nearest points; data is n x d,
            indices and dist are n x k. At most emax stored points will be accessed. 
            </summary>
            <param name="queryPoints"></param>
            <param name="indices"></param>
            <param name="dist"></param>
            <param name="k"></param>
            <param name="emax"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Release">
            <summary>
            Free the given LSH structure.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSH.Remove(OpenCvSharp.CvMat)">
            <summary>
            Remove vectors from LSH, as addressed by given indices.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="P:OpenCvSharp.CvLSH.Size">
            <summary>
            Return the number of vectors in the LSH.
            </summary>
            <returns>number of vectors</returns>
        </member>
        <member name="T:OpenCvSharp.CvStarDetectorParams">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarDetectorParams.p">
            <summary>
            field data
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
            <param name="suppressNonmaxSize"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Equals(OpenCvSharp.CvStarDetectorParams)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.op_Equality(OpenCvSharp.CvStarDetectorParams,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.op_Inequality(OpenCvSharp.CvStarDetectorParams,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarDetectorParams.Clone">
            <summary>
            現在のインスタンスのコピーである新しいオブジェクトを作成します。    
            </summary>
            <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.MaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.ResponseThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.LineThresholdProjected">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.LineThresholdBinarized">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStarDetectorParams.SuppressNonmaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBGCodeBookModel">
            <summary>
            CvBGCodeBookModel
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookModel.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvBGCodeBookModel*</param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.#ctor">
            <summary>
            BGCodeBookModel 構造体の領域確保を行う
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookModel.SizeOf">
            <summary>
            sizeof(CvBGCodeBookModel) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.ClearStale(System.Int32,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="staleThresh"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Diff(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Diff(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookModel.Update(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.T">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.CbBounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.ModMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.ModMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.CbMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Storage">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookModel.Freelist">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBGCodeBookElem">
            <summary>
            CvBGCodeBookElem
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvObject">
            <summary>
            OpenCVのネイティブポインタをもったクラスの基本クラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObject.ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObject.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:OpenCvSharp.CvObject.CvPtr">
            <summary>
            OpenCVの構造体へのネイティブポインタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBGCodeBookElem.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">WCvBGCodeBookElem*</param>
        </member>
        <member name="F:OpenCvSharp.CvBGCodeBookElem.SizeOf">
            <summary>
            sizeof(CvBGCodeBookElem) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.TLastUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.Stale">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.BoxMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.BoxMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.LearnMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvBGCodeBookElem.LearnMax">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.LevMarqState">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLevMarq">
            <summary>
            CvLevMarq
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLevMarq.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLevMarq.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.#ctor(System.Int32,OpenCvSharp.CvSize,System.Int32)">
            <summary>
            
            </summary>
            <param name="modelPoints"></param>
            <param name="modelSize"></param>
            <param name="maxBasicSolutions"></param>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.RunKernel(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.Refine(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <param name="maxIters"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvModelEstimator2.SetSeed(System.Int64)">
            <summary>
            
            </summary>
            <param name="seed"></param>
        </member>
        <member name="T:OpenCvSharp.CvHomographyEstimator">
            <summary>
            CvLevMarq
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="modelPoints"></param>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.RunKernel(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHomographyEstimator.Refine(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="m1"></param>
            <param name="m2"></param>
            <param name="model"></param>
            <param name="maxIters"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvFaceTracker">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceTracker.NumFaceElements">
            <summary>
            CV_NUM_FACE_ELEMENTS
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceTracker.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.#ctor(OpenCvSharp.IplImage,OpenCvSharp.CvRect[])">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvBGCodeBookModel*</param>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFaceTracker.TrackFace(OpenCvSharp.IplImage,OpenCvSharp.CvRect[],OpenCvSharp.CvPoint@,System.Double@)">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <param name="ptRotate"></param>
            <param name="dbAngleRotate"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvLatentSvmDetector">
            <summary>
            structure contains the bounding box and confidence level for detected object 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLatentSvmDetector.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.#ctor(System.String)">
            <summary>
            load trained detector from a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.FromPtr(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvLSH*</param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,System.Single)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <param name="overlap_threshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLatentSvmDetector.DetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,System.Single,System.Int32)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <param name="overlap_threshold"></param>
            <param name="numThreads"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumComponents">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.NumPartFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.Filters">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.B">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLatentSvmDetector.ScoreThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFontQt">
            <summary>
            Qtフォント
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFont">
            <summary>
            フォント
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
            <param name="thickness">文字の太さ．</param>
        </member>
        <member name="M:OpenCvSharp.CvFont.#ctor(OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32,OpenCvSharp.LineType)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
            <param name="thickness">文字の太さ．</param>
            <param name="lineType">線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.CvFont.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvFont.SizeOf">
            <summary>
            sizeof(CvFont) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFont.GetTextSize(System.String)">
            <summary>
            文字列の幅と高さを取得する
            </summary>
            <param name="textString">入力文字列</param>
        </member>
        <member name="M:OpenCvSharp.CvFont.GetTextSize(System.String,System.Int32@)">
            <summary>
            文字列の幅と高さを取得する
            </summary>
            <param name="textString">入力文字列</param>
            <param name="baseline">文字の最下点から見たベースラインのy座標</param>
        </member>
        <member name="P:OpenCvSharp.CvFont.NameFont">
            <summary>
            ColorFont -> cvScalar(blue_component, green_component, red\_component[, alpha_component])
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Color">
            <summary>
            ColorFont -> cvScalar(blue_component, green_component, red\_component[, alpha_component])
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.FontFace">
            <summary>
            フォント名の識別子
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Ascii">
            <summary>
            font data and metrics
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Greek">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Cyrillic">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.HScale">
            <summary>
            幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.VScale">
            <summary>
            高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Shear">
            <summary>
            垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Thickness">
            <summary>
            文字の太さ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.Dx">
            <summary>
            horizontal interval between letters
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFont.LineType">
            <summary>
            線の種類
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
            <param name="style">処理フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.#ctor(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle,System.Int32)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
            <param name="style">処理フラグ</param>
            <param name="spacing">文字間のスペース．正負の値が利用できます．</param>
        </member>
        <member name="M:OpenCvSharp.CvFontQt.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="T:OpenCvSharp.Cv">
            <summary>
            OpenCvのcvXXX関数のラッパー。
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.AA">
            <summary>
            CV_AA
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.AUTOSTEP">
            <summary>
            CV_AUTOSTEP
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FILLED">
            <summary>
            CV_FILLED
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.LOG2">
            <summary>
            CV_LOG2
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.PI">
            <summary>
            CV_PI
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.WHOLE_SEQ_END_INDEX">
            <summary>
            CV_WHOLE_SEQ_END_INDEX
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FLOODFILL_FIXED_RANGE">
            <summary>
            セットされている場合は，現在のピクセルとシードピクセルとの差が対象となる．それ以外は，隣接同士の差が対象となる（つまりこのフラグがセットされない場合，レンジは変動的である）． 
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.FLOODFILL_MASK_ONLY">
            <summary>
            セットされている場合は，この関数では画像を塗りつぶさない（new_val は無視される）が， マスク（この場合，マスクはnull以外の値でないといけない）は塗りつぶす. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_MAX_DIM">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_FOURCC_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.Cv.CV_FOURCC_PROMPT">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.BackProjectPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            投影係数から元のベクトルを再構築する
            </summary>
            <param name="proj">入力データ．</param>
            <param name="avg">平均ベクトル．もし単一行ベクトルの場合，出力ベクトルがresultの行として保存されていることを意味する．そうでない場合は，単一列ベクトルであり，そのときはresultの列として保存される．</param>
            <param name="eigenvects">固有ベクトル（主成分）．一つの行が一つのベクトルを意味する．</param>
            <param name="result">出力である再構築されたベクトルの行列．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookClearStale(OpenCvSharp.CvBGCodeBookModel,System.Int32,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="staleThresh"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookDiff(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookDiff(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="fgmask"></param>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="roi"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BGCodeBookUpdate(OpenCvSharp.CvBGCodeBookModel,OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="image"></param>
            <param name="roi"></param>
            <param name="mask"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(OpenCvSharp.CvArr)">
            <summary>
            2次元点列を包含するまっすぐな矩形を返す．
            </summary>
            <param name="points">シーケンス（CvSeq, CvContour）か，点のベクトル（CvMat）か，非0のピクセルが点列とみなされる8ビット1チャンネルマスク画像 （CvMat, IplImage）のいずれかで表現された2次元の点列．</param>
            <returns>矩形</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            2次元点列を包含するまっすぐな矩形を返す．
            </summary>
            <param name="points">シーケンス（CvSeq, CvContour）か，点のベクトル（CvMat）か，非0のピクセルが点列とみなされる8ビット1チャンネルマスク画像 （CvMat, IplImage）のいずれかで表現された2次元の点列．</param>
            <param name="update">更新フラグ. 
            pointsがCvContour で，update=falseの場合： 包含矩形は計算されず，輪郭ヘッダのrectフィールドから読み込まれる． 
            pointsがCvContour で，update=trueの場合： 包含矩形は計算され，輪郭ヘッダのrectフィールドに書き込まれる． 
            pointsがCvSeqかCvMatの場合： updateは無視されて，包含矩形は計算されて返される． </param>
            <returns>矩形</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoundingRect(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint})">
            <summary>
            2次元点列を包含するまっすぐな矩形を返す．
            </summary>
            <param name="points">CvPointの列挙子(CvPoint[], List&lt;CvPoint&gt;など). 内部でCvSeqに変換される.</param>
            <returns>矩形</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.BoxPoints(OpenCvSharp.CvBox2D,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            箱の頂点を見つける
            </summary>
            <param name="box">箱</param>
            <param name="pt">頂点の配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcAffineFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,System.Single[]@,System.Int32,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,System.Single[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
            Modification of a previous sparse optical flow algorithm to calculate affine flow
            </summary>
            <param name="prev"></param>
            <param name="curr"></param>
            <param name="prevPyr"></param>
            <param name="currPyr"></param>
            <param name="prevFeatures"></param>
            <param name="currFeatures"></param>
            <param name="matrices"></param>
            <param name="count"></param>
            <param name="winSize"></param>
            <param name="level"></param>
            <param name="status"></param>
            <param name="trackError"></param>
            <param name="criteria"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            1つの配列のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="hist">ヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            1つの配列のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr,OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            1つの配列のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram)">
            <summary>
            配列群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            配列群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrHist(OpenCvSharp.CvArr[],OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            配列群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProject(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            バックプロジェクションの計算を行う
            </summary>
            <param name="image">入力画像群</param>
            <param name="backProject">出力のバックプロジェクション画像．入力画像群と同じタイプ．</param>
            <param name="hist">ヒストグラム</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProject(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvHistogram)">
            <summary>
            バックプロジェクションの計算を行う
            </summary>
            <param name="image">入力画像群</param>
            <param name="backProject">出力のバックプロジェクション画像．入力画像群と同じタイプ．</param>
            <param name="hist">ヒストグラム</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="hist">テンプレートのヒストグラム</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="hist">テンプレートのヒストグラム</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <param name="factor">ヒストグラムの正規化係数．出力画像の正規化スケールに影響する．値に確信がない場合は，１にする．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProjectPatch(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="hist">テンプレートのヒストグラム</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBackProjectPatch(OpenCvSharp.IplImage[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="hist">テンプレートのヒストグラム</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <param name="factor">ヒストグラムの正規化係数．出力画像の正規化スケールに影響する．値に確信がない場合は，１にする．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcBayesianProb(OpenCvSharp.CvHistogram[],OpenCvSharp.CvHistogram[])">
            <summary>
            Calculates bayesian probabilistic histograms
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrix(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CovarMatrixFlag)">
            <summary>
            ベクトル集合の共変動行列を計算する
            </summary>
            <param name="vects">入力ベクトル．これらはすべて同じタイプで同じサイズでなくてはならない．</param>
            <param name="covMat">浮動小数点型の正方な出力共変動行列</param>
            <param name="avg">入力または出力配列（フラグに依存する） - 入力ベクトルの平均ベクトル</param>
            <param name="flags">操作フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrixEx(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.Int32,System.Byte[],System.IntPtr,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の正規直交基底と平均オブジェクトを計算する
            </summary>
            <param name="objectCount">入力オブジェクトの個数.</param>
            <param name="input">読み込みコールバック関数へのポインタ.</param>
            <param name="ioFlags">入出力フラグ.</param>
            <param name="iobufSize">入出力バッファサイズ.</param>
            <param name="buffer">入出力バッファへのポインタ.</param>
            <param name="userdata">コールバック関数に必要なすべてのデータを含む構造体へのポインタ.</param>
            <param name="avg">平均オブジェクト.</param>
            <param name="covarMatrix">共分散行列. 出力パラメータであるので, 関数が呼ばれる前に確保されてなければならない.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcCovarMatrixEx(OpenCvSharp.IplImage[],OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の正規直交基底と平均オブジェクトを計算する (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="input">IplImage 型の入力オブジェクトの配列</param>
            <param name="avg">平均オブジェクト.</param>
            <param name="covarMatrix">共分散行列. 出力パラメータであるので, 関数が呼ばれる前に確保されてなければならない.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcDecompCoeff(OpenCvSharp.IplImage,OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            入力オブジェクトの分解係数を計算する
            </summary>
            <param name="obj">入力オブジェクト</param>
            <param name="eigObj">固有オブジェクト</param>
            <param name="avg">平均オブジェクト</param>
            <returns>分解系数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(OpenCvSharp.IplImage[],OpenCvSharp.IplImage[],System.Int32,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の共分散行列を計算する (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="input">IplImage 型の入力オブジェクトの配列</param>
            <param name="output">固有オブジェクトの配列</param>
            <param name="ioBufSize">バイト単位で表される入出力バッファサイズ．サイズが分からない場合は，0 にする．</param>
            <param name="calcLimit">固有オブジェクトの計算を終了するための終了条件．</param>
            <param name="avg">平均オブジェクト．</param>
            <param name="eigVals">降順に並んだ固有値配列へのポインタ；null の場合もある．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.IplImage[],OpenCvSharp.CvCallback,System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の共分散行列を計算する (ioFlags = CV_EIGOBJ_OUTPUT_CALLBACK)
            </summary>
            <param name="nObjects">入力オブジェクトの個数</param>
            <param name="input">IplImage 型の入力オブジェクトの配列</param>
            <param name="output">書き出しコールバック関数へのポインタ</param>
            <param name="ioBufSize">バイト単位で表される入出力バッファサイズ．サイズが分からない場合は，0 にする．</param>
            <param name="userData">コールバック関数に必要なすべてのデータを含む構造体へのポインタ．</param>
            <param name="calcLimit">固有オブジェクトの計算を終了するための終了条件．</param>
            <param name="avg">平均オブジェクト．</param>
            <param name="eigVals">降順に並んだ固有値配列へのポインタ；null の場合もある．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.IplImage[],System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の共分散行列を計算する (ioFlags = CV_EIGOBJ_INPUT_CALLBACK)
            </summary>
            <param name="nObjects">入力オブジェクトの個数</param>
            <param name="input">読み込みコールバック関数へのポインタ</param>
            <param name="output">固有オブジェクトの配列</param>
            <param name="ioBufSize">バイト単位で表される入出力バッファサイズ．サイズが分からない場合は，0 にする．</param>
            <param name="userData">コールバック関数に必要なすべてのデータを含む構造体へのポインタ．</param>
            <param name="calcLimit">固有オブジェクトの計算を終了するための終了条件．</param>
            <param name="avg">平均オブジェクト．</param>
            <param name="eigVals">降順に並んだ固有値配列へのポインタ；null の場合もある．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEigenObjects(System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.Int32,System.IntPtr,OpenCvSharp.CvTermCriteria,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクト集合の共分散行列を計算する
            </summary>
            <param name="nObjects">入力オブジェクトの個数</param>
            <param name="input">読み込みコールバック関数へのポインタ</param>
            <param name="output">書き出しコールバック関数へのポインタ</param>
            <param name="ioFlags">入出力フラグ</param>
            <param name="ioBufSize">バイト単位で表される入出力バッファサイズ．サイズが分からない場合は，0 にする．</param>
            <param name="userData">コールバック関数に必要なすべてのデータを含む構造体へのポインタ．</param>
            <param name="calcLimit">固有オブジェクトの計算を終了するための終了条件．</param>
            <param name="avg">平均オブジェクト．</param>
            <param name="eigVals">降順に並んだ固有値配列へのポインタ；null の場合もある．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            2つの重み付き点分布間の "最小コスト（minimal work）" 距離を計算する．
            </summary>
            <param name="signature1">1番目のシグネチャ（点分布），size1×dims+1の浮動小数点型行列．各行は，重みの後に座標を保存する．ユーザ定義のコスト行列を用いる場合は，1列の行列（重みだけ）でも構わない．</param>
            <param name="signature2">2番目のシグネチャ（点分布）（signature1と同じフォーマット）．行数や重みの合計が異なることもあるが，この場合は余分の"dummy" 点が signature1 か signature2 のどちらかに追加される．</param>
            <param name="distanceType">用いる評価指標.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction)">
            <summary>
            2つの重み付き点分布間の "最小コスト（minimal work）" 距離を計算する．
            </summary>
            <param name="signature1">1番目のシグネチャ（点分布），size1×dims+1の浮動小数点型行列．各行は，重みの後に座標を保存する．ユーザ定義のコスト行列を用いる場合は，1列の行列（重みだけ）でも構わない．</param>
            <param name="signature2">2番目のシグネチャ（点分布）（signature1と同じフォーマット）．行数や重みの合計が異なることもあるが，この場合は余分の"dummy" 点が signature1 か signature2 のどちらかに追加される．</param>
            <param name="distanceType">用いる評価指標.</param>
            <param name="distanceFunc">ユーザ定義距離関数．2点の座標を与えると，その点間の距離を返す．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr)">
            <summary>
            2つの重み付き点分布間の "最小コスト（minimal work）" 距離を計算する．
            </summary>
            <param name="signature1">1番目のシグネチャ（点分布），size1×dims+1の浮動小数点型行列．各行は，重みの後に座標を保存する．ユーザ定義のコスト行列を用いる場合は，1列の行列（重みだけ）でも構わない．</param>
            <param name="signature2">2番目のシグネチャ（点分布）（signature1と同じフォーマット）．行数や重みの合計が異なることもあるが，この場合は余分の"dummy" 点が signature1 か signature2 のどちらかに追加される．</param>
            <param name="distanceType">用いる評価指標.</param>
            <param name="distanceFunc">ユーザ定義距離関数．2点の座標を与えると，その点間の距離を返す．</param>
            <param name="costMatrix">ユーザ定義の size1×size2のコスト行列．少なくとも，cost_matrix と distance_func のいずれか一つは NULL でなければならない．コスト行列を用いる場合は，下限値（下記参照）の計算は距離定義関数を必要とするため不可能である．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            2つの重み付き点分布間の "最小コスト（minimal work）" 距離を計算する．
            </summary>
            <param name="signature1">1番目のシグネチャ（点分布），size1×dims+1の浮動小数点型行列．各行は，重みの後に座標を保存する．ユーザ定義のコスト行列を用いる場合は，1列の行列（重みだけ）でも構わない．</param>
            <param name="signature2">2番目のシグネチャ（点分布）（signature1と同じフォーマット）．行数や重みの合計が異なることもあるが，この場合は余分の"dummy" 点が signature1 か signature2 のどちらかに追加される．</param>
            <param name="distanceType">用いる評価指標.</param>
            <param name="distanceFunc">ユーザ定義距離関数．2点の座標を与えると，その点間の距離を返す．</param>
            <param name="costMatrix">ユーザ定義の size1×size2のコスト行列．少なくとも，cost_matrix と distance_func のいずれか一つは NULL でなければならない．コスト行列を用いる場合は，下限値（下記参照）の計算は距離定義関数を必要とするため不可能である．</param>
            <param name="flow">結果の size1×size2のフロー行列(flow matrix)． flow_ij はsignature1のi番目の点からsignature2のj番目の点へのフローを示す．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcEMD2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,OpenCvSharp.CvDistanceFunction,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Single@)">
            <summary>
            2つの重み付き点分布間の "最小コスト（minimal work）" 距離を計算する．
            </summary>
            <param name="signature1">1番目のシグネチャ（点分布），size1×dims+1の浮動小数点型行列．各行は，重みの後に座標を保存する．ユーザ定義のコスト行列を用いる場合は，1列の行列（重みだけ）でも構わない．</param>
            <param name="signature2">2番目のシグネチャ（点分布）（signature1と同じフォーマット）．行数や重みの合計が異なることもあるが，この場合は余分の"dummy" 点が signature1 か signature2 のどちらかに追加される．</param>
            <param name="distanceType">用いる評価指標.</param>
            <param name="distanceFunc">ユーザ定義距離関数．2点の座標を与えると，その点間の距離を返す．</param>
            <param name="costMatrix">ユーザ定義の size1×size2のコスト行列．少なくとも，cost_matrix と distance_func のいずれか一つは NULL でなければならない．コスト行列を用いる場合は，下限値（下記参照）の計算は距離定義関数を必要とするため不可能である．</param>
            <param name="flow">結果の size1×size2のフロー行列(flow matrix)． flow_ij はsignature1のi番目の点からsignature2のj番目の点へのフローを示す．</param>
            <param name="lowerBound">オプションの入出力パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcGlobalOrientation(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            選択された複数の領域の全体的なモーション方向を計算する
            </summary>
            <param name="orientation">モーション勾配方向画像．関数 cvCalcMotionGradient によって計算されている． </param>
            <param name="mask">マスク画像．cvCalcMotionGradient によって得られる有効な勾配マスクと，方向を計算する必要がある領域を示すマスクの共通部分．</param>
            <param name="mhi">モーション履歴画像．</param>
            <param name="timestamp">ミリ秒単位，あるいはその他の単位で表される現在時間．cvUpdateMotionHistory の呼び出し時に引数として渡した時間を保存しておいて，ここでその値を再利用する方が良い．なぜなら大きな画像に対して cvUpdateMotionHistory と cvCalcMotionGradient を行った場合，長い処理時間を要することがあるためである． </param>
            <param name="duration">timestamp と同じ時間単位で表される，モーション軌跡の最大保持時間．cvUpdateMotionHistory での引数と同じ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcImageHomography(System.Single[],OpenCvSharp.CvPoint3D32f,System.Single[0:,0:],System.Single[0:,0:]@)">
            <summary>
            
            </summary>
            <param name="line"></param>
            <param name="center"></param>
            <param name="intrinsic"></param>
            <param name="homography"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram)">
            <summary>
            1つの画像のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
            <param name="hist">ヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            1つの画像のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage,OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            1つの画像のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram)">
            <summary>
            画像群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram,System.Boolean)">
            <summary>
            画像群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcHist(OpenCvSharp.IplImage[],OpenCvSharp.CvHistogram,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            画像群のヒストグラムを計算する.
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMatMulDeriv(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes d(AB)/dA and d(AB)/dB
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="dABdA"></param>
            <param name="dABdB"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMotionGradient(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            モーション履歴画像の勾配方向を計算する
            </summary>
            <param name="mhi">モーション履歴画像． </param>
            <param name="mask">マスク画像．モーション勾配方向として有効なピクセルがマーキングされているマスク．出力パラメータ．</param>
            <param name="orientation">モーション勾配方向画像．値は0~360°の角度値． </param>
            <param name="delta1">この関数は，各ピクセル (x,y) の近傍における 最小 (m(x,y)) および 最大 (M(x,y))の mhi 値を見つけ，次の条件を満たす場合にのみ，その勾配が有効であると仮定する．min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="delta2">この関数は，各ピクセル (x,y) の近傍における 最小 (m(x,y)) および 最大 (M(x,y))の mhi 値を見つけ，次の条件を満たす場合にのみ，その勾配が有効であると仮定する．min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcMotionGradient(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            モーション履歴画像の勾配方向を計算する
            </summary>
            <param name="mhi">モーション履歴画像． </param>
            <param name="mask">マスク画像．モーション勾配方向として有効なピクセルがマーキングされているマスク．出力パラメータ．</param>
            <param name="orientation">モーション勾配方向画像．値は0~360°の角度値．</param>
            <param name="delta1">この関数は，各ピクセル (x,y) の近傍における 最小 (m(x,y)) および 最大 (M(x,y))の mhi 値を見つけ，次の条件を満たす場合にのみ，その勾配が有効であると仮定する．min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="delta2">この関数は，各ピクセル (x,y) の近傍における 最小 (m(x,y)) および 最大 (M(x,y))の mhi 値を見つけ，次の条件を満たす場合にのみ，その勾配が有効であると仮定する．min(delta1,delta2) &lt;= M(x,y)-m(x,y) &lt;= max(delta1,delta2).</param>
            <param name="apertureSize">この関数で用いられるいられる微分オペレータのアパーチャサイズ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowBM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvSize,System.Boolean,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            重なり合ったblock_size.Width x block_size.Heightピクセルのブロック毎にオプティカルフローを計算する
            </summary>
            <param name="prev">1番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="curr">2番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="blockSize">比較対象となる基本ブロックのサイズ． </param>
            <param name="shiftSize">ブロック座標の増加量． </param>
            <param name="maxRange">走査対象となるブロックの近傍領域．ピクセル単位．</param>
            <param name="usePrevious">trueの場合、前の（入力）速度場を用いる． </param>
            <param name="velx">次ののオプティカルフローの水平成分. ceil(prev->width/block_size.width)×ceil(prev->height/block_size.height) のサイズ， 32 ビット浮動小数点型，シングルチャンネル. </param>
            <param name="vely">velx と同一サイズ，32 ビット浮動小数点型，シングルチャンネルのオプティカルフローの垂直成分．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowFarneback(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,OpenCvSharp.LKFlowFlag)">
            <summary>
            Estimate optical flow for each pixel using the two-frame G. Farneback algorithm
            </summary>
            <param name="prev"></param>
            <param name="next"></param>
            <param name="flow"></param>
            <param name="pyrScale"></param>
            <param name="levels"></param>
            <param name="winsize"></param>
            <param name="iterations"></param>
            <param name="polyN"></param>
            <param name="polySigma"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowHS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvTermCriteria)">
            <summary>
            Horn &amp; Schunck アルゴリズムを用いて，1番目の入力画像の全ピクセルに対するフローを，2番目の画像を参照して計算する．
            </summary>
            <param name="prev">1番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="curr">2番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="usePrevious">trueの場合、前の（入力）速度場を用いる．</param>
            <param name="velx">入力画像と同じサイズのオプティカルフローの水平成分，32 ビット浮動小数点型，シングルチャンネル．</param>
            <param name="vely">入力画像と同じサイズのオプティカルフローの垂直成分，32 ビット浮動小数点型，シングルチャンネル．</param>
            <param name="lambda">ラグランジュ乗数</param>
            <param name="criteria">速度計算の終了条件</param>	
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Lucas &amp; Kanade アルゴリズムを用いて，1番目の入力画像の全ピクセルに対するフローを，2番目の画像を参照して計算する．
            </summary>
            <param name="prev">1番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="curr">2番目の画像，8 ビット，シングルチャンネル．</param>
            <param name="winSize">ピクセルをグループ化するために用いられる平均化ウィンドウのサイズ</param>
            <param name="velx">入力画像と同じサイズのオプティカルフローの水平成分，32 ビット浮動小数点型，シングルチャンネル．</param>
            <param name="vely">入力画像と同じサイズのオプティカルフローの垂直成分，32 ビット浮動小数点型，シングルチャンネル．</param>	
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
             Lucas-Kanade オプティカルフローの， ピラミッドを用いて疎な特徴に対応した反復バージョン（[Bouguet00]）の実装である．
            前フレームにおける特徴点の座標が与えられた場合に，現在のフレームにおける特徴点の座標が計算される．座標はサブピクセル精度で検出される． 
            </summary>
            <param name="prev">1番目のフレーム（時間 t）</param>
            <param name="curr">2番目のフレーム（時間 t + dt）</param>
            <param name="prevPyr">最初の画像に対するピラミッドのバッファ．これが NULL でない場合は，このバッファは，レベル 1 からレベル#level までのピラミッドを格納するのに十分なサイズでなければならない． (image_width+8)*image_height/3 バイトの合計が十分なサイズとなる．</param>
            <param name="currPyr">prev_pyr と同様に，2番目のフレームに対して用いられる</param>
            <param name="prevFeatures">フローを検出するのに必要な点の配列</param>
            <param name="currFeatures">2次元の点の配列．2番目の画像（フレーム）中の入力特徴の新たな位置が計算され，ここに格納される</param>
            <param name="winSize">各ピラミッドレベルでの探索ウィンドウのサイズ</param>
            <param name="level">ピラミッドレベルの最大値．0 の場合はピラミッドは用いられない（シングルレベル）．1 の場合はレベル 2 となる．</param>
            <param name="status">配列．特徴に対応するフローが見つかった場合に，配列の各要素 が 1 にセットされる．そうでない場合は0 になる．</param>	
            <param name="criteria">各ピラミッドの各点に対するフローを検出する繰り返し計算の終了条件</param>
            <param name="flags">雑多なフラグ</param>	
        </member>
        <member name="M:OpenCvSharp.Cv.CalcOpticalFlowPyrLK(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.CvSize,System.Int32,System.SByte[]@,System.Single[]@,OpenCvSharp.CvTermCriteria,OpenCvSharp.LKFlowFlag)">
            <summary>
             Lucas-Kanade オプティカルフローの， ピラミッドを用いて疎な特徴に対応した反復バージョン（[Bouguet00]）の実装である．
            前フレームにおける特徴点の座標が与えられた場合に，現在のフレームにおける特徴点の座標が計算される．座標はサブピクセル精度で検出される． 
            </summary>
            <param name="prev">1番目のフレーム（時間 t）</param>
            <param name="curr">2番目のフレーム（時間 t + dt）</param>
            <param name="prevPyr">最初の画像に対するピラミッドのバッファ．これが NULL でない場合は，このバッファは，レベル 1 からレベル#level までのピラミッドを格納するのに十分なサイズでなければならない． (image_width+8)*image_height/3 バイトの合計が十分なサイズとなる．</param>
            <param name="currPyr">prev_pyr と同様に，2番目のフレームに対して用いられる</param>
            <param name="prevFeatures">フローを検出するのに必要な点の配列</param>
            <param name="currFeatures">2次元の点の配列．2番目の画像（フレーム）中の入力特徴の新たな位置が計算され，ここに格納される</param>
            <param name="winSize">各ピラミッドレベルでの探索ウィンドウのサイズ</param>
            <param name="level">ピラミッドレベルの最大値．0 の場合はピラミッドは用いられない（シングルレベル）．1 の場合はレベル 2 となる．</param>
            <param name="status">配列．特徴に対応するフローが見つかった場合に，配列の各要素 が 1 にセットされる．そうでない場合は0 になる．</param>	
            <param name="trackError">移動前の点と移動後の点の周辺領域の差（誤差）を含む倍精度型の配列．オプションパラメータ（NULL も取りうる）．</param>	
            <param name="criteria">各ピラミッドの各点に対するフローを検出する繰り返し計算の終了条件</param>
            <param name="flags">雑多なフラグ</param>	
        </member>
        <member name="M:OpenCvSharp.Cv.CalcPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.PCAFlag)">
            <summary>
            ベクトル集合の主成分分析を行う
            </summary>
            <param name="data">入力データ．それぞれのベクトルは単一行（CV_PCA_DATA_AS_ROW）か，単一列（CV_PCA_DATA_AS_COL）である．</param>
            <param name="avg">平均ベクトル．関数内で計算されるか，ユーザによって与えられる． </param>
            <param name="eigenvalues">出力である共変動行列の固有値．</param>
            <param name="eigenvectors">出力である共変動行列の固有ベクトル（つまり，主成分）．一つの行が一つのベクトルを意味する．</param>
            <param name="flags">操作フラグ.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcPGH(OpenCvSharp.CvSeq,OpenCvSharp.CvHistogram)">
            <summary>
            輪郭の pair-wise geometrical histogram を求める
            </summary>
            <param name="contour">入力輪郭．現在のところ座標が整数値の点のみが利用可能.</param>
            <param name="hist">求められたヒストグラム．必ず2次元になる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram)">
            <summary>
            一つのヒストグラムをもう一方のヒストグラムで割る
            </summary>
            <param name="hist1">一番目のヒストグラム（除数）</param>
            <param name="hist2">二番目のヒストグラム</param>
            <param name="dstHist">出力ヒストグラム</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            一つのヒストグラムをもう一方のヒストグラムで割る
            </summary>
            <param name="hist1">一番目のヒストグラム（除数）</param>
            <param name="hist2">二番目のヒストグラム</param>
            <param name="dstHist">出力ヒストグラム</param>
            <param name="scale">出力ヒストグラムのスケール係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalcSubdivVoronoi2D(OpenCvSharp.CvSubdiv2D)">
            <summary>
            仮想点の座標を計算する．元の細分割面のある頂点に対応する仮想点全てを接続すると，その頂点を含むボロノイ領域の境界を構成する． 
            </summary>
            <param name="subdiv">ドロネー細分割．全ての点は追加済みである</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            内部パラメータと各画像に対する 外部パラメータを推定する．
            </summary>
            <param name="objectPoints">オブジェクト（キャリブレーションパターン）上の点群座標の結合行列．3xN または Nx3の配列．Nはすべてのビューでの点の数の合計である.</param>
            <param name="imagePoints">対応する画像上の点群座標の結合行列． 2xN またはNx2 の配列．Nはすべてのビューでの点の数の合計である．</param>
            <param name="pointCounts">それぞれのビューに含まれる点の数を表すベクトル．サ イズは 1xM または Mx1 でMはビューの数．1xM or Mx1</param>
            <param name="imageSize">画像サイズ．内部カメラ行列の初期化のみに用いられる.</param>
            <param name="intrinsicMatrix">出力されるカメラ行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. CV_CALIB_USE_INTRINSIC_GUESS  や CV_CALIB_FIX_ASPECT_RATION が指定され た場合，fx, fy, cx, cyのパラメータのうち いくつか，またはすべてを初期化する必要がある．</param>
            <param name="distortionCoeffs">出力される1x4のひずみ係数ベクトル [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            内部パラメータと各画像に対する 外部パラメータを推定する．
            </summary>
            <param name="objectPoints">オブジェクト（キャリブレーションパターン）上の点群座標の結合行列．3xN または Nx3の配列．Nはすべてのビューでの点の数の合計である.</param>
            <param name="imagePoints">対応する画像上の点群座標の結合行列． 2xN またはNx2 の配列．Nはすべてのビューでの点の数の合計である．</param>
            <param name="pointCounts">それぞれのビューに含まれる点の数を表すベクトル．サ イズは 1xM または Mx1 でMはビューの数．1xM or Mx1</param>
            <param name="imageSize">画像サイズ．内部カメラ行列の初期化のみに用いられる.</param>
            <param name="intrinsicMatrix">出力されるカメラ行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. CV_CALIB_USE_INTRINSIC_GUESS  や CV_CALIB_FIX_ASPECT_RATION が指定され た場合，fx, fy, cx, cyのパラメータのうち いくつか，またはすべてを初期化する必要がある．</param>
            <param name="distortionCoeffs">出力される1x4のひずみ係数ベクトル [k1, k2, p1, p2]. </param>
            <param name="rotationVectors">出力される3xMの回転ベクトルの配列 (コンパクトな回転行列の表記についてはcvRodrigues2を参照)．</param>
            <param name="translationVectors">出力される3xMの並進ベクトルの配列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrateCamera2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CalibrationFlag)">
            <summary>
            内部パラメータと各画像に対する 外部パラメータを推定する．
            </summary>
            <param name="objectPoints">オブジェクト（キャリブレーションパターン）上の点群座標の結合行列．3xN または Nx3の配列．Nはすべてのビューでの点の数の合計である.</param>
            <param name="imagePoints">対応する画像上の点群座標の結合行列． 2xN またはNx2 の配列．Nはすべてのビューでの点の数の合計である．</param>
            <param name="pointCounts">それぞれのビューに含まれる点の数を表すベクトル．サ イズは 1xM または Mx1 でMはビューの数．1xM or Mx1</param>
            <param name="imageSize">画像サイズ．内部カメラ行列の初期化のみに用いられる.</param>
            <param name="intrinsicMatrix">出力されるカメラ行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. CV_CALIB_USE_INTRINSIC_GUESS  や CV_CALIB_FIX_ASPECT_RATION が指定され た場合，fx, fy, cx, cyのパラメータのうち いくつか，またはすべてを初期化する必要がある．</param>
            <param name="distortionCoeffs">出力される1x4のひずみ係数ベクトル [k1, k2, p1, p2]. </param>
            <param name="rotationVectors">出力される3xMの回転ベクトルの配列 (コンパクトな回転行列の表記についてはcvRodrigues2を参照)．</param>
            <param name="translationVectors">出力される3xMの並進ベクトルの配列．</param>
            <param name="flags">処理フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
            <param name="principalPoint">主点（光学中心）実際の長さ単位.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CalibrationMatrixValues(OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="cameraMatrix">内部パラメータ行列（例えば cvCalibrateCamera2 によって求められたもの）． </param>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
            <param name="principalPoint">主点（光学中心）実際の長さ単位.</param>
            <param name="pixelAspectRatio">ピクセルのアスペクト比 fy/fx</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria)">
            <summary>
            オブジェクト中心，サイズおよび姿勢を求める
            </summary>
            <param name="probImage">オブジェクトヒストグラムのバックプロジェクション</param>
            <param name="window">初期探索ウィンドウ</param>
            <param name="criteria">ウィンドウ探索を終了するための条件． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp@)">
            <summary>
            オブジェクト中心，サイズおよび姿勢を求める
            </summary>
            <param name="probImage">オブジェクトヒストグラムのバックプロジェクション</param>
            <param name="window">初期探索ウィンドウ</param>
            <param name="criteria">ウィンドウ探索を終了するための条件． </param>
            <param name="comp">結果として得られる構造体．収束した探索ウィンドウの座標（comp->rect フィールド），およびウィンドウ内の全ピクセルの合計値（comp->area フィールド）が含まれる． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CamShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp@,OpenCvSharp.CvBox2D@)">
            <summary>
            オブジェクト中心，サイズおよび姿勢を求める
            </summary>
            <param name="probImage">オブジェクトヒストグラムのバックプロジェクション</param>
            <param name="window">初期探索ウィンドウ</param>
            <param name="criteria">ウィンドウ探索を終了するための条件． </param>
            <param name="comp">結果として得られる構造体．収束した探索ウィンドウの座標（comp->rect フィールド），およびウィンドウ内の全ピクセルの合計値（comp->area フィールド）が含まれる． </param>
            <param name="box">オブジェクトの外接矩形．NULLでない場合，オブジェクトのサイズと姿勢が含まれる． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Canny(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            Cannyアルゴリズムを使用して，入力画像 imageに含まれているエッジを検出し，それを出力画像 edges に保存する [aperture_size=3]． 
            threshold1 と threshold2 のうち小さいほうがエッジ同士を接続するために用いられ，大きいほうが強いエッジの初期検出に用いられる． 
            </summary>
            <param name="image">入力画像</param>
            <param name="edges">この関数によって得られたエッジ画像</param>
            <param name="threshold1">１番目の閾値</param>
            <param name="threshold2">２番目の閾値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Canny(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ApertureSize)">
            <summary>
            Cannyアルゴリズムを使用して，入力画像 imageに含まれているエッジを検出し，それを出力画像 edges に保存する． 
            threshold1 と threshold2 のうち小さいほうがエッジ同士を接続するために用いられ，大きいほうが強いエッジの初期検出に用いられる． 
            </summary>
            <param name="image">入力画像</param>
            <param name="edges">この関数によって得られたエッジ画像</param>
            <param name="threshold1">１番目の閾値</param>
            <param name="threshold2">２番目の閾値</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            2次元ベクトルの角度と大きさを計算する
            </summary>
            <param name="x">x座標の配列．</param>
            <param name="y">y座標の配列．</param>
            <param name="magnitude">大きさの出力配列．必要でなければnullがセットされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            2次元ベクトルの角度と大きさを計算する
            </summary>
            <param name="x">x座標の配列．</param>
            <param name="y">y座標の配列．</param>
            <param name="magnitude">大きさの出力配列．必要でなければnullがセットされる．</param>
            <param name="angle">角度の出力配列．必要でなければnullがセットされる．角度はラジアン（0..2π），または度（0..360°）で測定される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CartToPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.AngleUnit)">
            <summary>
            2次元ベクトルの角度と大きさを計算する
            </summary>
            <param name="x">x座標の配列．</param>
            <param name="y">y座標の配列．</param>
            <param name="magnitude">大きさの出力配列．必要でなければnullがセットされる．</param>
            <param name="angle">角度の出力配列．必要でなければnullがセットされる．角度はラジアン（0..2π），または度（0..360°）で測定される．</param>
            <param name="unit">角度を表すためにラジアン（デフォルト値），または度のどちらを用いるかを示すフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Cbrt(System.Single)">
            <summary>
            数の立方根を計算する．
            これは，通常，pow(value,1./3)を計算するよりも高速である．一方，負の引数も正しく処理される．
            また，特別な値（±Inf, NaN）は扱うことができない． 
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ceil(System.Double)">
            <summary>
            引数より小さくない最小の整数値を返す.
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns>引数より小さくない最小の整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする 
            </summary>
            <param name="arr">チェック対象の配列</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする 
            </summary>
            <param name="arr">チェック対象の配列</param>
            <param name="flags">処理フラグ</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArr(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする
            </summary>
            <param name="arr">チェック対象の配列</param>
            <param name="flags">処理フラグ</param>
            <param name="minVal">有効な値域の下限値(この値以上)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <param name="maxVal">有効な値域の上限値(この値未満)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス.
            </summary>
            <param name="arr">チェック対象の配列</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス. 
            </summary>
            <param name="arr">チェック対象の配列</param>
            <param name="flags">処理フラグ</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckArray(OpenCvSharp.CvArr,OpenCvSharp.CheckArrFlag,System.Double,System.Double)">
            <summary>
            入力配列のすべての要素について，無効な値が存在しないかをチェックする. CheckArrのエイリアス. 
            </summary>
            <param name="arr">チェック対象の配列</param>
            <param name="flags">処理フラグ</param>
            <param name="minVal">有効な値域の下限値(この値以上)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <param name="maxVal">有効な値域の上限値(この値未満)．CheckArrFlag.Range がセットされているときのみ有効．</param>
            <returns>チェックが正しく終わればtrue</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckChessboard(OpenCvSharp.IplImage,OpenCvSharp.CvSize)">
            <summary>
            チェスボードが画像中にあるかどうかを高速に判定する。
            チェスボードが無い画像でcvFindChessboardCornersが遅くなる問題への対処として利用できる。
            </summary>
            <param name="src">入力画像</param>
            <param name="size">チェスボードのサイズ</param>
            <returns>1のときは、チェスボードが画像中に存在し、cvFindChessboardCornersを呼び出せる。
            0のときはチェスボードが存在しない。-1はエラーを示す。</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckContourConvexity(OpenCvSharp.CvArr)">
            <summary>
            輪郭が凸であるかを調べる
            </summary>
            <param name="contour">テストする輪郭（点列のシーケンスか配列）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CheckTermCriteria(OpenCvSharp.CvTermCriteria,System.Double,System.Int32)">
            <summary>
            終了条件をチェックし，type= Iteration|Epsilon に設定し，反復数の max_iterとeprilon の両方が有効になるように変換する
            </summary>
            <param name="criteria"></param>
            <param name="defaultEps"></param>
            <param name="defaultMaxIters"></param>
            <returns>変換結果</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Circle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="centerX">円の中心のx座標</param>
            <param name="centerY">円の中心のy座標</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            円を描画する
            </summary>
            <param name="img">画像</param>
            <param name="center">円の中心</param>
            <param name="radius">円の半径</param>
            <param name="color">円の色</param>
            <param name="thickness">線の幅．負の値を指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">中心座標と半径の小数点以下の桁を表すビット数.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearGraph(OpenCvSharp.CvGraph)">
            <summary>
            グラフから全ての頂点と辺を削除する
            </summary>
            <param name="graph">グラフ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearHist(OpenCvSharp.CvHistogram)">
            <summary>
            ヒストグラムをクリアする.
            密なヒストグラムの場合，全てのヒストグラムのビンを0にセットする， また疎なヒストグラムの場合は，すべてのヒストグラムのビンを削除する．
            </summary>
            <param name="hist">対象のヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            ストレージの先頭（空き領域の境界）を，一番最初に戻す．
            この関数はメモリを解放しない．もしストレージが親を持つ場合，この関数は親に全てのブロックを返す．
            </summary>
            <param name="storage">対象のストレージへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            密な配列と疎な配列の指定した要素をクリア（0にセット）する．要素が存在しなければ，この関数は何もしない．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素のインデックスの配列(可変長引数）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSeq(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスをクリアする
            </summary>
            <param name="seq">シーケンス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSet(OpenCvSharp.CvSet)">
            <summary>
            セットをクリアする
            </summary>
            <param name="set">クリアされるセット</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ClearSubdivVoronoi2D(OpenCvSharp.CvSubdiv2D)">
            <summary>
            全ての仮想点を削除する． 
            この関数の前回の呼出し後に細分割が変更された場合，この関数は cvCalcSubdivVoronoi2D の内部で呼ばれる． 
            </summary>
            <param name="subdiv">ドロネー細分割</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ClipLine(OpenCvSharp.CvSize,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            線分を画像領域で切り取る
            </summary>
            <param name="imgSize">画像の大きさ</param>
            <param name="pt1">線分の1番目の端点．この値はこの関数によって変更される．</param>
            <param name="pt2">線分の2番目の端点．この値はこの関数によって変更される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Clone(System.IntPtr)">
            <summary>
            オブジェクトのコピーを作成する
            </summary>
            <param name="structPtr">コピーするオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Clone``1(``0)">
            <summary>
            オブジェクトのコピーを作成する
            </summary>
            <param name="structPtr">コピーするオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneGraph(OpenCvSharp.CvGraph,OpenCvSharp.CvMemStorage)">
            <summary>
            グラフをコピーする
            </summary>
            <param name="graph">コピーするグラフ</param>
            <param name="storage">コピーのためのコンテナ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneImage(OpenCvSharp.IplImage)">
            <summary>
            ヘッダ，ROI，データを含む画像の完全なコピーを作成する． 
            </summary>
            <param name="image">オリジナル画像</param>
            <returns>コピーされた画像</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneMat(OpenCvSharp.CvMat)">
            <summary>
            行列のコピーを作成する
            </summary>
            <param name="mat">入力行列</param>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneMatND(OpenCvSharp.CvMatND)">
            <summary>
            多次元配列の完全なコピーを作成する
            </summary>
            <param name="mat">入力行列</param>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq(OpenCvSharp.CvSeq)">
            <summary>
            入力行列のコピーを作成し返す
            </summary>
            <param name="seq">シーケンス</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage)">
            <summary>
            入力行列のコピーを作成し返す
            </summary>
            <param name="seq">シーケンス</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，入力シーケンスに含まれるストレージを使用する．</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq``1(OpenCvSharp.CvSeq{``0})">
            <summary>
            入力行列のコピーを作成し返す
            </summary>
            <param name="seq">シーケンス</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSeq``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvMemStorage)">
            <summary>
            入力行列のコピーを作成し返す
            </summary>
            <param name="seq">シーケンス</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，入力シーケンスに含まれるストレージを使用する．</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CloneSparseMat(OpenCvSharp.CvSparseMat)">
            <summary>
            
            </summary>
            <param name="mat">入力行列</param>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Cmp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            二つの配列の各要素ごとの比較を行う. 対応する要素を比較し，出力配列の値にセットする．
            dst(I) = src1(I) op src2(I) .
            比較結果が真（true）であれば dst(I) には 0xff（要素すべてのビットが 1 ）をセットし，それ以外の場合（false）であれば 0 をセットする．
            </summary>
            <param name="src1">入力配列（シングルチャンネル）</param>
            <param name="src2">2番目の入力配列．どちらの入力配列もシングルチャンネルでなければならない．</param>
            <param name="dst">出力配列（タイプは 8u か 8s でないといけない）</param>
            <param name="cmpOp">比較方法を示すフラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CmpS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.ArrComparison)">
            <summary>
            配列要素とスカラーを比較し，出力配列の値をセットする．
            dst(I) = src1(I) op scalar .
            比較結果が真（true）であれば dst(I) には 0xff（要素すべてのビットが 1 ）をセットし，それ以外の場合（false）であれば 0 をセットする．
            </summary>
            <param name="src">入力配列（シングルチャンネル）</param>
            <param name="value">それぞれの配列要素と比較されるスカラー</param>
            <param name="dst">出力配列（タイプは 8u か 8s でないといけない）</param>
            <param name="cmpOp">比較方法を示すフラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConDensInitSampleSet(OpenCvSharp.CvConDensation,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="condens"></param>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConDensUpdateByTime(OpenCvSharp.CvConDensation)">
            <summary>
            
            </summary>
            <param name="condens"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompleteSymm(OpenCvSharp.CvMat)">
            <summary>
            指定した行列を、その下三角行列を用いて対称行列として書き換える
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompleteSymm(OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            指定した行列を、その下三角行列 (LtoR=false) または上三角行列 (LtoR=true) を用いて対称行列として書き換える
            </summary>
            <param name="matrix"></param>
            <param name="LtoR"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CompareHist(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            2つの密なヒストグラムを比較する.
            疎なヒストグラム，あるいは重み付けされた点が集まったような，より一般的な構造を比較するためには，関数cvCalcEMD2 を用いる方が良い場合もある.
            </summary>
            <param name="hist1">1番目の密なヒストグラム</param>
            <param name="hist2">2番目の密なヒストグラム</param>
            <param name="method">比較手法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ComposeRT(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Computes r3 = rodrigues(rodrigues(r2)*rodrigues(r1)),
            t3 = rodrigues(r2)*t1 + t2 and the respective derivatives
            </summary>
            <param name="rvec1"></param>
            <param name="tvec1"></param>
            <param name="rvec2"></param>
            <param name="tvec2"></param>
            <param name="rvec3"></param>
            <param name="tvec3"></param>
            <param name="dr3dr1"></param>
            <param name="dr3dt1"></param>
            <param name="dr3dr2"></param>
            <param name="dr3dt2"></param>
            <param name="dt3dr1"></param>
            <param name="dt3dt1"></param>
            <param name="dt3dr2"></param>
            <param name="dt3dt2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ComputeCorrespondEpilines(OpenCvSharp.CvMat,System.Int32,OpenCvSharp.CvMat,OpenCvSharp.CvMat@)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="points">入力点で大きさは2xN, Nx2, 3xN，また はNx3の配列である (ここで N は 点の数)． マルチチャンネルの 1xN，または Nx1 の配列も使用可能．</param>
            <param name="whichImage">pointsを含む画像のインデックス（1 または 2）．</param>
            <param name="fundamentalMatrix">基礎行列</param>
            <param name="correspondentLines">計算されたエピポーラ線．大きさは3xN また Nx3 の配列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourArea(OpenCvSharp.CvArr)">
            <summary>
            輪郭全体の領域，または輪郭の一部を計算する． 
            後者の場合，輪郭の弧と選択された2点を繋ぐ弦で区切られたエリア全体が計算される．
            </summary>
            <param name="contour">輪郭（頂点のシーケンスまたは配列）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourArea(OpenCvSharp.CvArr,OpenCvSharp.CvSlice)">
            <summary>
            輪郭全体の領域，または輪郭の一部を計算する． 
            後者の場合，輪郭の弧と選択された2点を繋ぐ弦で区切られたエリア全体が計算される．
            </summary>
            <param name="contour">輪郭（頂点のシーケンスまたは配列）</param>
            <param name="slice">注目領域の輪郭の始点と終点．デフォルトでは全領域が計算される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourFromContourTree(OpenCvSharp.CvContourTree,OpenCvSharp.CvMemStorage,OpenCvSharp.CvTermCriteria)">
            <summary>
            ツリーから輪郭を復元する
            </summary>
            <param name="tree">輪郭の二分木</param>
            <param name="storage">復元した輪郭の出力先</param>
            <param name="criteria">復元を止める基準</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ContoursMoments(OpenCvSharp.CvSeq,OpenCvSharp.CvMoments@)">
            <summary>
            Alias for Moments with CvSeq contours
            </summary>
            <param name="contour"></param>
            <param name="moments"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ContourPerimeter(OpenCvSharp.CvArr)">
            <summary>
            cvArcLength(curve,Whole_Seq,1) のエイリアス
            </summary>
            <param name="contour"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertImage(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ConvertImageFlag)">
            <summary>
            画像を必要に応じて変換する
            </summary>
            <param name="src">入力画像.</param>
            <param name="dst">出力画像．1 チャンネル 8 ビット画像，あるいは，3 チャンネル 8 ビット画像である．</param>
            <param name="flags">操作フラグ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertMaps(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Converts mapx &amp; mapy from floating-point to integer formats for cvRemap
            </summary>
            <param name="mapx"></param>
            <param name="mapy"></param>
            <param name="mapxy"></param>
            <param name="mapalpha"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertPointsHomogenious(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="src">入力点の配列．大きさは2xN, Nx2, 3xN, Nx3, 4xN，またはNx4（ここでNは点の数）．マルチチャンネルの1xNまたはNx1の配列も使用可能．</param>
            <param name="dst">出力点の配列．入力配列と同じ数の点が含まれる次元数は，同じ， あるいは入力より1少ないか1大きい．そして2..4の範囲内でなければならない． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertPointsHomogeneous(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="src">入力点の配列．大きさは2xN, Nx2, 3xN, Nx3, 4xN，またはNx4（ここでNは点の数）．マルチチャンネルの1xNまたはNx1の配列も使用可能．</param>
            <param name="dst">出力点の配列．入力配列と同じ数の点が含まれる次元数は，同じ， あるいは入力より1少ないか1大きい．そして2..4の範囲内でなければならない． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって配列の値を変換する．[scale=1, shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．[shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Scale(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">スケーリング係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Convert(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            scale=1, shift=0 でのcvConvertScale呼び出し. 任意の線形変換によって配列の値を変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[scale=1, shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvertScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[scale=1, shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．[shift=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtScaleAbs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            任意の線形変換によって，入力配列の要素を8ビット符号無し整数型の配列に変換する．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列（デプスは 8u）</param>
            <param name="scale">ScaleAbs 係数</param>
            <param name="shift">スケーリングした入力配列の要素に加える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint[],System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint2D32f[],System.Int32[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint[],OpenCvSharp.CvPoint[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexHull2(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[]@,OpenCvSharp.ConvexHullOrientation)">
            <summary>
            Sklanskyのアルゴリズムを使って2次元の点列の凸包を見つける
            </summary>
            <param name="input">32ビット整数型，もしくは浮動小数点型で表された2次元の点のシーケンスまたは配列． </param>
            <param name="hull">出力される凸包．凸包を構成する点の元の配列におけるインデックス（0基準）のベクトル</param>
            <param name="orientation">凸包を構成するデータの並び．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのポインタまたはインデックスを持つ，つまりcvConvexHull2のreturn_pointsパラメータが0であるような cvConvexHull2 を使って得られた凸包．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのポインタまたはインデックスを持つ，つまりcvConvexHull2のreturn_pointsパラメータが0であるような cvConvexHull2 を使って得られた凸包．</param>
            <param name="storage">凹状欠損の出力シーケンスを格納する変数．これがnullである場合，代わりに，輪郭あるいは凸包のストレージが（この順番で）利用される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ConvexityDefects(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            輪郭の凸包から凹状欠損を見つける
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="convexhull">凸包の点そのものではなく，輪郭の点へのインデックスを持つ cvConvexHull2 を使って得られた凸包．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            一つの配列を別の配列にコピーする.
            </summary>
            <param name="src">コピー元画像</param>
            <param name="dst">コピー先の画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Copy(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            一つの配列を別の配列にコピーする.
            </summary>
            <param name="src">コピー元画像</param>
            <param name="dst">コピー先の画像</param>
            <param name="mask">8 ビットシングルチャンネル配列の処理マスク．コピー先の配列の変更する要素を指定する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CopyHist(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram@)">
            <summary>
            関数 cvCopyHist は，ヒストグラムのコピーを作成する．
            コピー先のヒストグラムへのポインタdstがNULLの場合は，srcと同じサイズの新しいヒストグラムが作成される．
            それ以外の場合は，二つのヒストグラムは同一タイプ，サイズでないといけない．
            この関数はコピー元のヒストグラムのビンの値を，コピー先にコピーし， src内に定義されているのと同じビンの値域をセットする． 
            </summary>
            <param name="src">コピー元のヒストグラム．</param>
            <param name="dst">コピー先のヒストグラムへのポインタ． </param>        
        </member>
        <member name="M:OpenCvSharp.Cv.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType)">
            <summary>
            画像をコピーし，その周りに境界線をつける
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="offset">入力画像（あるいはROI）がコピーされる出力画像内矩形領域の左上角座標 （左下に原点を持つ画像の場合は，左下角座標）．</param>
            <param name="bordertype">コピーされた矩形領域の周りに生成する境界線のタイプ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CopyMakeBorder(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.BorderType,OpenCvSharp.CvScalar)">
            <summary>
            画像をコピーし，その周りに境界線をつける
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="offset">入力画像（あるいはROI）がコピーされる出力画像内矩形領域の左上角座標 （左下に原点を持つ画像の場合は，左下角座標）．</param>
            <param name="bordertype">コピーされた矩形領域の周りに生成する境界線のタイプ</param>
            <param name="value">bordertype=Constant の場合は境界を埋める値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerEigenValsAndVecs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            コーナー検出のために画像ブロックの固有値と固有ベクトルを計算する.
            </summary>
            <param name="image">入力画像</param>
            <param name="eigenvv">結果保存用の画像．入力画像の6倍のサイズが必要．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerEigenValsAndVecs(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために画像ブロックの固有値と固有ベクトルを計算する.
            </summary>
            <param name="image">入力画像</param>
            <param name="eigenvv">結果保存用の画像．入力画像の6倍のサイズが必要．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="image">入力画像</param>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="image">入力画像</param>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerHarris(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize,System.Double)">
            <summary>
            入力画像について Harris エッジ検出を行う． 
            cvCornerMinEigenVal や cvCornerEigenValsAndVecsと同様の機能を持ち，それぞれのピクセルにおいて，
            block_size×block_size 隣接における 2×2 サイズの勾配から共変動行列M を計算する．その後， 
            det(M) - k * trace(M)^2
            を計算し，検出結果として出力画像に保存する．結果画像の極大値を求めることで，画像のコーナーを検出することができる． 
            </summary>
            <param name="image">入力画像</param>
            <param name="harrisResponce">検出結果を保存する画像．入力画像 image と同じサイズでなくてはならない.</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
            <param name="k">Harris検出器のパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerMinEigenVal(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="image">入力画像</param>
            <param name="eigenval">最小固有値を保存する画像．image と同じサイズでなくてはならない．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CornerMinEigenVal(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="image">入力画像</param>
            <param name="eigenval">最小固有値を保存する画像．image と同じサイズでなくてはならない．</param>
            <param name="blockSize">隣接ブロックのサイズ</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．入力画像が浮動小数点型である場合，このパラメータは差分を計算するために用いられる固定小数点型フィルタの数を表す</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CorrectMatches(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            The Optimal Triangulation Method
            </summary>
            <param name="f">3x3 fundamental matrix</param>
            <param name="points1">2xN matrix containing the first set of points</param>
            <param name="points2">2xN matrix containing the second set of points</param>
            <param name="newPoints1">the optimized points1_. if this is null, the corrected points are placed back in points1_</param>
            <param name="newPoints2">the optimized points2_. if this is null, the corrected points are placed back in points2_</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CountNonZero(OpenCvSharp.CvArr)">
            <summary>
            配列要素において 0 ではない要素をカウントする.
            配列が IplImage の場合， ROI，COI の両方に対応している．
            </summary>
            <param name="arr">配列（シングルチャンネルまたはCOIがセットされたマルチチャンネルの画像）．</param>
            <returns>0 ではない要素数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateBGCodeBookModel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String)">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback)">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object)">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数に渡されるオブジェクト</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType)">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数に渡されるオブジェクト</param>
            <param name="buttonType">ボタンの種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateButton(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType,System.Int32)">
            <summary>
            コントロールパネル上にボタンを作成します．
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数に渡されるオブジェクト</param>
            <param name="buttonType">ボタンの種類</param>
            <param name="initialButtonState">ボタンのデフォルトの状態．チェックボックスとラジオボックスの場合，これは 0 または 1 になります．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateCameraCapture(System.Int32)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="index">使われるカメラのインデックス．使用するカメラが１台のとき，あるいは，何台のカメラを使うかが重要でないときは，-1 でも問題ない場合もある.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateCameraCapture(OpenCvSharp.CaptureDevice)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="device">使われるカメラの種類</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateChildMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            子メモリストレージを生成する．
            </summary>
            <param name="parent">親メモリストレージ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateConDensation(System.Int32,System.Int32,System.Int32)">
            <summary>
            ConDensation フィルタ構造体の領域確保を行う
            </summary>
            <param name="dynamParams">状態ベクトルの次元</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <param name="sampleCount">サンプル数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateContourTree(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            輪郭の階層的表現を生成する
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="storage">結果のツリーの出力先</param>
            <param name="threshold">近似精度</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateData(OpenCvSharp.CvArr)">
            <summary>
            画像，行列あるいは多次元配列のデータを確保する．
            </summary>
            <param name="arr">配列ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateFeatureTree(OpenCvSharp.CvMat)">
            <summary>
            特徴ベクトルのツリーを作成する
            </summary>
            <param name="desc">d 次元特徴ベクトルの n × d 行列（CV_32FC1 or CV_64FC1）.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateFileCapture(System.String)">
            <summary>
            ファイルからのビデオキャプチャを初期化する
            </summary>
            <param name="filename">ビデオファイル名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat)">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][])">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
            <param name="ranges">ヒストグラムのビン（bin）（値域）を示す配列．このパラメータの意味はパラメータuniformに依存している．
            このレンジは，ヒストグラムを計算したり，またどのヒストグラムのビンが入力画像のどの値やどのデータ要素に対応するかを決めるためのバックプロジェクションで用いられる．
            null の場合は，後から関数 cvSetHistBinRanges を用いて決定される.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateHist(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][],System.Boolean)">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
            <param name="ranges">ヒストグラムのビン（bin）（値域）を示す配列．このパラメータの意味はパラメータuniformに依存している．
            このレンジは，ヒストグラムを計算したり，またどのヒストグラムのビンが入力画像のどの値やどのデータ要素に対応するかを決めるためのバックプロジェクションで用いられる．
            null の場合は，後から関数 cvSetHistBinRanges を用いて決定される.</param>
            <param name="uniform">一様性に関するフラグ</param>
            <returns>多次元ヒストグラムクラス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraph(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            空のグラフを生成する
            </summary>
            <param name="graphFlags">生成したグラフのタイプ．無向グラフの場合，CV_SEQ_KIND_GRAPH，有向グラフの場合，CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED． </param>
            <param name="vtxSize">グラフのヘッダサイズ （sizeof(CvGraph)以上）</param>
            <param name="edgeSize">グラフの頂点サイズ</param>
            <param name="storage">グラフの辺サイズ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraph(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            空のグラフを生成する
            </summary>
            <param name="graphFlags">生成したグラフのタイプ．無向グラフの場合，CV_SEQ_KIND_GRAPH，有向グラフの場合，CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED． </param>
            <param name="headerSize">グラフのヘッダサイズ （sizeof(CvGraph)以上）</param>
            <param name="vtxSize">グラフの頂点サイズ</param>
            <param name="edgeSize">グラフの辺サイズ</param>
            <param name="storage">グラフコンテナ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph)">
            <summary>
            グラフの深さ優先走査のための構造体を生成する
            </summary>
            <param name="graph">グラフ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフの深さ優先走査のための構造体を生成する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">走査開始頂点．nullの場合，走査は先頭の頂点（頂点シーケンスのうち最小のインデックスを持つ頂点）から始まる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateGraphScanner(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.GraphScannerMask)">
            <summary>
            グラフの深さ優先走査のための構造体を生成する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">走査開始頂点．nullの場合，走査は先頭の頂点（頂点シーケンスのうち最小のインデックスを持つ頂点）から始まる．</param>
            <param name="mask">イベントマスク．どのイベントにユーザが着目したいのかを指定する .</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateImage(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            画像のヘッダを作成し，データ領域を確保する
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <returns>画像ポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            メモリ確保と初期化を行い，IplImage クラスを返す
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．このチャンネルはインタリーブされる．例えば，通常のカラー画像のデータレイアウトは，b0 g0 r0 b1 g1 r1 ...となっている．</param>
            <returns>画像ポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKalman(System.Int32,System.Int32)">
            <summary>
            カルマンフィルタ構造体の領域確保を行う.
            </summary>
            <param name="dynamParams">状態ベクトルの次元数</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKalman(System.Int32,System.Int32,System.Int32)">
            <summary>
            カルマンフィルタ構造体の領域確保を行う.
            </summary>
            <param name="dynamParams">状態ベクトルの次元数</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <param name="controlParams">コントロールベクトルの次元</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateKDTree(OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateLSH(System.IntPtr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct a Locality Sensitive Hash (LSH) table, for indexing d-dimensional vectors of
            given type. Vectors will be hashed L times with k-dimensional p-stable (p=2) functions.
            </summary>
            <param name="ops">(not supported argument on OpenCvSharp)</param>
            <param name="d"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMat(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保し，作成された行列への参照を返す．
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatHeader(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            新たな行列のヘッダを作成し，その参照を返す．
            さらに，cvCreateData を用いるか，cvSetData により，ユーザが確保したデータ領域を明示的にセットすることで，行列データが確保される．
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatND(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            多次元の密な配列のヘッダとその内部データを確保し，作成された配列のポインタを返す．
            </summary>
            <param name="dims">配列の次元数．CV_MAX_DIM（デフォルトでは32．ビルド時に変更される可能性もある）を超えてはいけない．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMatNDHeader(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            多次元の密な配列のヘッダを確保する．
            さらに，cvCreateData を用いるか， cvSetData により，ユーザが確保したデータ領域を明示的にセットすることで，配列データが確保される． 
            </summary>
            <param name="dims">配列の次元数．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemoryLSH(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Double,System.Int64)">
            <summary>
            Construct in-memory LSH table, with n bins.
            </summary>
            <param name="d"></param>
            <param name="n"></param>
            <param name="l"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemStorage">
            <summary>
            メモリストレージを生成し，その参照を返す．初期状態ではストレージは空である．
            block_sizeを除くヘッダのフィールドは全て0に設定されている.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateMemStorage(System.Int32)">
            <summary>
            メモリストレージを生成し，その参照を返す．初期状態ではストレージは空である．
            block_sizeを除くヘッダのフィールドは全て0に設定されている.
            </summary>
            <param name="blockSize">ストレージブロックのバイト単位のサイズ．0の場合，デフォルト値（現在は≈64K）が使われる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePOSITObject(OpenCvSharp.CvPoint3D32f[])">
            <summary>
            オブジェクトの情報を持つ構造体を初期化する
            </summary>
            <param name="points">3次元オブジェクトモデル上の点データの配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePOSITObject(OpenCvSharp.CvPoint3D32f[],System.Int32)">
            <summary>
            オブジェクトの情報を持つ構造体を初期化する
            </summary>
            <param name="points">3次元オブジェクトモデル上の点データの配列</param>
            <param name="pointCount">オブジェクト上の点データの数</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreatePyramid(OpenCvSharp.CvArr,System.Int32,System.Double,OpenCvSharp.CvSize[],OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvFilter)">
            <summary>
            Builds pyramid for an image
            </summary>
            <param name="img"></param>
            <param name="extraLayers"></param>
            <param name="rate"></param>
            <param name="layerSizes"></param>
            <param name="bufarr"></param>
            <param name="calc"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="rawData"></param>
            <param name="naive"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="rawData"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="rawData"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <param name="tau"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeq(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する
            </summary>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，
            特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，
            この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから
            適切なタイプが選択されなければならない．</param>
            <param name="headerSize">シーケンスのヘッダサイズ．sizeof(CvSeq)以上でなければならない．
            また，特別なタイプかその拡張が指示されている場合，そのタイプは基本タイプのヘッダと合致していなければならない．</param>
            <param name="elemSize">シーケンスの要素サイズ（バイト単位）．
            サイズはシーケンスタイプと合致しなければならない．例えば，点群のシーケンスを作成する場合，
            要素タイプにCV_SEQ_ELTYPE_POINTを指定し，パラメータ elemSize は sizeof(CvPoint) と等しくなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeq``1(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない．</param>
            <param name="headerSize">シーケンスのヘッダサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプかその拡張が指示されている場合，そのタイプは基本タイプのヘッダと合致していなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSeqBlock(OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSet(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            空のセットを生成する
            </summary>
            <param name="setFlags">生成するセットのタイプ． </param>
            <param name="headerSize">セットのヘッダのサイズ（sizeof(CvSet)以上）． </param>
            <param name="elemSize">セットの要素のサイズ（CvSetElem 以上）． </param>
            <param name="storage">セットのためのコンテナ． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSparseMat(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            疎な配列を作成する
            </summary>
            <param name="dims">配列の次元数．密な行列とは逆に，次元数は実質的には無制限である（2^16 まで）．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類.</param>
            <returns>多次元の疎な配列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState">
            <summary>
            ステレオブロックマッチング構造体を作成する
            </summary>
            <returns>ステレオブロックマッチング構造体</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState(OpenCvSharp.StereoBMPreset)">
            <summary>
            ステレオブロックマッチング構造体を作成する
            </summary>
            <param name="preset">あらかじめ定義されたパラメータのID．構造体を作成した後で，任意のパラメータをオーバーライドできる． </param>
            <returns>ステレオブロックマッチング構造体</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoBMState(OpenCvSharp.StereoBMPreset,System.Int32)">
            <summary>
            ステレオブロックマッチング構造体を作成する
            </summary>
            <param name="preset">あらかじめ定義されたパラメータのID．構造体を作成した後で，任意のパラメータをオーバーライドできる． </param>
            <param name="numberOfDisparities">視差数（最大視差-最小視差）． このパラメータが 0 の場合，preset から選択される． そうでない場合は，与えられた値が preset の値をオーバーライドする．</param>
            <returns>ステレオブロックマッチング構造体</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStereoGCState(System.Int32,System.Int32)">
            <summary>
            グラフカットステレオマッチングアルゴリズムの構造体を作成する
            </summary>
            <param name="numberOfDisparities">視差数．視差の探索範囲は， state-&gt;minDisparity &lt;= disparity &lt; state-&gt;minDisparity + state-&gt;numberOfDisparities となる．</param>
            <param name="maxIters">繰り返し計算の最大数． 各繰り返しにおいて，すべての（あるいは，適度な数の）α拡張を行う． このアルゴリズムは，コスト関数全体を減少させるα拡張が見つからなかった場合は，そこで終了する．</param>
            <returns>グラフカットステレオマッチングアルゴリズムの構造体</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStructuringElementEx(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape)">
            <summary>
            膨張・収縮処理に用いる構造要素を生成する
            </summary>
            <param name="cols">構造要素の列数</param>
            <param name="rows">構造要素の行数</param>
            <param name="anchorX">構造要素の原点のx座標</param>
            <param name="anchorY">構造要素の原点のy座標</param>
            <param name="shape">構造要素の形状</param>
            <returns>構造要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateStructuringElementEx(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape,System.Int32[0:,0:])">
            <summary>
            膨張・収縮処理に用いる構造要素を生成する
            </summary>
            <param name="cols">構造要素の列数</param>
            <param name="rows">構造要素の行数</param>
            <param name="anchorX">構造要素の原点のx座標</param>
            <param name="anchorY">構造要素の原点のy座標</param>
            <param name="shape">構造要素の形状</param>
            <param name="values">構造要素データへのポインタ。このパラメータは形状がCV_SHAPE_CUSTOMのときのみ有効</param>
            <returns>構造要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSubdiv2D(OpenCvSharp.SeqType,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            CvSubdiv2Dを生成する。
            このあと、cvInitSubdivDelaunay2Dで初期化するべし
            </summary>
            <param name="subdivType"></param>
            <param name="headerSize"></param>
            <param name="vtxSize"></param>
            <param name="quadedgeSize"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateSubdivDelaunay2D(OpenCvSharp.CvRect,OpenCvSharp.CvMemStorage)">
            <summary>
            空のドロネー三角形を作成する
            </summary>
            <param name="rect">細分割のために追加される全ての２次元点を包含する矩形．</param>
            <param name="storage">細分割のための領域．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateTrackbar(System.String,System.String,System.Int32@,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            指定された名前と範囲のトラックバー（スライダ，レンジコントロールとも呼ばれる）を作成する．
            作成されたトラックバーは，与えられたウィンドウの最上段に表示される.
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="windowName">トラックバーの親ウィンドウの名前</param>
            <param name="value">ref of value</param>
            <param name="count">スライダの最大値．最小値は常に 0.</param>
            <param name="onChange">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateTrackbar(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            指定された名前と範囲のトラックバー（スライダ，レンジコントロールとも呼ばれる）を作成する．
            作成されたトラックバーは，与えられたウィンドウの最上段に表示される.
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="windowName">トラックバーの親ウィンドウの名前</param>
            <param name="value">スライダの初期位置</param>
            <param name="count">スライダの最大値．最小値は常に 0.</param>
            <param name="onChange">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateTrackbar2(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            指定された名前と範囲のトラックバー（スライダ，レンジコントロールとも呼ばれる）を作成する．
            作成されたトラックバーは，与えられたウィンドウの最上段に表示される.
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="windowName">トラックバーの親ウィンドウの名前</param>
            <param name="value">スライダの初期位置</param>
            <param name="count">スライダの最大値．最小値は常に 0.</param>
            <param name="onChange">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateVideoWriter(System.String,System.String,System.Double,OpenCvSharp.CvSize)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CreateVideoWriter(System.String,System.String,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <param name="isColor">trueの場合，エンコーダはカラーフレームとしてエンコードする． falseの場合，グレースケールフレームとして動作する（現在のところ，このフラグは Windows でのみ利用できる）．</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CrossProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの3次元ベクトルの外積を計算する.
            dst = src1 × src2,  (dst1 = src12src23 - src13src22 , dst2 = src13src21 - src11src23 , dst3 = src11src22 - src12src21).
            </summary>
            <param name="src1">1番目の入力ベクトル</param>
            <param name="src2">2番目の入力ベクトル</param>
            <param name="dst">出力ベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtColor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ColorConversion)">
            <summary>
            入力画像の色空間を変換する
            </summary>
            <param name="src">入力画像. 8ビット(8u), 16ビット(16u), あるいは単精度浮動小数点型(32f).</param>
            <param name="dst">出力画像. 入力画像と同じデータタイプ. チャンネル数は違うこともある．</param>
            <param name="code">色空間の変換の方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtSeqToArray``1(OpenCvSharp.CvSeq,``0[]@)">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq">シーケンス</param>
            <param name="elements">十分に大きな領域を持つ出力配列</param>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtSeqToArray``1(OpenCvSharp.CvSeq,``0[]@,OpenCvSharp.CvSlice)">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq">シーケンス</param>
            <param name="elements">十分に大きな領域を持つ出力配列</param>
            <param name="slice">配列へコピーするシーケンス内の部分</param>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FastArctan(System.Single,System.Single)">
            <summary>
            入力された2次元ベクトルの角度を計算する．角度は度（degree）単位で扱われ，0°から360°の範囲で変化する．精度は ~0.1°．
            </summary>
            <param name="y">2次元ベクトルのy座標</param>
            <param name="x">2次元ベクトルのx座標</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="img">ポリゴンが描かれる画像</param>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="img">ポリゴンが描かれる画像</param>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillConvexPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            凸ポリゴンの内部を塗りつぶす．
            </summary>
            <param name="img">ポリゴンが描かれる画像</param>
            <param name="pts">一つのポリゴンへのポインタの配列</param>
            <param name="color">ポリゴンの色</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="img">ポリゴンが描かれる画像．</param>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="img">ポリゴンが描かれる画像．</param>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
            <param name="lineType">線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FillPoly(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],OpenCvSharp.CvScalar,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリゴン内部を塗りつぶす
            </summary>
            <param name="img">ポリゴンが描かれる画像．</param>
            <param name="pts">ポリゴンへのポインタ配列．</param>
            <param name="color">ポリゴンの色．</param>
            <param name="lineType">線の種類．</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            画像に線形フィルタを適用する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="kernel">フィルタマスク．係数のシングルチャンネルの2次元浮動小数点型行列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Filter2D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvPoint)">
            <summary>
            画像に線形フィルタを適用する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="kernel">フィルタマスク．係数のシングルチャンネルの2次元浮動小数点型行列．</param>
            <param name="anchor">カーネルのアンカー．カーネルマスクでカバーされる隣接領域内における， フィルタ対象となるピクセルの相対位置を表す．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="image">入力のチェスボード画像．8ビットのグレースケールまたはカラー画像．</param>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="image">入力のチェスボード画像．8ビットのグレースケールまたはカラー画像．</param>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <param name="cornerCount">コーナーの数が出力される</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,OpenCvSharp.ChessboardFlag)">
            <summary>
            入力画像がチェスボードパターンであるかどうかを確認し，チェスボードの各コーナーの位置検出を試みる．
            </summary>
            <param name="image">入力のチェスボード画像．8ビットのグレースケールまたはカラー画像．</param>
            <param name="patternSize">チェスボードの行と列ごとのコーナーの数</param>
            <param name="corners">検出されたコーナーの配列. Length=pattern_size.Width*pattern_size.Height</param>
            <param name="cornerCount">コーナーの数が出力される</param>
            <param name="flags">処理フラグ</param>
            <returns>すべてのコーナーが検出され，正しい順番（行順で，かつ各行は左から右に並ぶ）でそれらが配置されている場合には, true</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="image">入力画像（8ビットシングルチャンネル）．値が0以外のピクセルは「1」，0のピクセルは「0」とする.</param>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="image">入力画像（8ビットシングルチャンネル）．値が0以外のピクセルは「1」，0のピクセルは「0」とする.</param>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="image">入力画像（8ビットシングルチャンネル）．値が0以外のピクセルは「1」，0のピクセルは「0」とする.</param>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="image">入力画像（8ビットシングルチャンネル）．値が0以外のピクセルは「1」，0のピクセルは「0」とする.</param>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <param name="method">近似手法</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint}@,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            2値画像中の輪郭を見つける
            </summary>
            <param name="image">入力画像（8ビットシングルチャンネル）．値が0以外のピクセルは「1」，0のピクセルは「0」とする.</param>
            <param name="storage">抽出された輪郭を保存する領域</param>
            <param name="firstContour">出力パラメータ．一番外側の輪郭へのポインタが入っている．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．method=CV_CHAIN_CODEの場合，>=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)．</param>
            <param name="mode">抽出モード </param>
            <param name="method">近似手法</param>
            <param name="offset">オフセット．全ての輪郭点はこれによってシフトされる.</param>
            <returns>抽出した輪郭の個数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindCornerSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[],System.Int32,OpenCvSharp.CvSize,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            コーナー位置を高精度化する.
            </summary>
            <param name="image">入力画像</param>
            <param name="corners">コーナーの初期座標が入力され，高精度化された座標が出力される.</param>
            <param name="count">コーナーの数</param>
            <param name="win">検索ウィンドウの半分のサイズ．（例）win=(5,5) ならば 5*2+1 × 5*2+1 = 11 × 11 が探索ウィンドウして使われる.</param>
            <param name="zeroZone">総和を計算する際に含まれない，探索領域の中心に存在する総和対象外領域の半分のサイズ．この値は，自己相関行列において発生しうる特異点を避けるために用いられる． 値が (-1,-1) の場合は，そのようなサイズはないということを意味する</param>
            <param name="criteria">コーナー座標の高精度化のための繰り返し処理の終了条件．コーナー位置の高精度化の繰り返し処理は，規定回数に達するか，目標精度に達したときに終了する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindDominantPoints(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,OpenCvSharp.DominantsFlag,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Finds high-curvature points of the contour
            </summary>
            <param name="contour">pointer to input contour object.</param>
            <param name="storage">memory storage</param>
            <param name="method"></param>
            <param name="parameter1">for IPAN algorithm - minimal distance</param>
            <param name="parameter2">for IPAN algorithm - maximal distance</param>
            <param name="parameter3">for IPAN algorithm - neighborhood distance (must be not greater than dmaximal distance)</param>
            <param name="parameter4">for IPAN algorithm - minimal distance</param>
            <returns>array of dominant points indices</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            既知の内部パラメータを用いて，それぞれのビューにおける外部パラメータを推定する．
            3次元のオブジェクトの点とそれに対応する２次元投影点が指定されなければならない．この関数も逆投影誤差の最小化を行う．
            </summary>
            <param name="objectPoints">オブジェクトの点の配列．3xNまたはNx3でNはビューにおける点の数．</param>
            <param name="imagePoints">対応する画像上の点の配列．2xNまたはNx2でNはビューにおける点の数．</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数のベクトル．4x1または1x4 [k1, k2, p1, p2]．nullの場合，歪み係数はすべて0 であるとする．</param>
            <param name="rotationVector">出力される 3x1 の回転ベクトル</param>
            <param name="translationVector">出力される 3x1 の並進ベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            既知の内部パラメータを用いて，それぞれのビューにおける外部パラメータを推定する．
            3次元のオブジェクトの点とそれに対応する２次元投影点が指定されなければならない．この関数も逆投影誤差の最小化を行う．
            </summary>
            <param name="objectPoints">オブジェクトの点の配列．3xNまたはNx3でNはビューにおける点の数．</param>
            <param name="imagePoints">対応する画像上の点の配列．2xNまたはNx2でNはビューにおける点の数．</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数のベクトル．4x1または1x4 [k1, k2, p1, p2]．nullの場合，歪み係数はすべて0 であるとする．</param>
            <param name="rotationVector">出力される 3x1 の回転ベクトル</param>
            <param name="translationVector">出力される 3x1 の並進ベクトル</param>
            <param name="useExtrinsicGuess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2Cs(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            既知の内部パラメータを用いて，それぞれのビューにおける外部パラメータを推定する．
            3次元のオブジェクトの点とそれに対応する２次元投影点が指定されなければならない．この関数も逆投影誤差の最小化を行う．
            </summary>
            <param name="objectPoints">オブジェクトの点の配列．3xNまたはNx3でNはビューにおける点の数．</param>
            <param name="imagePoints">対応する画像上の点の配列．2xNまたはNx2でNはビューにおける点の数．</param>
            <param name="cameraMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distCoeffs">歪み係数のベクトル．4x1または1x4 [k1, k2, p1, p2]．nullの場合，歪み係数はすべて0 であるとする．</param>
            <param name="rvec">出力される 3x1 の回転ベクトル</param>
            <param name="tvec">出力される 3x1 の並進ベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindExtrinsicCameraParams2Cs(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            既知の内部パラメータを用いて，それぞれのビューにおける外部パラメータを推定する．
            3次元のオブジェクトの点とそれに対応する２次元投影点が指定されなければならない．この関数も逆投影誤差の最小化を行う．
            </summary>
            <param name="objectPoints">オブジェクトの点の配列．3xNまたはNx3でNはビューにおける点の数．</param>
            <param name="imagePoints">対応する画像上の点の配列．2xNまたはNx2でNはビューにおける点の数．</param>
            <param name="cameraMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distCoeffs">歪み係数のベクトル．4x1または1x4 [k1, k2, p1, p2]．nullの場合，歪み係数はすべて0 であるとする．</param>
            <param name="rvec">出力される 3x1 の回転ベクトル</param>
            <param name="tvec">出力される 3x1 の並進ベクトル</param>
            <param name="useExtrinsicGuess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.UndistortPoints_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="_src"></param>
            <param name="_dst"></param>
            <param name="_cameraMatrix"></param>
            <param name="_distCoeffs"></param>
            <param name="matR"></param>
            <param name="matP"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography_(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="objectPoints"></param>
            <param name="imagePoints"></param>
            <param name="__H"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2_(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFace(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="tr">参照ベクトルに対するk-d木インデックスへのポインタ．</param>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="tr">参照ベクトルに対するk-d木インデックスへのポインタ．</param>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
            <param name="k">検出される近傍の数．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeatures(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="tr">参照ベクトルに対するk-d木インデックスへのポインタ．</param>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
            <param name="k">検出される近傍の数．</param>
            <param name="emax">探索する葉の最大数．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFeaturesBoxed(OpenCvSharp.CvFeatureTree,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            与えられたk-d木上で直交領域探索を行う．
            </summary>
            <param name="tr">参照ベクトルに対するk-d木インデックスへのポインタ．</param>
            <param name="boundsMin">各次元の最小値を与える 1×d あるいは d×1 のベクトル（CV_32FC1 or CV_64FC1）</param>
            <param name="boundsMax">各次元の最大値を与える 1×d あるいは d×1 のベクトル（CV_32FC1 or CV_64FC1）</param>
            <param name="result">出力行インデックス（cvCreateFeatureTreeに引数として渡される行列を参照する） の 1×m あるいは m×1 のベクトル（CV_32SC1）</param>
            <returns>求められたベクトル数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="points1">大きさが2xN, Nx2, 3xN，または Nx3 の1枚目の画像上の点の配列 (N は点の数)．マルチチャンネルで大きさ 1xN，または Nx1 の配 列も使用可能である． 点の座標は浮動小数点型で表される（単精度または倍精度）．</param>
            <param name="points2">2枚目の画像上の点の配列で point1とフォーマットやサイズは同じ．</param>
            <param name="fundamentalMatrix">出力される基礎行列．サイズは 3x3， または 9x3（7-point methodは3つの行列を返す）．</param>
            <returns>求めた基礎行列の数（1 または 3）．もし行列が求まらないときは0．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="points1">大きさが2xN, Nx2, 3xN，または Nx3 の1枚目の画像上の点の配列 (N は点の数)．マルチチャンネルで大きさ 1xN，または Nx1 の配 列も使用可能である． 点の座標は浮動小数点型で表される（単精度または倍精度）．</param>
            <param name="points2">2枚目の画像上の点の配列で point1とフォーマットやサイズは同じ．</param>
            <param name="fundamentalMatrix">出力される基礎行列．サイズは 3x3， または 9x3（7-point methodは3つの行列を返す）．</param>
            <param name="method">基礎行列の計算手法</param>
            <returns>求めた基礎行列の数（1 または 3）．もし行列が求まらないときは0．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod,System.Double,System.Double)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="points1">大きさが2xN, Nx2, 3xN，または Nx3 の1枚目の画像上の点の配列 (N は点の数)．マルチチャンネルで大きさ 1xN，または Nx1 の配 列も使用可能である． 点の座標は浮動小数点型で表される（単精度または倍精度）．</param>
            <param name="points2">2枚目の画像上の点の配列で point1とフォーマットやサイズは同じ．</param>
            <param name="fundamentalMatrix">出力される基礎行列．サイズは 3x3， または 9x3（7-point methodは3つの行列を返す）．</param>
            <param name="method">基礎行列の計算手法</param>
            <param name="param1">RANSAC メソッドのときにのみ使用されるパラメータ．点からエピポーラ線までの最大距離（その距離を超えるものは外れ値であると判断し，それらを最終的な基礎行列の計算に使用しない）をピクセル単位で示す． 通常は 1~3 の値にセットされる． </param>
            <param name="param2">RANSAC または LMedSメソッドのときにのみ使用されるパラメータ． F行列の推定精度の信頼レベルを示す．</param>
            <returns>求めた基礎行列の数（1 または 3）．もし行列が求まらないときは0．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindFundamentalMat(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.FundamentalMatMethod,System.Double,System.Double,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="points1">大きさが2xN, Nx2, 3xN，または Nx3 の1枚目の画像上の点の配列 (N は点の数)．マルチチャンネルで大きさ 1xN，または Nx1 の配 列も使用可能である． 点の座標は浮動小数点型で表される（単精度または倍精度）．</param>
            <param name="points2">2枚目の画像上の点の配列で point1とフォーマットやサイズは同じ．</param>
            <param name="fundamentalMatrix">出力される基礎行列．サイズは 3x3， または 9x3（7-point methodは3つの行列を返す）．</param>
            <param name="method">基礎行列の計算手法</param>
            <param name="param1">RANSAC メソッドのときにのみ使用されるパラメータ．点からエピポーラ線までの最大距離（その距離を超えるものは外れ値であると判断し，それらを最終的な基礎行列の計算に使用しない）をピクセル単位で示す． 通常は 1~3 の値にセットされる． </param>
            <param name="param2">RANSAC または LMedSメソッドのときにのみ使用されるパラメータ． F行列の推定精度の信頼レベルを示す．</param>
            <param name="status">N個の要素からなる出力配列． 各要素は，アウトライア（外れ値）に対しては 0，「インライア」，つまり推定されたエピポーラ幾何に良く適合する値， に対しては 1 にセットされる． この配列は RANSAC または LMedS のときのみ計算される．他の手法では，すべて 1 にセットされる.</param>
            <returns>求めた基礎行列の数（1 または 3）．もし行列が求まらないときは0．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindGraphEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            グラフから辺を検出する（インデックス指定）
            </summary>
            <param name="graph">グラフ． </param>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphFindEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            グラフから辺を検出する（インデックス指定）
            </summary>
            <param name="graph">グラフ． </param>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindGraphEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を検出する（ポインタ指定）
            </summary>
            <param name="graph">グラフ． </param>
            <param name="startVtx">辺の始点を示す頂点へのポインタ． </param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>指定した二つの頂点を接続する辺</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphFindEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を検出する（ポインタ指定）
            </summary>
            <param name="graph">グラフ． </param>
            <param name="startVtx">辺の始点を示す頂点へのポインタ． </param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>指定した二つの頂点を接続する辺</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の射影変換を求める
            </summary>
            <param name="srcPoints">1枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．ここで N は点の数．</param>
            <param name="dstPoints">2枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．</param>
            <param name="homography">出力される3x3ホモグラフィ行列（平面射影変換行列）． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod)">
            <summary>
            2枚の画像間の射影変換を求める
            </summary>
            <param name="srcPoints">1枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．ここで N は点の数．</param>
            <param name="dstPoints">2枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．</param>
            <param name="homography">出力される3x3ホモグラフィ行列（平面射影変換行列）． </param>
            <param name="method">ホモグラフィ行列を計算するための手法</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod,System.Double)">
            <summary>
            2枚の画像間の射影変換を求める
            </summary>
            <param name="srcPoints">1枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．ここで N は点の数．</param>
            <param name="dstPoints">2枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．</param>
            <param name="homography">出力される3x3ホモグラフィ行列（平面射影変換行列）． </param>
            <param name="method">ホモグラフィ行列を計算するための手法</param>
            <param name="ransacReprojThreshold">点のペアをインライア値として扱うために許容される，逆投影誤差の最大値．このパラメータは，CV_RANSAC が指定された場合にのみ利用される．例えば，dst_points がピクセル精度のピクセル座標である場合，このパラメータは，おおよそ 1〜3 にセットされるのが正しい． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindHomography(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.HomographyMethod,System.Double,OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の射影変換を求める
            </summary>
            <param name="srcPoints">1枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．ここで N は点の数．</param>
            <param name="dstPoints">2枚目の画像上の座標． 2xN，Nx2，3xN または Nx3の配列 （後ろ二つは同次座標系表記である）．</param>
            <param name="homography">出力される3x3ホモグラフィ行列（平面射影変換行列）． </param>
            <param name="method">ホモグラフィ行列を計算するための手法</param>
            <param name="ransacReprojThreshold">点のペアをインライア値として扱うために許容される，逆投影誤差の最大値．このパラメータは，CV_RANSAC が指定された場合にのみ利用される．例えば，dst_points がピクセル精度のピクセル座標である場合，このパラメータは，おおよそ 1〜3 にセットされるのが正しい． </param>
            <param name="mask">オプション：ロバスト推定（CV_RANSAC， CV_LMEDS）で利用される出力マスク． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindNearestPoint2D(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f)">
            <summary>
            与えられた点に最も近い細分割の頂点を求める. 入力点を細分割内に配置するもう一つの関数である．
            この関数は入力された点に最も近い頂点を求める． 
            </summary>
            <param name="subdiv">ドロネー，または他の細分割</param>
            <param name="pt">入力点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindNextContour(OpenCvSharp.CvContourScanner)">
            <summary>
            画像中の次の輪郭を検索する
            </summary>
            <param name="scanner">関数cvStartFindContoursで初期化された輪郭スキャナ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DisparityMode,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            ステレオペア間の視差を計算する
            </summary>
            <param name="leftImage">ステレオペアの左画像．8ビット，グレースケールの（傾きや位置などが）修正された画像．</param>
            <param name="rightImage">ステレオペアの右画像．8ビット，グレースケールの修正された画像．</param>
            <param name="mode">視差を計算するためのアルゴリズム（現在は，CV_DISPARITY_BIRCHFIELD のみをサポートしている）．</param>
            <param name="depthImage">結果のデプス画像．視差を表すようにスケーリングされた，8ビット，グレースケール画像． つまり，ゼロ視差（これは，カメラから非常に遠い場所の点にあたる）は 0 にマッピングされ，最大視差は 255 にマッピングされる．</param>
            <param name="maxDisparity">取りうる最大視差．オブジェクトがカメラに近ければ近い程，ここには大きな値が指定されるべきである． ただし，大きすぎる値は，処理速度を極端に低下させる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DisparityMode,OpenCvSharp.CvArr,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ステレオペア間の視差を計算する
            </summary>
            <param name="leftImage">ステレオペアの左画像．8ビット，グレースケールの（傾きや位置などが）修正された画像．</param>
            <param name="rightImage">ステレオペアの右画像．8ビット，グレースケールの修正された画像．</param>
            <param name="mode">視差を計算するためのアルゴリズム（現在は，CV_DISPARITY_BIRCHFIELD のみをサポートしている）．</param>
            <param name="depthImage">結果のデプス画像．視差を表すようにスケーリングされた，8ビット，グレースケール画像． つまり，ゼロ視差（これは，カメラから非常に遠い場所の点にあたる）は 0 にマッピングされ，最大視差は 255 にマッピングされる．</param>
            <param name="maxDisparity">取りうる最大視差．オブジェクトがカメラに近ければ近い程，ここには大きな値が指定されるべきである． ただし，大きすぎる値は，処理速度を極端に低下させる．</param>
            <param name="param1">アルゴリズムのパラメータ. オクルージョンペナルティ定数 など</param>
            <param name="param2">アルゴリズムのパラメータ. 一致報酬 など</param>
            <param name="param3">アルゴリズムのパラメータ. 高信頼度の領域（param3 以上の信頼性を持つ，隣接するピクセルの組）の定義 など</param>
            <param name="param4">アルゴリズムのパラメータ. 中信頼度の領域の定義 など</param>
            <param name="param5">アルゴリズムのパラメータ. 低信頼度の領域の定義 など</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceBM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoBMState)">
            <summary>
            ブロックマッチングアルゴリズムを用いて視差画像を計算する
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="disparity">出力の視差配列．シングルチャンネル，16ビット，符号有り整数，入力画像と同サイズ．各要素は，計算された視差であり，16倍されて整数値にまるめられる．</param>
            <param name="state">ステレオマッチング構造体．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceGC(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoGCState)">
            <summary>
            グラフカットに基づくアルゴリズムにより視差画像を計算する
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="dispLeft">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの左視差画像． </param>
            <param name="dispRight">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの右視差画像． </param>
            <param name="state">ステレオマッチング構造体．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindStereoCorrespondenceGC(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvStereoGCState,System.Boolean)">
            <summary>
            グラフカットに基づくアルゴリズムにより視差画像を計算する
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="dispLeft">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの左視差画像． </param>
            <param name="dispRight">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの右視差画像． </param>
            <param name="state">ステレオマッチング構造体．</param>
            <param name="useDisparityGuess">このパラメータが 0 でない場合， あらかじめ定義された視差画像を用いて計算が開始される．つまり， dispLeft と dispRight が共に，妥当な視差画像である必要がある． そうでない場合は，（すべてのピクセルがオクルージョンとなっている）空の視差画像から開始される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FindType(System.String)">
            <summary>
            名前から型を見つける
            </summary>
            <param name="typeName">型の名前</param>
            <returns>登録された型．nullの場合，指定した名前の型は存在しない．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FirstType">
            <summary>
            型リストの先頭を返す
            </summary>
            <returns>登録されている型のリストの先頭のもの</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitEllipse2(OpenCvSharp.CvArr)">
            <summary>
            2次元の点列に楕円をフィッティングする
            </summary>
            <param name="points">点のシーケンス，または配列</param>
            <returns>2次元の点列にフィットする最良の楕円</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitEllipse2(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint2D32f})">
            <summary>
            2次元の点列に楕円をフィッティングする
            </summary>
            <param name="points">点の配列</param>
            <returns>2次元の点列にフィットする最良の楕円</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitLine(OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Double,System.Double,System.Double,System.Single[])">
            <summary>
            2次元または3次元の点列に線をフィッティングする
            </summary>
            <param name="points">32ビット整数型または浮動小数点型の2次元または3次元の点の配列，またはシーケンス．</param>
            <param name="distType">フィッティングに使われる距離．</param>
            <param name="param">それぞれの距離関数における数値パラメータ（C）．0を指定した場合，最適な値が選択される．</param>
            <param name="reps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="aeps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="line">出力される線のパラメータ．2次元フィッティングの場合，四つの浮動小数点型数(vx, vy, x0, y0)の配列で，(vx, vy)は正規化された方向ベクトル，(x0, y0)は線上の点を意味する．3次元フィッティングの場合，(vx, vy, vz, x0, y0, z0)の六つの浮動小数点型数の配列で，(vx, vy, vz)は正規化された方向ベクトル，(x0, y0, z0)は線上の点を意味する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FitLine2D(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            2次元の点列に線をフィッティングする
            </summary>
            <param name="points">32ビット整数型の2次元の点の配列，またはシーケンス．</param>
            <param name="distType">フィッティングに使われる距離．</param>
            <param name="param">それぞれの距離関数における数値パラメータ（C）．0を指定した場合，最適な値が選択される．</param>
            <param name="reps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="aeps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <returns>出力される線のパラメータ．(vx, vy)は正規化された方向ベクトル，(x0, y0)は線上の点を意味する．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitLine2D(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint2D32f},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            2次元の点列に線をフィッティングする
            </summary>
            <param name="points">浮動小数点型の2次元の点の配列，またはシーケンス．</param>
            <param name="distType">フィッティングに使われる距離．</param>
            <param name="param">それぞれの距離関数における数値パラメータ（C）．0を指定した場合，最適な値が選択される．</param>
            <param name="reps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="aeps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <returns>出力される線のパラメータ．(vx, vy)は正規化された方向ベクトル，(x0, y0)は線上の点を意味する．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FitLine3D(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint3D32f},OpenCvSharp.DistanceType,System.Double,System.Double,System.Double)">
            <summary>
            3次元の点列に線をフィッティングする
            </summary>
            <param name="points">浮動小数点型の3次元の点の配列，またはシーケンス．</param>
            <param name="distType">フィッティングに使われる距離．</param>
            <param name="param">それぞれの距離関数における数値パラメータ（C）．0を指定した場合，最適な値が選択される．</param>
            <param name="reps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <param name="aeps">半径（座標原点と線の距離）と角度に対する精度．それぞれ0.01が初期値として適している．</param>
            <returns>出力される線のパラメータ．(vx, vy, vz)は正規化された方向ベクトル，(x0, y0, z0)は線上の点を意味する．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
            <param name="src">入力配列（出力もここに格納される）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Flip(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
            <param name="flipMode">配列の反転方法の指定</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
            <param name="src">入力配列（出力もここに格納される）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mirror(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.FlipMode)">
            <summary>
            2次元配列を垂直，水平，または両軸で反転する. cvFlipのエイリアス.
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．もしnullであれば，反転はインプレースモードで行われる</param>
            <param name="flipMode">配列の反転方法の指定</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,OpenCvSharp.FloodFillFlag)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
            <param name="flags">操作フラグ．下位ビットは関数内で用いられる連結性に関する値4（デフォルト）または8が入っている． 
            連結性は，どのピクセルを隣接ピクセルと見なすかを定義する．上位ビットは0，あるいはCv.FLOODFILL_FIXED_RANGE, Cv.FLOODFILL_MASK_ONLY との組み合わせである.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FloodFill(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvConnectedComp@,OpenCvSharp.FloodFillFlag,OpenCvSharp.CvArr)">
            <summary>
            連結成分を指定した色で塗りつぶす
            </summary>
            <param name="image">入力画像．1チャンネルあるいは3チャンネル，8ビットあるいは浮動小数点型．CV_FLOODFILL_MASK_ONLYフラグがセットされたとき以外は，データが書き換えられる．</param>
            <param name="seedPoint">連結成分の開始点．シードピクセル． </param>
            <param name="newVal">塗りつぶされる領域の新しいピクセル値（塗りつぶす値）．</param>
            <param name="loDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容下限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="upDiff">現在の観測対象ピクセルと，その連結成分に属する隣接ピクセル， またはそのピクセルを連結成分に追加するためのシードピクセルとの，輝度値/色の差（違い）の許容上限値． 8ビットカラー画像のときは，パックされた値． </param>
            <param name="comp">構造体へのポインタ．この関数は，塗りつぶされた領域の情報を構造体に代入する． </param>
            <param name="flags">操作フラグ．下位ビットは関数内で用いられる連結性に関する値4（デフォルト）または8が入っている． 
            連結性は，どのピクセルを隣接ピクセルと見なすかを定義する．上位ビットは0，あるいはCv.FLOODFILL_FIXED_RANGE, Cv.FLOODFILL_MASK_ONLY との組み合わせである.</param>
            <param name="mask">処理用マスク</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Floor(System.Double)">
            <summary>
            引数より大きくない最大の整数値を返す.
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns>引数より大きくない最大の整数値</returns>]
        </member>
        <member name="M:OpenCvSharp.Cv.FlushSeqWriter(OpenCvSharp.CvSeqWriter)">
            <summary>
            ライタの状態からシーケンスヘッダを更新する
            </summary>
            <param name="writer">ライタの状態．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
            <param name="style">処理フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FontQt(System.String,System.Int32,OpenCvSharp.CvScalar,OpenCvSharp.FontWeight,OpenCvSharp.FontStyle,System.Int32)">
            <summary>
            画像上にテキストを描画する際に利用されるフォントを作成します．
            </summary>
            <param name="nameFont">フォント名. 指定のフォントが見つからなければ，デフォルトフォントが利用されます．</param>
            <param name="pointSize">ォントサイズ．これが，未指定，または0以下の値の場合，フォンとのポイントサイズはシステム依存のデフォルト値にセットされます．通常は，12ポイントです．</param>
            <param name="color">BGRA で表現されるフォントカラー．</param>
            <param name="weight">フォントの太さ</param>
            <param name="style">処理フラグ</param>
            <param name="spacing">文字間のスペース．正負の値が利用できます．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Free(System.IntPtr@)">
            <summary>
            メモリバッファの領域を解放する
            </summary>
            <param name="ptr">解放する領域へのポインタのポインタ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GEMM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            汎用的な行列の乗算を行う.
            dst = alpha*op(src1)*op(src2) + beta*op(src3), ここで， op(X) は X あるいは X^t. 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="alpha">乗算結果に対するスケーリング係数</param>
            <param name="src3">3番目の入力配列（シフト用）．もしシフトしない場合はNULLにできる</param>
            <param name="beta">3番目の入力配列に対するスケーリング係数</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GEMM(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.GemmOperation)">
            <summary>
            汎用的な行列の乗算を行う.
            dst = alpha*op(src1)*op(src2) + beta*op(src3), ここで， op(X) は X あるいは X^t. 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="alpha">乗算結果に対するスケーリング係数</param>
            <param name="src3">3番目の入力配列（シフト用）．もしシフトしない場合はNULLにできる</param>
            <param name="beta">3番目の入力配列に対するスケーリング係数</param>
            <param name="dst">出力配列</param>
            <param name="tAbc">操作フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            行列の乗算を行う.
            dst = A*B.
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAdd(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            行列の乗算を行う.
            dst = A*B + C, C is optional.
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="src3">3番目の入力配列（シフト用）．もしシフトしない場合はnullにできる</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            汎用的な行列の乗算を行う.
            dst = alpha*op(src1)*op(src2) + beta*op(src3), ここで， op(X) は X あるいは X^t. 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="alpha">乗算結果に対するスケーリング係数</param>
            <param name="src3">3番目の入力配列（シフト用）．もしシフトしない場合はNULLにできる</param>
            <param name="beta">3番目の入力配列に対するスケーリング係数</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.GemmOperation)">
            <summary>
            汎用的な行列の乗算を行う.
            dst = alpha*op(src1)*op(src2) + beta*op(src3), ここで， op(X) は X あるいは X^t. 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="alpha">乗算結果に対するスケーリング係数</param>
            <param name="src3">3番目の入力配列（シフト用）．もしシフトしない場合はNULLにできる</param>
            <param name="beta">3番目の入力配列に対するスケーリング係数</param>
            <param name="dst">出力配列</param>
            <param name="tAbc">操作フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Get1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Get2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Get3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値. 疎な配列で，指定したノードが存在しない場合，0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            特定の配列要素を返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値. </returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetAffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            3点とそれぞれに対応する点からアフィン変換を計算する (2 x 3 のCV_32FC1型). 引数としてoutを取るオーバーロードの簡略版.
            おそらくoutで出てくる行列と関数の返り値は同じなので、out引数の方を省いたものである.
            </summary>
            <param name="src">入力（変換前）画像内に存在する三角形の3つの頂点座標を格納した配列</param>
            <param name="dst">出力（変換後）画像内に存在するsrcに対応した三角形の3つの頂点座標を格納した配列</param>
            <returns>求められた 2×3のアフィン変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetAffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            3点とそれぞれに対応する点からアフィン変換を計算する (2 x 3 のCV_32FC1型).
            </summary>
            <param name="src">入力（変換前）画像内に存在する三角形の3つの頂点座標を格納した配列</param>
            <param name="dst">出力（変換後）画像内に存在するsrcに対応した三角形の3つの頂点座標を格納した配列</param>
            <param name="mapMatrix">出力される 2×3のアフィン変換行列</param>
            <returns>求められた 2×3のアフィン変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCaptureProperty(OpenCvSharp.CvCapture,System.Int32)">
            <summary>
            ビデオキャプチャのプロパティを取得する
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="propertyId">プロパティID</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCaptureProperty(OpenCvSharp.CvCapture,OpenCvSharp.CaptureProperty)">
            <summary>
            ビデオキャプチャのプロパティを取得する
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="propertyId">プロパティID</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCentralMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から中心モーメントを計算する
            </summary>
            <param name="moments">画像モーメント構造体へのポインタ</param>
            <param name="xOrder">取り出すモーメントのx方向の次数，x_order &gt;= 0. </param>
            <param name="yOrder">取り出すモーメントのy方向の次数， y_order &gt;= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCol(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            指定された列を返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="col">選択した列の，0を基準としたインデックス．</param>
            <returns>指定された範囲の列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetCols(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            指定された範囲の列（複数列）を返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="startCol">範囲の最初の（この値を含む）列の，0を基準としたインデックス．</param>
            <param name="endCol">範囲の最後の（この値を含まない）列の，0を基準としたインデックス．</param>
            <returns>指定された範囲の列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDiag(OpenCvSharp.CvArr,OpenCvSharp.CvMat@)">
            <summary>
            入力配列中の指定された対角列に相当するヘッダを返す. 
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDiag(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.DiagType)">
            <summary>
            入力配列中の指定された対角列に相当するヘッダを返す. 
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="diag">対角配列の種類</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDims(OpenCvSharp.CvArr)">
            <summary>
            配列の次元とそれらのサイズを返す．
            IplImageまたは CvMatの場合には，画像や行列の行数に関係なく常に 2 を返す．
            </summary>
            <param name="arr">入力配列</param>
            <returns>配列の次元数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDims(OpenCvSharp.CvArr,System.Int32[]@)">
            <summary>
            配列の次元とそれらのサイズを返す．
            IplImageまたは CvMatの場合には，画像や行列の行数に関係なく常に 2 を返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="sizes">配列の次元の大きさを示すオプションの出力ベクトル．2次元配列の場合は1番目に行数（高さ），次は列数（幅）を示す．</param>
            <returns>配列の次元数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetDimSize(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            配列の指定された次元の要素数を返す. 
            </summary>
            <param name="arr">入力配列</param>
            <param name="index">0を基準にした次元のインデックス（行列では0は行数，1は列数を示す．画像では0は高さ, 1は幅を示す）．</param>
            <returns>指定された次元の要素数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetElemType(OpenCvSharp.CvArr)">
            <summary>
            配列要素のタイプを返す. 
            </summary>
            <param name="arr">入力配列</param>
            <returns>配列要素のタイプ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetErrMode">
            <summary>
            現在のエラーモードを返す
            </summary>
            <returns>現在のエラーモード</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetErrStatus">
            <summary>
            現在のエラーステータスを返す
            </summary>
            <returns>現在のエラーステータス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNode(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode)">
            <summary>
            マップまたはファイルストレージ内のノードを見つける
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探す．もしmapとkeyの両方がnullの場合には， この関数はトップレベルノードを持つマップであるルートファイルノードを返す．</param>
            <param name="key">cvGetHashedKeyで取得されるノード名ヘの唯一のポインタ</param>
            <returns>与えたmap,keyに対するファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNode(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode,System.Boolean)">
            <summary>
            マップまたはファイルストレージ内のノードを見つける
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探す．もしmapとkeyの両方がnullの場合には， この関数はトップレベルノードを持つマップであるルートファイルノードを返す．</param>
            <param name="key">cvGetHashedKeyで取得されるノード名ヘの唯一のポインタ</param>
            <param name="createMissing">absent keyをハッシュテーブルに追加するかどうかを指定するフラグ</param>
            <returns>与えたmap,keyに対するファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNodeName(OpenCvSharp.CvFileNode)">
            <summary>
            ファイルノードの名前を返す．ファイルノードが名前を持たないか，nodeがnullの場合にはnullを返す．
            </summary>
            <param name="node">ファイルノード</param>
            <returns>ファイルノードの名前</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetFileNodeByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            マップ内またはファイルストレージ内からノードを探索する
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数は一番最初のものから開始して，全てのトップレベルノード(ストリーム)内を探索する．</param>
            <param name="name">ファイルノード名</param>
            <returns>名前がnameのファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetGraphVtx(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            インデックスを用いてグラフの頂点を検索する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtxIdx">頂点のインデックス</param>
            <returns>グラフの頂点</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHashedKey(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            与えた名前に対するユニークなポインタを返す 
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">ファイルノード名</param>
            <returns>与えた名前に対するユニークなポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHashedKey(OpenCvSharp.CvFileStorage,System.String,System.Boolean)">
            <summary>
            与えた名前に対するユニークなポインタを返す 
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">ファイルノード名</param>
            <param name="createMissing">absent keyをハッシュテーブルに追加するかどうかを指定するフラグ</param>
            <returns>与えた名前に対するユニークなポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_1D(OpenCvSharp.CvHistogram,System.Int32)">
            <summary>
            1次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_2D(OpenCvSharp.CvHistogram,System.Int32,System.Int32)">
            <summary>
            2次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_3D(OpenCvSharp.CvHistogram,System.Int32,System.Int32,System.Int32)">
            <summary>
            3次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHistValue_nD(OpenCvSharp.CvHistogram,System.Int32[])">
            <summary>
            n次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetHuMoments(OpenCvSharp.CvMoments,OpenCvSharp.CvHuMoments@)">
            <summary>
            ７つのHuモーメント不変量を計算する
            </summary>
            <param name="moments">画像モーメント構造体への参照</param>
            <param name="humoments">Huモーメント構造体への参照</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImage(OpenCvSharp.CvArr)">
            <summary>
            任意の配列に対する画像ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <returns>入力配列に対する画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImage(OpenCvSharp.CvArr,OpenCvSharp.IplImage@)">
            <summary>
            任意の配列に対する画像ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="imageHeader">出力される画像ヘッダ</param>
            <returns>入力配列に対する画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImageCOI(OpenCvSharp.IplImage)">
            <summary>
            画像の COI（channel of interest）を返す.
            全チャンネルが選択される場合には，0 が返される）．
            </summary>
            <param name="image">画像ヘッダ</param>
            <returns>COI（channel of interest）を返す（全チャンネルが選択される場合には，0 が返される）.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetImageROI(OpenCvSharp.IplImage)">
            <summary>
            画像の ROI 座標を返す．
            ROI が存在しない場合には，矩形 cvRect(0,0,image.Width,image.Height) が返される．
            </summary>
            <param name="image">画像ヘッダ</param>
            <returns>ROI</returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr)">
            <summary>
            任意の配列に対する行列ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <returns>入力配列に対する行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@)">
            <summary>
            任意の配列に対する行列ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">出力されるCvMatヘッダ</param>
            <returns>入力配列に対する行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32@)">
            <summary>
            任意の配列に対する行列ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">出力されるCvMatヘッダ</param>
            <param name="coi">COIを記憶するための，オプションの出力パラメータ．</param>
            <returns>入力配列に対する行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMat(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32@,System.Boolean)">
            <summary>
            任意の配列に対する行列ヘッダを返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">出力されるCvMatヘッダ</param>
            <param name="coi">COIを記憶するための，オプションの出力パラメータ．</param>
            <param name="allowND">これが 0 でない場合，この関数は多次元の密な配列（CvMatND*）を扱うことが可能で， 2次元行列（CvMatND が2次元の場合）あるいは 1次元行列（CvMatNDが 1次元，あるいは 2次元より大きい場合）を返す． 配列は連続でなければならない． </param>       
            <returns>入力配列に対する行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNextSparseNode(OpenCvSharp.CvSparseMatIterator)">
            <summary>
            疎な配列において次の要素のポインタを返す
            </summary>
            <param name="matIterator">疎な配列のイテレータ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMinMaxHistValue(OpenCvSharp.CvHistogram,System.Single@,System.Single@)">
            <summary>
            ヒストグラムのビンの最小値/最大値を求める． 
            同じ値の最大値や最小値が複数存在する場合，辞書順に並べたときに最も先頭になるインデックスが返される． 
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="minValue">ヒストグラムの最小値の出力</param>
            <param name="maxValue">ヒストグラムの最大値の出力</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetMinMaxHistValue(OpenCvSharp.CvHistogram,System.Single@,System.Single@,System.Int32[]@,System.Int32[]@)">
            <summary>
            ヒストグラムのビンの最小値/最大値とそれらの場所を求める． 
            同じ値の最大値や最小値が複数存在する場合，辞書順に並べたときに最も先頭になるインデックスが返される． 
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="minValue">ヒストグラムの最小値の出力</param>
            <param name="maxValue">ヒストグラムの最大値の出力</param>
            <param name="minIdx">最小値の配列中のインデックスの出力</param>
            <param name="maxIdx">最大値の配列中のインデックスの出力</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetModuleInfo(System.String,System.String@,System.String@)">
            <summary>
            登録されたモジュールとプラグインの情報を取り出す
            </summary>
            <param name="moduleName">対象のモジュール名，nullの場合はすべてのモジュール．</param>
            <param name="version">出力パラメータ．モジュールについての情報（バージョンを含む）．</param>
            <param name="loadedAddonPlugins">CXCOREがロード可能な最適化プラグインの名前とバージョンのリスト．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNormalizedCentralMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から正規化された中心モーメントを計算する
            </summary>
            <param name="moments">画像モーメント構造体への参照</param>
            <param name="xOrder">取り出すモーメントのx方向の次数，x_order &gt;= 0. </param>
            <param name="yOrder">取り出すモーメントのy方向の次数， y_order &gt;= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetNumThreads">
            <summary>
            OpenMPを用いて並列化されたOpenCV関数によって使用される現在のスレッド数を返す．
            </summary>
            <returns>現在使われているスレッド数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalDFTSize(System.Int32)">
            <summary>
            与えられたベクトルのサイズに対する最適なDFTのサイズを返す
            </summary>
            <param name="size0">ベクトルのサイズ</param>
            <returns>最適なDFTのサイズ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat)">
            <summary>
            フリースケーリングパラメータに基づいて，新たなカメラ行列を返します
            </summary>
            <param name="cameraMatrix">入力されるカメラ行列</param>
            <param name="distCoeffs">入力される 4x1, 1x4, 5x1 または 1x5 の歪み係数ベクトル (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">最適画像サイズ</param>
            <param name="alpha">フリースケーリングパラメータ．0（歪み補正された画像のすべてのピクセルが有効）から1（歪み補正された画像においても，元画像のすべてのピクセルを保持）の間の値をとります．</param>
            <param name="newCameraMatrix">出力される新たなカメラ行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat,OpenCvSharp.CvSize)">
            <summary>
            フリースケーリングパラメータに基づいて，新たなカメラ行列を返します
            </summary>
            <param name="cameraMatrix">入力されるカメラ行列</param>
            <param name="distCoeffs">入力される 4x1, 1x4, 5x1 または 1x5 の歪み係数ベクトル (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">最適画像サイズ</param>
            <param name="alpha">フリースケーリングパラメータ．0（歪み補正された画像のすべてのピクセルが有効）から1（歪み補正された画像においても，元画像のすべてのピクセルを保持）の間の値をとります．</param>
            <param name="newCameraMatrix">出力される新たなカメラ行列</param>
            <param name="newImageSize">平行化された後の画像サイズ．デフォルトでは imageSize にセットされます</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetOptimalNewCameraMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,System.Double,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvRect@)">
            <summary>
            フリースケーリングパラメータに基づいて，新たなカメラ行列を返します
            </summary>
            <param name="cameraMatrix">入力されるカメラ行列</param>
            <param name="distCoeffs">入力される 4x1, 1x4, 5x1 または 1x5 の歪み係数ベクトル (k_1, k_2, p_1, p_2[, k_3])</param>
            <param name="imageSize">最適画像サイズ</param>
            <param name="alpha">フリースケーリングパラメータ．0（歪み補正された画像のすべてのピクセルが有効）から1（歪み補正された画像においても，元画像のすべてのピクセルを保持）の間の値をとります．</param>
            <param name="newCameraMatrix">出力される新たなカメラ行列</param>
            <param name="newImageSize">平行化された後の画像サイズ．デフォルトでは imageSize にセットされます</param>
            <param name="validPixROI">オプション出力．歪み補正された画像中のすべての有効なピクセル領域を囲む矩形．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetPerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            4点とそれぞれに対応する点を用いて透視変換行列を求める (3 x 3 のCV_32FC1型). 引数としてoutを取るオーバーロードの簡略版.
            おそらくoutで出てくる行列と関数の返り値は同じなので、out引数の方を省いたものである.
            </summary>
            <param name="src">入力画像中の矩形の４頂点の座標</param>
            <param name="dst">出力画像中の対応する矩形の４頂点の座標</param>
            <returns>求められた 3×3の射影変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetPerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            4点とそれぞれに対応する点を用いて透視変換行列を求める (3 x 3 のCV_32FC1型).
            </summary>
            <param name="src">入力画像中の矩形の４頂点の座標</param>
            <param name="dst">出力画像中の対応する矩形の４頂点の座標</param>
            <param name="mapMatrix">出力される 3×3の射影変換行列</param>
            <returns>求められた 3×3の射影変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspectiveQMatrix(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            4点とそれぞれに対応する点を用いて透視変換行列を求める (3 x 3 のCV_32FC1型). GetPerspectiveTransformのエイリアス.
            </summary>
            <param name="src">入力画像中の矩形の４頂点の座標</param>
            <param name="dst">出力画像中の対応する矩形の４頂点の座標</param>
            <returns>求められた 3×3の射影変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspectiveQMatrix(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvMat@)">
            <summary>
            4点とそれぞれに対応する点を用いて透視変換行列を求める (3 x 3 のCV_32FC1型).GetPerspectiveTransformのエイリアス.
            </summary>
            <param name="src">入力画像中の矩形の４頂点の座標</param>
            <param name="dst">出力画像中の対応する矩形の４頂点の座標</param>
            <param name="mapMatrix">出力される 3×3の射影変換行列</param>
            <returns>求められた 3×3の射影変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetQuadrangleSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            四角形領域のピクセル値を画像からサブピクセル精度で取得する（画像の回転＋並進移動を行なう）.
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">抽出された矩形</param>
            <param name="mapMatrix">2 × 3 の変換行列[A|b]</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="arr">配列ヘッダ.</param>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@,System.Int32@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="arr">配列ヘッダ.</param>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
            <param name="step">出力であるバイト単位で表された行の長さ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRawData(OpenCvSharp.CvArr,System.IntPtr@,System.Int32@,OpenCvSharp.CvSize@)">
            <summary>
            配列の低レベル情報を取り出す
            </summary>
            <param name="arr">配列ヘッダ.</param>
            <param name="data">出力である全画像の原点へのポインタ，あるいは ROI が設定されている場合は ROI の原点へのポインタ．</param>
            <param name="step">出力であるバイト単位で表された行の長さ．</param>
            <param name="roiSize">出力であるROI サイズ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="arr">入力配列．シングルチャンネルでなくてはならない．</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="arr">入力配列．シングルチャンネルでなくてはならない．</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetReal3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="arr">入力配列．シングルチャンネルでなくてはならない．</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRealND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            シングルチャンネルの配列の特定の要素を返す．配列がマルチチャンネルの場合は，ランタイムエラーが発生する．
            </summary>
            <param name="arr">入力配列．シングルチャンネルでなくてはならない．</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値. 指定したノードが存在しなければ，この関数は0を返す（この関数によって新しいノードは生成されない）．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRectSubPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f)">
            <summary>
            矩形領域のピクセル値を画像からサブピクセル精度で取得する（画像の並進移動を行なう）.
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">抽出された矩形</param>
            <param name="center">入力画像中にある抽出された矩形中心の浮動小数点型座標．中心は画像中になければならない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRootFileNode(OpenCvSharp.CvFileStorage)">
            <summary>
            トップレベルファイルノードの一つを返す．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <returns>トップレベルファイルノードの一つ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRootFileNode(OpenCvSharp.CvFileStorage,System.Int32)">
            <summary>
            トップレベルファイルノードの一つを返す．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="streamIndex">0から始まるストリームのインデックス．多くの場合，ファイル中に存在するのは一つのストームであるが，複数にもなり得る．</param>
            <returns>トップレベルファイルノードの一つ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRotationMatrix2D(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            2次元回転のアフィン行列を計算する (2 x 3 のCV_32FC1型). 引数としてoutを取るオーバーロードの簡略版.
            おそらくoutで出てくる行列と関数の返り値は同じなので、out引数の方を省いたものである.
            </summary>
            <param name="center">入力画像内の回転中心 </param>
            <param name="angle">度（degree）単位の回転角度．正の値は反時計方向の回転を意味する（座標原点は左上にあると仮定）．</param>
            <param name="scale">等方性スケーリング係数（x,y方向とも同じ係数 scale を使う） </param>
            <returns>2x3の2次元回転のアフィン行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv._2DRotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            2次元回転のアフィン行列を計算する (2 x 3 のCV_32FC1型). 引数としてoutを取るオーバーロードの簡略版.
            おそらくoutで出てくる行列と関数の返り値は同じなので、out引数の方を省いたものである.
            </summary>
            <param name="center">入力画像内の回転中心 </param>
            <param name="angle">度（degree）単位の回転角度．正の値は反時計方向の回転を意味する（座標原点は左上にあると仮定）．</param>
            <param name="scale">等方性スケーリング係数（x,y方向とも同じ係数 scale を使う） </param>
            <returns>2x3の2次元回転のアフィン行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv._2DRotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double,OpenCvSharp.CvMat@)">
            <summary>
            2次元回転のアフィン行列を計算する (2 x 3 のCV_32FC1型). 
            </summary>
            <param name="center">入力画像内の回転中心 </param>
            <param name="angle">度（degree）単位の回転角度．正の値は反時計方向の回転を意味する（座標原点は左上にあると仮定）．</param>
            <param name="scale">等方性スケーリング係数（x,y方向とも同じ係数 scale を使う） </param>
            <param name="mapMatrix">出力される 2x3の行列</param>
            <returns>2x3の2次元回転のアフィン行列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRow(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            指定された行を返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="row">選択した行の，0を基準としたインデックス．</param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRows(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            指定された範囲の行（複数行）を返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="startRow">範囲の最初の（この値を含む）行の，0を基準としたインデックス．</param>
            <param name="endRow">範囲の最後の（この値を含まない）行の，0を基準としたインデックス．</param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetRows(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定された範囲の行（複数行）を返す
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="startRow">範囲の最初の（この値を含む）行の，0を基準としたインデックス．</param>
            <param name="endRow">範囲の最後の（この値を含まない）行の，0を基準としたインデックス．</param>
            <param name="deltaRow">行の範囲のインデックス間隔． この関数は，start_rowからend_row（は含まない）まで，delta_row毎に行を抽出する. </param>
            <returns>指定された範囲の行</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqElem``1(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            与えられたインデックスを持つ要素をシーケンスの中から求め，その要素を返す．
            </summary>
            <typeparam name="T">出力オブジェクトの型</typeparam>
            <param name="seq">シーケンス</param>
            <param name="index">要素のインデックス. 負のインデックスの指定も可能で, 例えば，-1はシーケンスの最後の要素，-2は最後の一つ前を指す.</param>
            <returns>与えられたインデックスを持つ要素．要素が見つからない場合はnull．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqElem``1(OpenCvSharp.CvSeq{``0},System.Int32)">
            <summary>
            与えられたインデックスを持つ要素をシーケンスの中から求め，その要素を返す．
            </summary>
            <typeparam name="T">出力オブジェクトの型</typeparam>
            <param name="seq">シーケンス</param>
            <param name="index">要素のインデックス. 負のインデックスの指定も可能で, 例えば，-1はシーケンスの最後の要素，-2は最後の一つ前を指す.</param>
            <returns>与えられたインデックスを持つ要素．要素が見つからない場合はnull．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSeqReaderPos(OpenCvSharp.CvSeqReader)">
            <summary>
            現在のリーダの位置（0 ... reader->seq->total - 1 の範囲）を返す．
            </summary>
            <param name="reader">リーダの状態</param>
            <returns>リーダの位置</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSetElem(OpenCvSharp.CvSet,System.Int32)">
            <summary>
            インデックスによってセットの要素を検索する
            </summary>
            <param name="setHeader">セット．</param>
            <param name="index">シーケンスの中のセットの要素のインデックス．</param>
            <returns>見つけた要素への参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSize(OpenCvSharp.CvArr)">
            <summary>
            行列または画像の ROI のサイズを返す
            </summary>
            <param name="arr">配列のヘッダ</param>
            <returns>サイズ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSpatialMoment(OpenCvSharp.CvMoments,System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から空間モーメントを計算する
            </summary>
            <param name="moments">cvMoments によって得られる画像モーメント構造体．</param>
            <param name="xOrder">取り出すモーメントのx方向の次数，x_order >= 0. </param>
            <param name="yOrder">取り出すモーメントのy方向の次数， y_order >= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetStarKeypoints(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            StarDetectorアルゴリズムによりキーポイントを取得する
            </summary>
            <param name="img">8ビット グレースケールの入力画像</param>
            <param name="storage">キーポイントが格納されるメモリストレージ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetStarKeypoints(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.CvStarDetectorParams)">
            <summary>
            StarDetectorアルゴリズムによりキーポイントを取得する
            </summary>
            <param name="img">8ビット グレースケールの入力画像</param>
            <param name="storage">キーポイントが格納されるメモリストレージ</param>
            <param name="params">CvStarDetectorParams構造体としてまとめて与えられる、アルゴリズムのための各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSubRect(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            入力配列中の指定した矩形領域に相当するヘッダを返す．
            つまり，入力配列の一部の矩形領域を，独立した配列として扱えるようにする．この関数では ROI を考慮し，実際には ROI の部分配列が取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="rect">着目する矩形領域の，0 を基準とした座標</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetSubArr(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,OpenCvSharp.CvRect)">
            <summary>
            入力配列中の指定した矩形領域に相当するヘッダを返す．
            つまり，入力配列の一部の矩形領域を，独立した配列として扱えるようにする．この関数では ROI を考慮し，実際には ROI の部分配列が取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="submat">結果として得られる部分配列のヘッダへの参照</param>
            <param name="rect">着目する矩形領域の，0 を基準とした座標</param>
            <returns>結果として得られる部分配列のヘッダへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTextSize(System.String,OpenCvSharp.CvFont,OpenCvSharp.CvSize@,System.Int32@)">
            <summary>
            文字列の幅と高さを取得する
            </summary>
            <param name="textString">入力文字列</param>
            <param name="font">フォント構造体への参照</param>
            <param name="textSize">結果として得られる文字列のサイズ．文字の高さには，ベースラインより下の部分の高さは含まれない．</param>
            <param name="baseline">文字の最下点から見たベースラインのy座標</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTickCount">
            <summary>
            プラットフォーム依存の開始時点からのtics数（スタートアップからのCPU ticks数，1970年からのミリ秒等）を返す．
            </summary>
            <returns>プラットフォーム依存の開始時点からのticks数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTickFrequency">
            <summary>
            1マイクロ秒あたりのtics数を返す． 
            </summary>
            <returns>1マイクロ秒あたりのticks数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetThreadNum">
            <summary>
            現在のスレッドのインデックスを返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetTrackbarPos(System.String,System.String)">
            <summary>
            指定されたトラックバーの現在位置を返す
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="windowName">トラックバーの親ウィンドウの名前</param>
            <returns>トラックバーの現在位置</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetValidDisparityROI(OpenCvSharp.CvRect,OpenCvSharp.CvRect,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="roi1"></param>
            <param name="roi2"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="SADWindowSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowHandle(System.String)">
            <summary>
            ネイティブウィンドウハンドル（Win32 の 場合は HWND，GTK+ の場合は GtkWidget）を返す.
            </summary>
            <param name="name">ウィンドウの名前</param>
            <returns>ウィンドウハンドル</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowName(System.IntPtr)">
            <summary>
            与えられたネイティブウィンドウハンドル（Win32 の場合は HWND，GTK+ の場合は GtkWidget）が示すウィンドウの名前を返す．
            </summary>
            <param name="windowHandle">ウィンドウのハンドル</param>
            <returns>ウィンドウの名前</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GetWindowProperty(System.String,OpenCvSharp.WindowProperty)">
            <summary>
            ウィンドウのプロパティを取得する
            </summary>
            <param name="name">ウィンドウ名</param>
            <param name="propId">プロパティの種類</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double)">
            <summary>
            画像中から大きな固有値を持つコーナーを検出する．
            </summary>
            <param name="image">8ビット，または32ビット浮動小数点型シングルチャンネルの入力画像</param>
            <param name="eigImage">32ビット浮動小数点型のテンポラリ画像．サイズは image と同じである</param>
            <param name="tempImage">別のテンポラリ画像．サイズ・フォーマットともに eig_image と同じである</param>
            <param name="corners">出力パラメータ．検出されたコーナー</param>
            <param name="cornerCount">出力パラメータ．検出されたコーナーの数</param>
            <param name="qualityLevel">最大・最小の固有値に乗ずる定数（検出される画像コーナの許容最低品質を指定する）</param>
            <param name="minDistance">出力される画像コーナー間の許容最低距離（ユークリッド距離を用いる）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            画像中から大きな固有値を持つコーナーを検出する．
            </summary>
            <param name="image">8ビット，または32ビット浮動小数点型シングルチャンネルの入力画像</param>
            <param name="eigImage">32ビット浮動小数点型のテンポラリ画像．サイズは image と同じである</param>
            <param name="tempImage">別のテンポラリ画像．サイズ・フォーマットともに eig_image と同じである</param>
            <param name="corners">出力パラメータ．検出されたコーナー</param>
            <param name="cornerCount">出力パラメータ．検出されたコーナーの数</param>
            <param name="qualityLevel">最大・最小の固有値に乗ずる定数（検出される画像コーナの許容最低品質を指定する）</param>
            <param name="minDistance">出力される画像コーナー間の許容最低距離（ユークリッド距離を用いる）</param>
            <param name="mask">注目領域（ROI）．指定された領域またはmask が null の場合は画像全体から点を選ぶ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32)">
            <summary>
            画像中から大きな固有値を持つコーナーを検出する．
            </summary>
            <param name="image">8ビット，または32ビット浮動小数点型シングルチャンネルの入力画像</param>
            <param name="eigImage">32ビット浮動小数点型のテンポラリ画像．サイズは image と同じである</param>
            <param name="tempImage">別のテンポラリ画像．サイズ・フォーマットともに eig_image と同じである</param>
            <param name="corners">出力パラメータ．検出されたコーナー</param>
            <param name="cornerCount">出力パラメータ．検出されたコーナーの数</param>
            <param name="qualityLevel">最大・最小の固有値に乗ずる定数（検出される画像コーナの許容最低品質を指定する）</param>
            <param name="minDistance">出力される画像コーナー間の許容最低距離（ユークリッド距離を用いる）</param>
            <param name="mask">注目領域（ROI）．指定された領域またはmask が null の場合は画像全体から点を選ぶ</param>
            <param name="blockSize">平均化ブロックのサイズ．この関数で内部的に用いられる cvCornerMinEigenVal あるいは， cvCornerHarris に，この引数が渡される.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32,System.Boolean)">
            <summary>
            画像中から大きな固有値を持つコーナーを検出する．
            </summary>
            <param name="image">8ビット，または32ビット浮動小数点型シングルチャンネルの入力画像</param>
            <param name="eigImage">32ビット浮動小数点型のテンポラリ画像．サイズは image と同じである</param>
            <param name="tempImage">別のテンポラリ画像．サイズ・フォーマットともに eig_image と同じである</param>
            <param name="corners">出力パラメータ．検出されたコーナー</param>
            <param name="cornerCount">出力パラメータ．検出されたコーナーの数</param>
            <param name="qualityLevel">最大・最小の固有値に乗ずる定数（検出される画像コーナの許容最低品質を指定する）</param>
            <param name="minDistance">出力される画像コーナー間の許容最低距離（ユークリッド距離を用いる）</param>
            <param name="mask">注目領域（ROI）．指定された領域またはmask が null の場合は画像全体から点を選ぶ</param>
            <param name="blockSize">平均化ブロックのサイズ．この関数で内部的に用いられる cvCornerMinEigenVal あるいは， cvCornerHarris に，この引数が渡される.</param>
            <param name="useHarris">trueの場合は，デフォルトの cvCornerMinEigenVal の代わりに，Harris検出器（cvCornerHarris）を用いる</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GoodFeaturesToTrack(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f[]@,System.Int32@,System.Double,System.Double,OpenCvSharp.CvArr,System.Int32,System.Boolean,System.Double)">
            <summary>
            画像中から大きな固有値を持つコーナーを検出する．
            </summary>
            <param name="image">8ビット，または32ビット浮動小数点型シングルチャンネルの入力画像</param>
            <param name="eigImage">32ビット浮動小数点型のテンポラリ画像．サイズは image と同じである</param>
            <param name="tempImage">別のテンポラリ画像．サイズ・フォーマットともに eig_image と同じである</param>
            <param name="corners">出力パラメータ．検出されたコーナー</param>
            <param name="cornerCount">出力パラメータ．検出されたコーナーの数</param>
            <param name="qualityLevel">最大・最小の固有値に乗ずる定数（検出される画像コーナの許容最低品質を指定する）</param>
            <param name="minDistance">出力される画像コーナー間の許容最低距離（ユークリッド距離を用いる）</param>
            <param name="mask">注目領域（ROI）．指定された領域またはmask が null の場合は画像全体から点を選ぶ</param>
            <param name="blockSize">平均化ブロックのサイズ．この関数で内部的に用いられる cvCornerMinEigenVal あるいは， cvCornerHarris に，この引数が渡される.</param>
            <param name="useHarris">trueの場合は，デフォルトの cvCornerMinEigenVal の代わりに，Harris検出器（cvCornerHarris）を用いる</param>
            <param name="k">Harris検出器のパラメータ（use_harris==true のときのみ使用）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.GrabFrame(OpenCvSharp.CvCapture)">
            <summary>
            カメラやファイルからフレームを取り出す．取り出されたフレームは内部的に保存される．
            取り出されたフレームをユーザ側で利用するためには，cvRetrieveFrame を用いるべきである．
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph)">
            <summary>
            グラフに頂点を追加する
            </summary>
            <param name="graph">グラフ</param>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフに頂点を追加する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">追加される頂点の初期化に使用される，オプションの入力引数（sizeof(CvGraphVtx)の領域を超えたユーザー定義フィールドのみコピーされる）． </param>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddVtx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx@)">
            <summary>
            グラフに頂点を追加する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">追加される頂点の初期化に使用される，オプションの入力引数（sizeof(CvGraphVtx)の領域を超えたユーザー定義フィールドのみコピーされる）． </param>
            <param name="insertedVtx">新しい頂点のアドレスがここに書かれる．</param>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <param name="edge">オプションの入力パラメータ．辺の初期化のためのデータ． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <param name="edge">オプションの入力パラメータ．辺の初期化のためのデータ． </param>
            <param name="insertedEdge">入力された辺のアドレスを保存するための，オプションの出力パラメータ． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <param name="edge">オプションの入力パラメータ，辺の初期化データ．</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphAddEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="graph"></param>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <param name="edge">オプションの入力パラメータ，辺の初期化データ．</param>
            <param name="insertedEdge">辺の集合の中で入力された辺のアドレスを保存するための，オプションの出力パラメータ．</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphEdgeIdx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフの辺のインデックスを返す
            </summary>
            <param name="graph">グラフ</param>
            <param name="edge">辺への参照</param>
            <returns>グラフの辺のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphGetEdgeCount(OpenCvSharp.CvGraph)">
            <summary>
            Returns count of edges
            </summary>
            <param name="graph">グラフ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphGetVtxCount(OpenCvSharp.CvGraph)">
            <summary>
            Returns count of vertex
            </summary>
            <param name="graph">グラフ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveEdge(OpenCvSharp.CvGraph,System.Int32,System.Int32)">
            <summary>
            グラフから辺を削除する（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveEdgeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を削除する（ポインタ指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="startVtx">辺の始点を示す頂点へのポインタ．</param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveVtx(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            グラフから頂点を削除する（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="index">削除される頂点のインデックス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphRemoveVtxByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから頂点を削除する（ポインタ指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">削除される頂点へのポインタ</param>
            <returns>削除された辺の数，あるいは頂点がグラフに存在しない場合は-1</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxDegree(OpenCvSharp.CvGraph,System.Int32)">
            <summary>
            頂点に接続している辺の数を数える（インデックス指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtxIdx">頂点のインデックス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxDegreeByPtr(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            頂点に接続している辺の数を数える（ポインタ指定）
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">頂点へのポインタ</param>
            <returns>指定した頂点に接続した（入る/出る両方向の）辺の数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.GraphVtxIdx(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフ頂点のインデックスを返す
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">グラフ頂点への参照</param>
            <returns>グラフ頂点のインデックスを返す</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenDecomposite(OpenCvSharp.IplImage,OpenCvSharp.IplImage[],OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクトのすべての分解係数を計算する. (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="obj">入力オブジェクト.</param>
            <param name="eigInput">IplImage 型の入力オブジェクトの配列.</param>
            <param name="avg">平均オブジェクト.</param>
            <param name="coeffs">計算された係数; 出力パラメータ.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenDecomposite(OpenCvSharp.IplImage,System.Int32,OpenCvSharp.CvCallback,OpenCvSharp.EigenObjectsIOFlag,System.IntPtr,OpenCvSharp.IplImage,System.Single[])">
            <summary>
            入力オブジェクトのすべての分解係数を計算する.
            </summary>
            <param name="obj">入力オブジェクト</param>
            <param name="eigenvecCount">固有オブジェクトの個数.</param>
            <param name="eigInput">読み込みコールバック関数.</param>
            <param name="ioFlags">入出力フラグ.</param>
            <param name="userData">コールバック関数に必要なすべてのデータを含む構造体へのポインタ.</param>
            <param name="avg">平均オブジェクト.</param>
            <param name="coeffs">計算された係数; 出力パラメータ.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenProjection(OpenCvSharp.IplImage[],System.Int32,System.Single[],OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            オブジェクトの固有部分空間への投影を計算する (ioFlags = CV_EIGOBJ_NO_CALLBACK)
            </summary>
            <param name="inputVecs">IplImage 型の入力オブジェクトの配列</param>
            <param name="eigenvecCount">固有ベクトルの個数． </param>
            <param name="coeffs">事前に計算された分解係数． </param>
            <param name="avg">cvCalcEigenObjects  によって計算された平均ベクトル．</param>
            <param name="proj">固有部分空間への投影．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenProjection(OpenCvSharp.CvCallback,System.Int32,OpenCvSharp.EigenObjectsIOFlag,System.IntPtr,System.Single[],OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            オブジェクトの固有部分空間への投影を計算する
            </summary>
            <param name="inputVecs">コールバック関数</param>
            <param name="eigenvecCount">固有ベクトルの個数． </param>
            <param name="ioFlags">入出力フラグ.</param>
            <param name="userdata">コールバック関数に必要なすべてのデータを含む構造体へのポインタ．</param>
            <param name="coeffs">事前に計算された分解係数． </param>
            <param name="avg">cvCalcEigenObjects  によって計算された平均ベクトル．</param>
            <param name="proj">固有部分空間への投影．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="mat">入力対称正方行列．処理中に変更される．</param>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="mat">入力対称正方行列．処理中に変更される．</param>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
            <param name="eps">対角化の精度（一般的に，DBL_EPSILON=≈10^-15 で十分である）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="mat">入力対称正方行列．処理中に変更される．</param>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
            <param name="eps">対角化の精度（一般的に，DBL_EPSILON=≈10^-15 で十分である）</param>
            <param name="lowindex">求める最大の固有値/固有ベクトルのインデックス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EigenVV(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Int32,System.Int32)">
            <summary>
            対称行列の固有値と固有ベクトルを計算する
            </summary>
            <param name="mat">入力対称正方行列．処理中に変更される．</param>
            <param name="evects">固有ベクトルの出力行列．連続した行として保存される． </param>
            <param name="evals">固有値ベクトルの出力ベクトル．降順に保存される（もちろん固有値と固有ベクトルの順番は一致する）．</param>
            <param name="eps">対角化の精度（一般的に，DBL_EPSILON=≈10^-15 で十分である）</param>
            <param name="lowindex">求める最大の固有値/固有ベクトルのインデックス</param>
            <param name="highindex">求める最小の固有値/固有ベクトルのインデックス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
            <param name="shift">中心座標と軸の長さの小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawEllipse(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Double,System.Double,System.Double,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，楕円弧，もしくは塗りつぶされた扇形の楕円を描画する
            </summary>
            <param name="img">楕円が描画される画像</param>
            <param name="center">楕円の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">回転角度</param>
            <param name="startAngle">楕円弧の開始角度</param>
            <param name="endAngle">楕円弧の終了角度</param>
            <param name="color">楕円の色</param>
            <param name="thickness">楕円弧の線の幅</param>
            <param name="lineType">楕円弧の線の種類</param>
            <param name="shift">中心座標と軸の長さの小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="img">楕円が描かれる画像．</param>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="img">楕円が描かれる画像．</param>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="img">楕円が描かれる画像．</param>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
            <param name="lineType">楕円境界線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EllipseBox(OpenCvSharp.CvArr,OpenCvSharp.CvBox2D,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠だけの楕円，もしくは塗りつぶされた楕円を描画する
            </summary>
            <param name="img">楕円が描かれる画像．</param>
            <param name="box">描画したい楕円を囲む矩形領域．</param>
            <param name="color">楕円の色．</param>
            <param name="thickness">楕円境界線の幅．</param>
            <param name="lineType">楕円境界線の種類．</param>
            <param name="shift">矩形領域の頂点座標の小数点以下の桁を表すビット数．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ellipse2Poly(OpenCvSharp.CvPoint,OpenCvSharp.CvSize,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            楕円弧をポリラインで近似する
            </summary>
            <param name="center">弧の中心</param>
            <param name="axes">楕円の軸の長さ</param>
            <param name="angle">楕円の回転角度</param>
            <param name="arcStart">楕円弧の開始角度</param>
            <param name="arcEnd">楕円弧の終了角度</param>
            <param name="pts">この関数で塗りつぶされる点の配列</param>
            <param name="delta">ポリラインの連続した頂点間の角度，近似精度．出力される点の総数は最大で ceil((end_angle - start_angle)/delta) + 1．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EncodeImage(System.String,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            画像をエンコードしてバイト列として出力する
            </summary>
            <param name="ext">出力形式として定義されているファイル拡張子</param>
            <param name="image">入力画像</param>
            <param name="prms">画像フォーマット固有の各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EncodeImage(System.String,OpenCvSharp.CvArr,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            画像をエンコードしてバイト列として出力する
            </summary>
            <param name="ext">出力形式として定義されているファイル拡張子</param>
            <param name="image">入力画像</param>
            <param name="prms">画像フォーマット固有の各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndFindContours(OpenCvSharp.CvContourScanner)">
            <summary>
            輪郭走査処理を終了する
            </summary>
            <param name="scanner">輪郭スキャナへのポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndWriteSeq(OpenCvSharp.CvSeqWriter)">
            <summary>
            シーケンス書き込み処理を終了する
            </summary>
            <param name="writer">ライタの状態． </param>
            <returns>書き込まれたシーケンスへのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EndWriteStruct(OpenCvSharp.CvFileStorage)">
            <summary>
            ファイルストレージへの構造体の書き込みを終了する．
            </summary>
            <param name="fs">ファイルストレージ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.EqualizeHist(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            グレースケール画像のヒストグラムを均一化する．輝度を均一化し，画像のコントラストを上げる．
            </summary>
            <param name="src">入力画像．8ビットシングルチャンネル． </param>
            <param name="dst">出力画像．srcと同じサイズ, 同じデータタイプ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="element">収縮に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Erode(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を収縮する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．収縮は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="element">収縮に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
            <param name="iterations">収縮の回数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Error(OpenCvSharp.CvStatus,System.String,System.String,System.String,System.Int32)">
            <summary>
            エラーを発生させる
            </summary>
            <param name="status">エラーステータス</param>
            <param name="funcName">エラーが発生した関数名</param>
            <param name="errMsg">エラーについての追加情報/診断結果</param>
            <param name="fileName">エラーが発生したファイル名</param>
            <param name="line">エラーが発生した行番号</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ErrorStr(OpenCvSharp.CvStatus)">
            <summary>
            エラーステータスのコードのテキスト情報を返す
            </summary>
            <param name="status">エラーステータス</param>
            <returns>指定したエラーステータスコードのテキスト記述</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.EstimateRigidTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Boolean)">
            <summary>
            Estimate rigid transformation between 2 images or 2 point sets
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="m"></param>
            <param name="fullAffine"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Exp(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            すべての配列要素について自然対数の底（ネイピア数）eのべき乗を求める
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．倍精度の浮動小数点型（double），または入力配列と同じタイプでなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractMSER(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvContour[]@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvMSERParams)">
            <summary>
            MSERのすべての輪郭情報を抽出する
            </summary>
            <param name="img"></param>
            <param name="mask"></param>
            <param name="contours"></param>
            <param name="storage"></param>
            <param name="params"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.IntPtr}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="image">8ビット，グレースケールの入力画像． </param>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="storage">キーポイントとディスクリプタが格納されるメモリストレージ</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvSURFPoint}@,OpenCvSharp.CvSeq{System.IntPtr}@,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSURFParams,System.Boolean)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="image">8ビット，グレースケールの入力画像． </param>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="storage">キーポイントとディスクリプタが格納されるメモリストレージ</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
            <param name="useProvidedKeyPts">If useProvidedKeyPts!=0, keypoints are not detected, but descriptors are computed at the locations provided in keypoints (a CvSeq of CvSURFPoint).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSURFPoint[]@,System.Single[][]@,OpenCvSharp.CvSURFParams)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="image">8ビット，グレースケールの入力画像． </param>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ExtractSURF(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvSURFPoint[]@,System.Single[][]@,OpenCvSharp.CvSURFParams,System.Boolean)">
            <summary>
            画像中からSURF（Speeded Up Robust Features）を検出する
            </summary>
            <param name="image">8ビット，グレースケールの入力画像． </param>
            <param name="mask">オプション：8ビットのマスク画像．非0 のマスクピクセルが50%以上を占める領域からのみ，特徴点検出を行う．</param>
            <param name="keypoints">出力パラメータ．キーポイントのシーケンスへのポインタのポインタ． これは，CvSURFPoint 構造体のシーケンスになる</param>
            <param name="descriptors">オプション：出力パラメータ．ディスクリプタのシーケンスへのポインタのポインタ． シーケンスの各要素は，params.extended の値に依存して， 64-要素，あるいは 128-要素の浮動小数点数（CV_32F）ベクトルとなる． パラメータが NULL の場合，ディスクリプタは計算されない．</param>
            <param name="param">CvSURFParams 構造体に入れられた，様々なアルゴリズムパラメータ</param>
            <param name="useProvidedKeyPts">If useProvidedKeyPts!=0, keypoints are not detected, but descriptors are computed at the locations provided in keypoints (a CvSeq of CvSURFPoint).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.IncRefData(OpenCvSharp.CvArr)">
            <summary>
            参照カウンタポインタが null ではない場合に， CvMat あるいは CvMatND のデータの参照カウンタをインクリメントし，新たなカウンタ値を返す．
            そうでない場合は 0 を返す． 
            </summary>
            <param name="arr">配列ヘッダ</param>
            <returns>新たなカウンタ値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFaceTracker(OpenCvSharp.IplImage,OpenCvSharp.CvRect[])">
            <summary>
            
            </summary>
            <param name="imgGray"></param>
            <param name="pRects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="font">この関数で初期化されるフォントクラス</param>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="font">この関数で初期化されるフォントクラス</param>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="font">この関数で初期化されるフォントクラス</param>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
            <param name="thickness">文字の太さ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitFont(OpenCvSharp.CvFont@,OpenCvSharp.FontFace,System.Double,System.Double,System.Double,System.Int32,OpenCvSharp.LineType)">
            <summary>
            文字描画関数に渡されるフォント構造体を初期化する
            </summary>
            <param name="font">この関数で初期化されるフォントクラス</param>
            <param name="fontFace">フォント名の識別子</param>
            <param name="hscale">幅の比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の幅で表示される． 0.5fにした場合, 文字は元々の半分の幅で表示される．</param>
            <param name="vscale">高さの比率．1.0fにした場合，文字はそれぞれのフォントに依存する元々の高さで表示される． 0.5fにした場合, 文字は元々の半分の高さで表示される．</param>
            <param name="shear">垂直線からの文字の相対的な角度．ゼロの場合は非イタリックフォントで，例えば，1.0fは≈45°を意味する．</param>
            <param name="thickness">文字の太さ．</param>
            <param name="lineType">線の種類．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す
            </summary>
            <param name="image">初期化される画像ヘッダ</param>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す
            </summary>
            <param name="image">初期化される画像ヘッダ</param>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <param name="origin">初期化される画像ヘッダ</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitImageHeader(OpenCvSharp.IplImage@,OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin,System.Int32)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す
            </summary>
            <param name="image">初期化される画像ヘッダ</param>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <param name="origin">初期化される画像ヘッダ</param>
            <param name="align">画像の行のアライメント，通常は4，あるいは 8 バイト．</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitIntrinsicParams2D(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat)">
            <summary>
            3次元-2次元の対応点から，カメラの内部パラメータ行列を求めます
            </summary>
            <param name="objectPoints">物体上の座標点が結合された配列</param>
            <param name="imagePoints">物体上の座標の投影点が結合された配列</param>
            <param name="npoints">点の個数の配列</param>
            <param name="imageSize">ピクセル単位で表された画像サイズ．主点を初期化するために利用されます</param>
            <param name="cameraMatrix">出力されるカメラ行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitIntrinsicParams2D(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,System.Double)">
            <summary>
            3次元-2次元の対応点から，カメラの内部パラメータ行列を求めます
            </summary>
            <param name="objectPoints">物体上の座標点が結合された配列</param>
            <param name="imagePoints">物体上の座標の投影点が結合された配列</param>
            <param name="npoints">点の個数の配列</param>
            <param name="imageSize">ピクセル単位で表された画像サイズ．主点を初期化するために利用されます</param>
            <param name="cameraMatrix">出力されるカメラ行列</param>
            <param name="aspectRatio">これが0以下の場合， f_x と f_y は独立に推定されます．そうでない場合， f_x = f_y * aspectRatio となります</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <param name="lineIterator">ラインイテレータ状態構造体へのポインタ</param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@,OpenCvSharp.PixelConnectivity)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <param name="lineIterator">ラインイテレータ状態構造体へのポインタ</param>
            <param name="connectivity">走査した線分の接続性．4または8</param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitLineIterator(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvLineIterator@,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <param name="lineIterator">ラインイテレータ状態構造体へのポインタ</param>
            <param name="connectivity">走査した線分の接続性．4または8</param>
            <param name="leftToRight">pt1とpt2とは無関係に線分をいつも左から右に走査する(true)か， pt1からpt2への決まった方向で走査するか(false)を指定するフラグ. </param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <param name="mat">初期化する行列のヘッダへの参照</param>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader``1(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">初期化する行列のヘッダへの参照</param>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <param name="data">行列のヘッダで指定されるデータ配列. 長さがrows*cols*channelsの1次元配列を指定する.</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatHeader``1(OpenCvSharp.CvMat,System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[],System.Int32)">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">初期化する行列のヘッダへの参照</param>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <param name="data">行列のヘッダで指定されるデータ配列. 長さがrows*cols*channelsの1次元配列を指定する.</param>
            <param name="step">割り当てられたデータの行長をバイト単位で表す．デフォルトでは，stepには可能な限り小さい値が用いられる．つまり，行列の連続する行間にギャップが存在しない．</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatNDHeader(OpenCvSharp.CvMatND,System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            多次元配列のヘッダを初期化する
            </summary>
            <param name="mat">初期化する配列のヘッダ</param>
            <param name="dims">配列の次元数</param>
            <param name="sizes">次元サイズの配列</param>
            <param name="type">配列要素の種類</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitMatNDHeader``1(OpenCvSharp.CvMatND,System.Int32,System.Int32[],OpenCvSharp.MatrixType,``0[])">
            <summary>
            多次元配列のヘッダを初期化する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat">初期化する配列のヘッダ</param>
            <param name="dims">配列の次元数</param>
            <param name="sizes">次元サイズの配列</param>
            <param name="type">配列要素の種類</param>
            <param name="data">行列のヘッダで指定されるデータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitSparseMatIterator(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMatIterator@)">
            <summary>
            疎な配列要素のイテレータを初期化する
            </summary>
            <param name="mat">入力配列</param>
            <param name="matIterator">初期化されるイテレータ</param>
            <returns>疎な配列の先頭要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InitSubdivDelaunay2D(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvRect)">
            <summary>
            CvSubdiv2Dの初期化
            </summary>
            <param name="subdiv"></param>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitTreeNodeIterator``1(OpenCvSharp.CvTreeNodeIterator@,OpenCvSharp.CvTreeNode{``0},System.Int32)">
            <summary>
            ツリーノードのイテレータを初期化する
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <param name="first">先頭ノード．ここから走査を開始する．</param>
            <param name="maxLevel">ツリー走査範囲の最大レベル（first ノードが第1レベルであると仮定する）．
            例えば，1 はfirstと同じレベルのノードのみが処理されることを意味する， また，2はfirstと同じレベルのノードとその子ノードが処理される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitUndistortMap(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            事前に歪み補正マップ（補正画像のすべてのピクセルについて，それぞれ対応する歪み画像のピクセル座標値をもつマップ）を計算する．
            その後，マップは入力画像および出力画像と共に，関数 cvRemap に渡すことができる． 
            </summary>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数ベクトル．4x1 または 1x4 [k1, k2, p1, p2]. </param>
            <param name="mapx">補正マップのx座標の出力配列</param>
            <param name="mapy">補正マップのy座標の出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InitUndistortRectifyMap(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            ステレオカメラの歪み補正＋平行化の変換マップの計算を行う
            </summary>
            <param name="cameraMatrix">カメラ行列 A=[fx 0 cx; 0 fy cy; 0 0 1]． </param>
            <param name="distCoeffs">歪み係数のベクトル，4x1, 1x4, 5x1, 1x5． </param>
            <param name="R">オブジェクト空間における平行化変換（3x3 行列）． cvStereoRectify で計算された値， R1 あるいは R2 が渡される．このパラメータが null の場合，単位行列が用いられる． </param>
            <param name="newCameraMatrix">新しいカメラ行列 A'=[fx' 0 cx'; 0 fy' cy'; 0 0 1]． </param>
            <param name="mapx">出力配列．マップの x-座標．</param>
            <param name="mapy">出力配列．マップの y-座標．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Inpaint(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.InpaintMethod)">
            <summary>
            配列の要素値が他の二つの配列要素で表される範囲内に位置するかをチェックする
            </summary>
            <param name="src">入力画像（8ビット，1チャンネルあるいは3チャンネル）．</param>
            <param name="mask">修復マスク．8ビット，1チャンネル画像． 非0のピクセルが，修復の必要がある領域であることを示す．</param>
            <param name="dst">出力画像（入力画像と同じサイズ，同じタイプ）．</param>
            <param name="inpaintRange">修復されるピクセルの円状の隣接領域を示す半径</param>
            <param name="flags">修復方法</param>	
        </member>
        <member name="M:OpenCvSharp.Cv.InRange(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の要素値が他の二つの配列要素で表される範囲内に位置するかをチェックする
            </summary>
            <param name="src">入力配列</param>
            <param name="lower">下限値（その値を含む）を表す配列</param>
            <param name="upper">上限値（その値は含まない）を表す配列</param>
            <param name="dst">出力配列（タイプは8u または 8s）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InRangeS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の要素値が二つのスカラーの間に位置するかをチェックする
            </summary>
            <param name="src">入力配列</param>
            <param name="lower">下限値（その値を含む）</param>
            <param name="upper">上限値（その値は含まない）</param>
            <param name="dst">出力配列（タイプは8u または 8s）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.InsertNodeIntoTree``1(OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0})">
            <summary>
            ツリーに新しいノードを追加する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">挿入されるノード．</param>
            <param name="parent">ツリー内に既に存在している親ノード．</param>
            <param name="frame">トップレベルノード．parent と frame が同じである場合， nodeのv_prevフィールドには，parent ではなく，nullがセットされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="image">入力画像，W×H，8ビットあるいは浮動小数点(32fか64f)画像．</param>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="image">入力画像，W×H，8ビットあるいは浮動小数点(32fか64f)画像．</param>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
            <param name="sqsum">オプション：各ピクセル値を2乗したインテグラルイメージ，W+1×H+1，倍精度浮動小数点型（64f）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Integral(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            任意の矩形領域の画素値の総和を計算する
            </summary>
            <param name="image">入力画像，W×H，8ビットあるいは浮動小数点(32fか64f)画像．</param>
            <param name="sum">インテグラルイメージ（integral image），W+1×H+1，32ビット整数型あるいは倍精度浮動小数点型（64f）． </param>
            <param name="sqsum">オプション：各ピクセル値を2乗したインテグラルイメージ，W+1×H+1，倍精度浮動小数点型（64f）． </param>
            <param name="tiltedSum">オプション：45度回転させた入力画像のインテグラルイメージ，W+1×H+1，sumと同じデータフォーマット．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Invert(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            逆行列または擬似逆行列を求める.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Invert(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            逆行列または擬似逆行列を求める.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <param name="method">逆行列を求める手法</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Inv(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            逆行列または擬似逆行列を求める. Invertのエイリアス.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Inv(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            逆行列または擬似逆行列を求める. Invertのエイリアス.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <param name="method">逆行列を求める手法</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.InvSqrt(System.Single)">
            <summary>
            引数の平方根の逆数を計算する．
            これは，通常，1./sqrt(value)を計算するよりも高速である．
            引数が0または負の値のとき，結果は求まらない．また，特別な値（±Inf, NaN）は扱うことができない．
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IplDepth(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IsInf(System.Double)">
            <summary>
            引数が±無限大（IEEE754 standard に定義されている）であればtrueを返し，その他の場合はfalseを返す．
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IsNaN(System.Double)">
            <summary>
            引数が数値（IEEE754 standard に定義されている）でなければtrueを返し，その他の場合はfalseを返す．
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanCorrect(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            モデル状態を修正する. 修正された状態を kalman->state_post に保存し，これを出力として返す．
            </summary>
            <param name="kalman">更新されるカルマンフィルタ状態</param>
            <param name="measurement">観測ベクトルを含むCvMat</param>
            <returns>修正された状態を kalman->state_post に保存し，これを出力として返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByMeasurement(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            モデル状態を修正する. 修正された状態を kalman->state_post に保存し，これを出力として返す．cvKalmanCorrectのエイリアス.
            </summary>
            <param name="kalman">更新されるカルマンフィルタ状態</param>
            <param name="measurement">観測ベクトルを含むCvMat</param>
            <returns>修正された状態を kalman->state_post に保存し，これを出力として返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanPredict(OpenCvSharp.CvKalman)">
            <summary>
            次のモデル状態を推定する.
            </summary>
            <param name="kalman">カルマンフィルタ状態</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanPredict(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            次のモデル状態を推定する
            </summary>
            <param name="kalman">カルマンフィルタ状態</param>
            <param name="control">コントロールベクトル (uk)．外部コントロールが存在しない場合（control_params=0）に限り，null である．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByTime(OpenCvSharp.CvKalman)">
            <summary>
            次のモデル状態を推定する. cvKalmanPredictのエイリアス.
            </summary>
            <param name="kalman">カルマンフィルタ状態</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KalmanUpdateByTime(OpenCvSharp.CvKalman,OpenCvSharp.CvMat)">
            <summary>
            次のモデル状態を推定する. cvKalmanPredictのエイリアス.
            </summary>
            <param name="kalman">カルマンフィルタ状態</param>
            <param name="control">コントロールベクトル (uk)．外部コントロールが存在しない場合（control_params=0）に限り，null である．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvArr,OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr,System.Double@)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="centers"></param>
            <param name="compactness"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(System.Array,OpenCvSharp.MatrixType,System.Int32,System.Int32[],OpenCvSharp.CvTermCriteria)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="samplesType"></param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(System.Array,OpenCvSharp.MatrixType,System.Int32,System.Int32[],OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="samplesType"></param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(System.Array,OpenCvSharp.MatrixType,System.Int32,System.Int32[],OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="samplesType"></param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="centers"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.KMeans2(System.Array,OpenCvSharp.MatrixType,System.Int32,System.Int32[],OpenCvSharp.CvTermCriteria,System.Int32,OpenCvSharp.CvRNG,OpenCvSharp.KMeansFlag,OpenCvSharp.CvArr,System.Double@)">
            <summary>
            ベクトル集合を，与えられたクラスタ数に分割する.
            入力サンプルを各クラスタに分類するために cluster_count 個のクラスタの中心を求める k-means 法を実装する．
            出力 labels(i) は，配列 samples のi番目の行のサンプルが属するクラスタのインデックスを表す． 
            </summary>
            <param name="samples">浮動小数点型の入力サンプル行列．1行あたり一つのサンプル.</param>
            <param name="samplesType"></param>
            <param name="clusterCount">集合を分割するクラスタ数</param>
            <param name="labels">出力の整数ベクトル．すべてのサンプルについて，それぞれがどのクラスタに属しているかが保存されている.</param>
            <param name="termcrit">最大繰り返し数と(または)，精度（1ループでの各クラスタ中心位置移動距離）の指定</param>
            <param name="attemps"></param>
            <param name="rng"></param>
            <param name="flag"></param>
            <param name="centers"></param>
            <param name="compactness"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Laplace(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sobel演算子を用いて計算されたxとyの2次微分を加算することで，入力画像のラプラシアン（Laplacian）を計算する [aperture_size=3]
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Laplace(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            Sobel演算子を用いて計算されたxとyの2次微分を加算することで，入力画像のラプラシアン（Laplacian）を計算する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="apertureSize">拡張Sobelカーネルのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="detector"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage,System.Single)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="detector"></param>
            <param name="storage"></param>
            <param name="overlapThreshold"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LatentSvmDetectObjects(OpenCvSharp.IplImage,OpenCvSharp.CvLatentSvmDetector,OpenCvSharp.CvMemStorage,System.Single,System.Int32)">
            <summary>
            find rectangular regions in the given image that are likely 
            to contain objects and corresponding confidence levels
            </summary>
            <param name="image"></param>
            <param name="detector"></param>
            <param name="storage"></param>
            <param name="overlapThreshold"></param>
            <param name="numThreads"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Line(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">線分の1番目の端点x</param>
            <param name="pt1Y">線分の1番目の端点y</param>
            <param name="pt2X">線分の2番目の端点x</param>
            <param name="pt2Y">線分の2番目の端点y</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            2点を結ぶ線分を画像上に描画する．
            </summary>
            <param name="img">画像</param>
            <param name="pt1">線分の1番目の端点</param>
            <param name="pt2">線分の2番目の端点</param>
            <param name="color">線分の色</param>
            <param name="thickness">線分の太さ</param>
            <param name="lineType">線分の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LinearPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            Performs forward or inverse linear-polar image transform
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <param name="center"></param>
            <param name="maxRadius"></param>
            <param name="flags"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String)">
            <summary>
            オブジェクトをファイルから読み込む
            </summary>
            <typeparam name="T">読み込むオブジェクトの型</typeparam>
            <param name="filename">ファイル名</param>
            <returns>読み込んだオブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage)">
            <summary>
            オブジェクトをファイルから読み込む
            </summary>
            <typeparam name="T">読み込むオブジェクトの型</typeparam>
            <param name="filename">ファイル名</param>
            <param name="memstorage">CvSeqやCvGraph  などの動的構造体のためのメモリストレージ．行列や画像には用いられない．</param>
            <returns>読み込んだオブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage,System.String)">
            <summary>
            オブジェクトをファイルから読み込む
            </summary>
            <typeparam name="T">読み込むオブジェクトの型</typeparam>
            <param name="filename">ファイル名</param>
            <param name="memstorage">CvSeqやCvGraph  などの動的構造体のためのメモリストレージ．行列や画像には用いられない．</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，ファイルストレージにある最初のトップレベルオブジェクトが読み込まれる． </param>
            <returns>読み込んだオブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Load``1(System.String,OpenCvSharp.CvMemStorage,System.String,System.String@)">
            <summary>
            オブジェクトをファイルから読み込む
            </summary>
            <typeparam name="T">読み込むオブジェクトの型</typeparam>
            <param name="filename">ファイル名</param>
            <param name="memstorage">CvSeqやCvGraphなどの動的構造体のためのメモリストレージ．行列や画像には用いられない．</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，ファイルストレージにある最初のトップレベルオブジェクトが読み込まれる． </param>
            <param name="realName">読み込まれたオブジェクトの名前が代入される出力パラメータ（オプション）name=nullの場合に役立つ． </param>
            <returns>読み込んだオブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadHaarClassifierCascade(System.String,OpenCvSharp.CvSize)">
            <summary>
            ファイルまたはOpenCV 内に組み込まれた分類器データベースから，学習されたカスケード分類器を読み込む 
            </summary>
            <param name="directory">学習されたカスケード分類器の記述を含むディレクトリ名． </param>
            <param name="origWindowSize">オブジェクトのオリジナルサイズ（カスケード分類器はこのサイズに合わせて学習される）． これはカスケード分類器内に保存されないので，別に指定する必要がある事に注意． </param>
            <returns></returns>
            <remarks>この関数は，もはやサポートされない．現在では，オブジェクト検出分類器はディレクトリではなく XML/YAML ファイルに保存される． カスケードをファイルから読み込むためには，関数 cvLoad を用いる．</remarks>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImage(System.String)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照を返す
            </summary>
            <param name="filename">ファイル名</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImage(System.String,OpenCvSharp.LoadMode)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照を返す
            </summary>
            <param name="filename">ファイル名</param>
            <param name="flags">読み込む画像がカラー/グレースケールのどちらか，とビット深度を指定する</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImageM(System.String)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照をCvMat形式で返す
            </summary>
            <param name="filename">ファイル名</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadImageM(System.String,OpenCvSharp.LoadMode)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照をCvMat形式で返す
            </summary>
            <param name="filename">ファイル名</param>
            <param name="flags">読み込む画像がカラー/グレースケールのどちらか，とビット深度を指定する</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadLatentSvmDetector(System.String)">
            <summary>
            load trained detector from a file
            </summary>
            <param name="filename">Name of file to be loaded. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LoadWindowParameters(System.String)">
            <summary>
            ウィンドウのパラメータを読み込みます．
            </summary>
            <param name="name">ウィンドウの名前</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Log(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            すべての配列要素の絶対値の自然対数を計算する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．倍精度の浮動小数点型（double），または入力配列と同じタイプでなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            画像を対数極座標（Log-Polar）空間に再マッピングする.
            この関数は人間の網膜をモデル化したものであり，オブジェクトトラッキング等のための高速なスケーリングと，
            回転に不変なテンプレートマッチングに用いることができる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="center">出力精度が最大となるような変換の中心座標</param>
            <param name="M">スケーリング係数の大きさ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LogPolar(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Double,OpenCvSharp.Interpolation)">
            <summary>
            画像を対数極座標（Log-Polar）空間に再マッピングする. 
            この関数は人間の網膜をモデル化したものであり，オブジェクトトラッキング等のための高速なスケーリングと，
            回転に不変なテンプレートマッチングに用いることができる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="center">出力精度が最大となるような変換の中心座標</param>
            <param name="M">スケーリング係数の大きさ</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHAdd(OpenCvSharp.CvLSH,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="lsh"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHAdd(OpenCvSharp.CvLSH,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            Add vectors to the LSH structure, optionally returning indices.
            </summary>
            <param name="lsh"></param>
            <param name="data"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHQuery(OpenCvSharp.CvLSH,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            Query the LSH n times for at most k nearest points; data is n x d,
            indices and dist are n x k. At most emax stored points will be accessed. 
            </summary>
            <param name="lsh"></param>
            <param name="queryPoints"></param>
            <param name="indices"></param>
            <param name="dist"></param>
            <param name="k"></param>
            <param name="emax"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHRemove(OpenCvSharp.CvLSH,OpenCvSharp.CvMat)">
            <summary>
            Remove vectors from LSH, as addressed by given indices.
            </summary>
            <param name="lsh"></param>
            <param name="indices"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.LSHSize(OpenCvSharp.CvLSH)">
            <summary>
            Return the number of vectors in the LSH.
            </summary>
            <param name="lsh"></param>
            <returns>number of vectors</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）．</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）．</param>
            <param name="lut">要素数が256であるルックアップテーブル（出力配列と同じデプスでなければならない）．マルチチャンネルの入力/出力配列の場合，テーブルはシングルチャンネル（この場合すべてのチャンネル対して，同じテーブルを使う）か，入力/出力配列と同じチャンネル数でなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Byte[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int16[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Single[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.LUT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double[])">
            <summary>
            出力配列の各要素値をルックアップテーブルを用いて決定する．ルックアップテーブルが配列で指定できる簡易バージョン.
            </summary>
            <param name="src">入力配列（各要素は8ビットデータ）</param>
            <param name="dst">出力配列（任意のデプス，入力配列と同じチャンネル数）</param>
            <param name="lut">要素数が256であるルックアップテーブル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mahalanobis(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つのベクトルのマハラノビス距離を計算する
            </summary>
            <param name="vec1">1番目の1次元入力ベクトル．</param>
            <param name="vec2">2番目の1次元入力ベクトル．</param>
            <param name="mat">逆共変動行列．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mahalonobis(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つのベクトルのマハラノビス距離を計算する
            </summary>
            <param name="vec1">1番目の1次元入力ベクトル．</param>
            <param name="vec2">2番目の1次元入力ベクトル．</param>
            <param name="mat">逆共変動行列．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[])">
            <summary>
            
            </summary>
            <param name="dims"></param>
            <param name="sizes"></param>
            <param name="hist"></param>
            <param name="data"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[],System.Single[][])">
            <summary>
            
            </summary>
            <param name="dims"></param>
            <param name="sizes"></param>
            <param name="hist"></param>
            <param name="data"></param>
            <param name="ranges"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeHistHeaderForArray(System.Int32,System.Int32[],OpenCvSharp.CvHistogram,System.Single[],System.Single[][],System.Boolean)">
            <summary>
            
            </summary>
            <param name="dims"></param>
            <param name="sizes"></param>
            <param name="hist"></param>
            <param name="data"></param>
            <param name="ranges"></param>
            <param name="uniform"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeScanlines(System.Double[0:,0:],OpenCvSharp.CvSize,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32@)">
            <summary>
            基礎行列から二つのカメラ間のスキャンライン座標を計算する
            </summary>
            <param name="matrix">基礎行列</param>
            <param name="imgSize">画像のサイズ</param>
            <param name="scanlines1">第1画像の計算されたスキャンラインが格納される配列へのポインタ</param>
            <param name="scanlines2">第2画像の計算されたスキャンラインが格納される配列へのポインタ</param>
            <param name="lengths1">第1画像スキャンラインの長さ（ピクセル単位）が格納される配列へのポインタ</param>
            <param name="lengths2">第2画像スキャンラインの長さ（ピクセル単位）が格納される配列へのポインタ</param>
            <param name="lineCount">スキャンライン数を格納する変数へのポインタ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MakeSeqHeaderForArray``1(OpenCvSharp.SeqType,System.Int32,System.Int32,``0[],OpenCvSharp.CvSeq,OpenCvSharp.CvSeqBlock)">
            <summary>
            配列からシーケンスを生成する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seqType">生成するシーケンスのタイプ．</param>
            <param name="headerSize">シーケンスヘッダのサイズ．パラメータseqは，このヘッダと同じサイズか，これより大きい構造体へのポインタを指していなければならない．</param>
            <param name="elemSize">シーケンス要素のサイズ．</param>
            <param name="elements">シーケンスを構成する要素．</param>
            <param name="seq">シーケンスヘッダとして用いられるローカル変数へのポインタ． </param>
            <param name="block">単一シーケンスブロックのヘッダを示すローカル変数へのポインタ． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mat(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            行列ヘッダを初期化する（軽量版）
            </summary>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Mat``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            行列ヘッダを初期化する（軽量版）
            </summary>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <param name="data">行列のヘッダで指定されるデータ配列. 長さがrows*cols*channelsの1次元配列を指定する.</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchContourTrees(OpenCvSharp.CvContourTree,OpenCvSharp.CvContourTree,OpenCvSharp.ContourTreesMatchMethod,System.Double)">
            <summary>
            ツリー表現を使って2つの輪郭を比較する
            </summary>
            <param name="tree1">一つ目の輪郭の二分木.</param>
            <param name="tree2">二つ目の輪郭の二分木.</param>
            <param name="method">類似度．I1のみ利用可能．</param>
            <param name="threshold">類似度の閾値.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchShapes(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchShapesMethod)">
            <summary>
            二つの形状を比較する
            </summary>
            <param name="object1">1番目の輪郭，あるいはグレースケール画像．</param>
            <param name="object2">2番目の輪郭，あるいはグレースケール画像．</param>
            <param name="method">比較方法.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchShapes(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchShapesMethod,System.Double)">
            <summary>
            二つの形状を比較する
            </summary>
            <param name="object1">1番目の輪郭，あるいはグレースケール画像．</param>
            <param name="object2">2番目の輪郭，あるいはグレースケール画像．</param>
            <param name="method">比較方法.</param>
            <param name="parameter">それぞれの比較手法特有のパラメータ（現在未使用）.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MatchTemplate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MatchTemplateMethod)">
            <summary>
            テンプレートと重なった画像領域を比較する. 
            templを，image全体に対してスライドさせ，それとサイズ w×h で重なる領域とを指定された方法で比較し，その結果を result に保存する． 
            </summary>
            <param name="image">テンプレートマッチングを行う画像． 8ビットか32ビット浮動小数点型でなければならない．</param>
            <param name="templ">探索用テンプレート．画像より大きくてはならない，かつ画像と同じタイプである必要がある． </param>
            <param name="result">比較結果のマップ．シングルチャンネルの32ビット浮動小数点型データ．image が W×H で templ が w×h ならば， result は W-w+1×H-h+1のサイズが必要． </param>
            <param name="method">テンプレートマッチングの方法（以下を参照）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Max(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の各要素についての最大値を求める. 
            dst(I)=max(src1(I), src2(I)) 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MaxRect(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.MaxS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーについての最大値を求める. 
            dst(I)=max(src(I), value) 
            </summary>
            <param name="src">入力配列</param>
            <param name="value">スカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MeanShift(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvTermCriteria,OpenCvSharp.CvConnectedComp)">
            <summary>
            バックプロジェクションでのオブジェクトの中心を検出する
            </summary>
            <param name="probImage">オブジェクトヒストグラムのバックプロジェクション</param>
            <param name="window">初期探索ウィンドウ</param>
            <param name="criteria">ウィンドウ探索を終了するための条件</param>
            <param name="comp">結果として得られる構造体．収束した探索ウィンドウの座標（comp->rect フィールド），および ウィンドウ内の全ピクセルの合計値（comp->area フィールド）が含まれる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MemStorageAlloc(OpenCvSharp.CvMemStorage,System.UInt32)">
            <summary>
            ストレージ内にメモリバッファを確保する
            </summary>
            <param name="storage">ストレージへの参照</param>
            <param name="size">バッファサイズ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MemStorageAllocString(OpenCvSharp.CvMemStorage,System.String)">
            <summary>
            ストレージ内にテキスト文字列を確保する
            </summary>
            <param name="storage">メモリストレージ</param>
            <param name="str">文字列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Merge(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            複数のシングルチャンネルの配列からマルチチャンネル配列を構成する．または，配列に一つのシングルチャンネルを挿入する
            </summary>
            <param name="src0">入力配列1</param>
            <param name="src1">入力配列2</param>
            <param name="src2">入力配列3</param>
            <param name="src3">入力配列4</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtPlaneToPix(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            複数のシングルチャンネルの配列からマルチチャンネル配列を構成する．または，配列に一つのシングルチャンネルを挿入する
            </summary>
            <param name="src0">入力配列1</param>
            <param name="src1">入力配列2</param>
            <param name="src2">入力配列3</param>
            <param name="src3">入力配列4</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.mGet(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            シングルチャンネル浮動小数点型行列の特定の要素を返す. cvGetReal2Dの高速化版関数である．
            </summary>
            <param name="mat">入力行列</param>
            <param name="row">行の0を基準としたインデックス</param>
            <param name="col">列の0を基準としたインデックス</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Min(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の各要素についての最小値を求める. 
            dst(I)=min(src1(I), src2(I)) 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinMaxLoc(OpenCvSharp.CvArr,System.Double@,System.Double@,OpenCvSharp.CvPoint@,OpenCvSharp.CvPoint@,OpenCvSharp.CvArr)">
            <summary>
            配列あるいは部分配列内の最小値と最大値を求める
            </summary>
            <param name="arr">入力配列（シングルチャンネルまたはCOIがセットされたマルチチャンネル）</param>
            <param name="minVal">戻り値の最小値</param>
            <param name="maxVal">戻り値の最大値</param>
            <param name="minLoc">戻り値の最小値を持つ位置</param>
            <param name="maxLoc">戻り値の最大値を持つ位置</param>
            <param name="mask">部分配列を指定するためのオプションのマスク</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MinAreaRect2(OpenCvSharp.CvArr)">
            <summary>
            与えられた2次元の点列を囲む最小矩形を求める
            </summary>
            <param name="points">点のシーケンスまたは配列</param>
            <returns>2次元の点列に対する最小矩形</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MinAreaRect2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            与えられた2次元の点列を囲む最小矩形を求める
            </summary>
            <param name="points">点のシーケンスまたは配列</param>
            <param name="storage">一時的なメモリストレージ</param>
            <returns>2次元の点列に対する最小矩形</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MinEnclosingCircle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            与えられた2次元の点列を囲む最小円を求める
            </summary>
            <param name="points">2次元の点のシーケンスまたは配列．</param>
            <param name="center">出力パラメータ．囲む円の中心．</param>
            <param name="radius">出力パラメータ．囲む円の半径．</param>
            <returns>結果の円が全ての入力点を含む場合はtrueを返し， それ以外（すなわちアルゴリズムの失敗）の場合はfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MinEnclosingCircle(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint},OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            与えられた2次元の点列を囲む最小円を求める
            </summary>
            <param name="points">2次元の点のシーケンスまたは配列．</param>
            <param name="center">出力パラメータ．囲む円の中心．</param>
            <param name="radius">出力パラメータ．囲む円の半径．</param>
            <returns>結果の円が全ての入力点を含む場合はtrueを返し， それ以外（すなわちアルゴリズムの失敗）の場合はfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MinEnclosingCircle(System.Collections.Generic.IEnumerable{OpenCvSharp.CvPoint2D32f},OpenCvSharp.CvPoint2D32f@,System.Single@)">
            <summary>
            与えられた2次元の点列を囲む最小円を求める
            </summary>
            <param name="points">2次元の点のシーケンスまたは配列．</param>
            <param name="center">出力パラメータ．囲む円の中心．</param>
            <param name="radius">出力パラメータ．囲む円の半径．</param>
            <returns>結果の円が全ての入力点を含む場合はtrueを返し， それ以外（すなわちアルゴリズムの失敗）の場合はfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MinS(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーについての最小値を求める. 
            dst(I)=min(src(I), value) 
            </summary>
            <param name="src">入力配列</param>
            <param name="value">スカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MixChannels(OpenCvSharp.CvArr[],OpenCvSharp.CvArr[],System.Int32[])">
            <summary>
            入力配列のチャンネルを出力配列の指定されたチャンネルにコピーする
            </summary>
            <param name="src">入力配列の配列</param>
            <param name="dst">出力配列の配列</param>
            <param name="fromTo">コピーされる平面（チャンネル）のインデックスのペア配列． from_to[k*2]は入力平面の0を基準としたインデックスで，from_to[k*2+1]は出力平面のインデックス．ここで，入力及び出力配列すべてについて，各平面への連続的な番号付けが行われる．from_to[k*2]が負のとき，対応する出力平面は0で埋められる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Moments(OpenCvSharp.CvArr,OpenCvSharp.CvMoments@,System.Boolean)">
            <summary>
            ポリゴンまたはラスタ形状の３次までのモーメントを計算する
            </summary>
            <param name="image">画像（1チャンネル，あるいはCOIをもつ3チャンネル画像） あるいはポリゴン （CvSeqで表される点群，または点のベクトル）．</param>
            <param name="moments">画像モーメントを表す構造体への参照</param>
            <param name="isBinary">（画像の場合のみ）このフラグがtrueの場合，値0のピクセルは0として，その他のピクセル値は1として扱われる． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.MorphologyEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,OpenCvSharp.MorphologyOperation)">
            <summary>
            高度なモルフォロジー変換を実行する [iterations=1].
            基本の演算として収縮と膨張を（組み合わせて）用いる高度なモルフォロジー変換を行うことができる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="temp">テンポラリ画像（いくつかの処理で必要とされる）</param>
            <param name="element">構造要素</param>
            <param name="operation">モルフォロジー演算の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MorphologyEx(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,OpenCvSharp.MorphologyOperation,System.Int32)">
            <summary>
            高度なモルフォロジー変換を実行する.
            基本の演算として収縮と膨張を（組み合わせて）用いる高度なモルフォロジー変換を行うことができる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="temp">テンポラリ画像（いくつかの処理で必要とされる）</param>
            <param name="element">構造要素</param>
            <param name="operation">モルフォロジー演算の種類</param>
            <param name="iterations">収縮と膨張の繰り返し回数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MoveWindow(System.String,System.Int32,System.Int32)">
            <summary>
            ウィンドウの位置を変更する
            </summary>
            <param name="name">位置を変更するウィンドウの名前</param>
            <param name="x">左上のコーナーの新しい x 座標</param>
            <param name="y">左上のコーナーの新しい y 座標</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams">
            <summary>
            MSERのパラメータを生成する
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.MSERParams(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            MSERのパラメータを生成する
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="minArea">prune the area which smaller than min_area</param>
            <param name="maxArea">prune the area which bigger than max_area</param>
            <param name="maxVariation">prune the area have simliar size to its children</param>
            <param name="minDiversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="maxEvolution">for color image, the evolution steps</param>
            <param name="areaThreshold">the area threshold to cause re-initialize</param>
            <param name="minMargin">ignore too small margin</param>
            <param name="edgeBlurSize">the aperture size for edge blur</param>
        </member>
        <member name="M:OpenCvSharp.Cv.mSet(OpenCvSharp.CvMat,System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの浮動小数点型行列の特定の要素の値を変更する.cvSetReal2Dの高速化版関数である．
            </summary>
            <param name="mat">入力行列</param>
            <param name="row">行の0を基準としたインデックス</param>
            <param name="col">列の0を基準としたインデックス</param>
            <param name="value">行列の要素の新しい値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素同士を乗算する (scale=1).
            dst(I) = scale * src1(I) * src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Mul(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            二つの配列の要素同士を乗算する.
            dst(I) = scale * src1(I) * src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">任意のスケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulSpectrums(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.MulSpectrumsFlag)">
            <summary>
            二つのフーリエスペクトラムの要素ごとの乗算を行う
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">入力配列と同じタイプ・サイズの出力配列</param>
            <param name="flags">処理フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MultiplyAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに二つの入力画像の積を加算する
            </summary>
            <param name="image1">1番目の入力画像，1 または 3 チャンネル，8 ビットあるいは 32 ビッ ト浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="image2">2番目の入力画像．1番目画像と同様のフォーマット.</param>
            <param name="acc">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MultiplyAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに二つの入力画像の積を加算する
            </summary>
            <param name="image1">1番目の入力画像，1 または 3 チャンネル，8 ビットあるいは 32 ビッ ト浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="image2">2番目の入力画像．1番目画像と同様のフォーマット.</param>
            <param name="acc">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型.</param>
            <param name="mask">オプションの処理マスク.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            行列と転置行列の乗算を行う
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <param name="order">転置した行列をかける順番を示すフラグ. falseの場合, dst=(src-delta)*(src-delta)^T, trueの場合, dst=(src-delta)^T*(src-delta)</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            行列と転置行列の乗算を行う
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <param name="order">転置した行列をかける順番を示すフラグ. falseの場合, dst=(src-delta)*(src-delta)^T, trueの場合, dst=(src-delta)^T*(src-delta)</param>
            <param name="delta">オプション配列，乗算する前にsrcから引かれる.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulTransposed(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr,System.Double)">
            <summary>
            行列と転置行列の乗算を行う
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
            <param name="order">転置した行列をかける順番を示すフラグ. falseの場合, dst=(src-delta)*(src-delta)^T, trueの場合, dst=(src-delta)^T*(src-delta)</param>
            <param name="delta">オプション配列，乗算する前にsrcから引かれる.</param>
            <param name="scale"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.NamedWindow(System.String)">
            <summary>
            画像とトラックバーのプレースホルダとして利用されるウィンドウを作成する．
            このウィンドウは，その名前によって参照される．
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NamedWindow(System.String,OpenCvSharp.WindowMode)">
            <summary>
            画像とトラックバーのプレースホルダとして利用されるウィンドウを作成する．
            このウィンドウは，その名前によって参照される．
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される</param>
            <param name="flags">ウィンドウのフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextGraphItem(OpenCvSharp.CvGraphScanner)">
            <summary>
            グラフ走査処理を1ステップ，あるいは数ステップ進める
            </summary>
            <param name="scanner">グラフ走査状態．この関数で更新される． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextLinePoint(OpenCvSharp.CvLineIterator)">
            <summary>
            
            </summary>
            <param name="lineIterator"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode``1(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NextTreeNode``1(OpenCvSharp.CvTreeNodeIterator{``0})">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr)">
            <summary>
            配列の絶対値ノルム（absolute array norm）を計算する
            </summary>
            <param name="arr1">1番目の入力画像</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr1">1番目の入力画像</param>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.NormType)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr1">1番目の入力画像</param>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <param name="normType">ノルムのタイプ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Norm(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            配列の絶対値ノルム（absolute array norm），絶対値差分ノルム（absolute difference norm），相対値差分ノルム（relative difference norm）を計算する
            </summary>
            <param name="arr1">1番目の入力画像</param>
            <param name="arr2">2番目の入力画像．null の場合，arr1の絶対値ノルムが計算され，そうでない場合は，arr1-arr2 の絶対値あるいは相対値ノルムが計算される． </param>
            <param name="normType">ノルムのタイプ</param>
            <param name="mask">オプションの処理マスク</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．インプレース処理が可能．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
            <param name="normType">正規化のタイプ. C, L1, L2, MinMaxのうち1つ.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Normalize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.NormType,OpenCvSharp.CvArr)">
            <summary>
            指定のノルムになるように，あるいは値が指定の範囲になるように，配列を正規化する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．インプレース処理が可能．</param>
            <param name="a">出力配列の最小値または最大値，あるいは出力配列のノルム．</param>
            <param name="b">出力配列の最大値または最小値．</param>
            <param name="normType">正規化のタイプ. C, L1, L2, MinMaxのうち1つ.</param>
            <param name="mask">操作マスク．特定の配列要素のみを正規化するためのマスク．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.NormalizeHist(OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            ヒストグラムの正規化を行う.
            ビンの値の合計が factor に等しくなるようにスケーリングする事で，ヒストグラムのビンを正規化する．
            </summary>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="factor">正規化係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Not(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            各配列要素のビット単位の反転を行う
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.OpenFileStorage(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode)">
            <summary>
            データの読み書きのためのファイルを開く．
            書き込みの場合は，新しいファイルが作成されるか，ファイルが存在する場合には上書きされる．
            また，読み書きされるファイルの種類は拡張子で判別される． XMLの場合は.xml，YAMLの場合は.ymlまたは.yamlである．
            </summary>
            <param name="filename">ストレージに関連づけられたファイルの名前</param>
            <param name="memstorage">一時的なデータや，CvSeqや CvGraphなどの動的構造体の保存に使われるメモリストレージ．nullの場合，一時的なメモリが確保されて使用される．</param>
            <param name="flags">ファイルを開く方法または作成する方法</param>
            <returns>開いたファイルと関連付けられたCvFileStorageクラスへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.OpenFileStorage(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            データの読み書きのためのファイルを開く．
            書き込みの場合は，新しいファイルが作成されるか，ファイルが存在する場合には上書きされる．
            また，読み書きされるファイルの種類は拡張子で判別される． XMLの場合は.xml，YAMLの場合は.ymlまたは.yamlである．
            </summary>
            <param name="filename">ストレージに関連づけられたファイルの名前</param>
            <param name="memstorage">一時的なデータや，CvSeqや CvGraphなどの動的構造体の保存に使われるメモリストレージ．nullの場合，一時的なメモリが確保されて使用される．</param>
            <param name="flags">ファイルを開く方法または作成する方法</param>
            <param name="encoding"></param>
            <returns>開いたファイルと関連付けられたCvFileStorageクラスへの参照</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理和（OR）を計算する. 
            dst(I)=src1(I)|src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Or(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理和（OR）を計算する. 
            dst(I)=src1(I)|src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.OrS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理和(OR)を計算する.
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)|value
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.OrS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理和(OR)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)|value [mask(I)!=0の場合]
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PerspectiveTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            ベクトルの透視投影変換を行う
            </summary>
            <param name="src">3チャンネルの浮動小数点型入力配列</param>
            <param name="dst">3チャンネルの浮動小数点型出力配列</param>
            <param name="mat">3×3 または 4×4 の変換行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Point(System.Int32,System.Int32)">
            <summary>
            整数座標系による2次元の点を生成する (cvPoint相当)
            </summary>
            <param name="x">x 座標．通常は0が原点</param>
            <param name="y">y 座標．通常は0が原点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point2D32f(System.Single,System.Single)">
            <summary>
            浮動小数点型（単精度）座標系による2次元の点を生成する (cvPoint2D32f相当)
            </summary>
            <param name="x">x 座標．通常は0が原点</param>
            <param name="y">y 座標．通常は0が原点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point2D64f(System.Double,System.Double)">
            <summary>
            浮動小数点型（倍精度）座標系による2次元の点を生成する (cvPoint2D32f相当)
            </summary>
            <param name="x">x 座標．通常は0が原点</param>
            <param name="y">y 座標．通常は0が原点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point3D32f(System.Single,System.Single,System.Single)">
            <summary>
            浮動小数点型（単精度）座標系による3次元の点を生成する (cvPoint3D32f相当)
            </summary>
            <param name="x">x 座標．通常は0が原点</param>
            <param name="y">y 座標．通常は0が原点</param>
            <param name="z">z 座標．通常は0が原点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Point3D64f(System.Double,System.Double,System.Double)">
            <summary>
            浮動小数点型（倍精度）座標系による3次元の点を生成する (cvPoint3D64f相当)
            </summary>
            <param name="x">x 座標．通常は0が原点</param>
            <param name="y">y 座標．通常は0が原点</param>
            <param name="z">z 座標．通常は0が原点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PointPolygonTest(OpenCvSharp.CvArr,OpenCvSharp.CvPoint2D32f,System.Boolean)">
            <summary>
            点と輪郭の関係を調べる
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="pt">入力輪郭に対して調べる点</param>
            <param name="measureDist">非0の場合, この関数は与えた点に最も近い輪郭までの距離を求める.</param>
            <returns>点が輪郭の内側にあるか，外側にあるか，輪郭上に乗っている（あるいは，頂点と一致している）かを判別し，それぞれの場合に応じて正か負か0を返す．
            measureDist=0の場合，戻り値はそれぞれ+1，-1，0である． measureDist≠0の場合，点と最近傍輪郭までの符号付きの距離を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PointSeqFromMat(OpenCvSharp.SeqType,OpenCvSharp.CvArr,OpenCvSharp.CvContour@,OpenCvSharp.CvSeqBlock@)">
            <summary>
            点のベクトルを用いて，点のシーケンスヘッダを初期化する
            </summary>
            <param name="seqKind">点のシーケンスの種類</param>
            <param name="mat">入力行列．点の連続的な1次元ベクトルで，CV_32SC2型かCV_32FC2型でなければならない．</param>
            <param name="contourHeader">輪郭ヘッダ．この関数で初期化される．</param>
            <param name="block">シーケンスブロックヘッダ．この関数で初期化される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolarToCart(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            極座標形式で表現された2次元ベクトルのデカルト座標を計算する
            </summary>
            <param name="magnitude">大きさの配列．nullの場合，大きさはすべて1と仮定される．</param>
            <param name="angle">角度の配列．単位はラジアン，または度である．</param>
            <param name="x">x座標の出力配列で，必要でなければnullがセットされる．</param>
            <param name="y">y座標の出力配列で，必要でなければnullがセットされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolarToCart(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.AngleUnit)">
            <summary>
            極座標形式で表現された2次元ベクトルのデカルト座標を計算する
            </summary>
            <param name="magnitude">大きさの配列．nullの場合，大きさはすべて1と仮定される．</param>
            <param name="angle">角度の配列．単位はラジアン，または度である．</param>
            <param name="x">x座標の出力配列で，必要でなければnullがセットされる．</param>
            <param name="y">y座標の出力配列で，必要でなければnullがセットされる．</param>
            <param name="unit">角度を表すために，ラジアン（デフォルト値）または度のどちらを用いるかを示す．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawPolyLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint[][],System.Boolean,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            ポリライン（枠だけのポリゴン）を描画する
            </summary>
            <param name="img">ポリラインが描かれる画像</param>
            <param name="pts">ポリラインの配列の配列</param>
            <param name="isClosed">ポリラインを閉じるかどうかを指定する．閉じる場合，それぞれの領域の最後の頂点と最初の頂点を結ぶ線分を描画する． </param>
            <param name="color">線の色</param>
            <param name="thickness">線の太さ</param>
            <param name="lineType">線の種類</param>
            <param name="shift">頂点座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.POSIT(OpenCvSharp.CvPOSITObject,OpenCvSharp.CvPoint2D32f[],System.Double,OpenCvSharp.CvTermCriteria,System.Single[0:,0:]@,System.Single[]@)">
            <summary>
            POSITアルゴリズムの実装
            </summary>
            <param name="positObject">オブジェクト構造体</param>
            <param name="imagePoints">オブジェクト上の点を二次元画像平面上へ投影して得られる点群</param>
            <param name="focalLength">使用するカメラの焦点距離</param>
            <param name="criteria">反復POSITアルゴリズムの終了条件</param>
            <param name="rotationMatrix">回転行列</param>
            <param name="translationVector">並進ベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PostBoostingFindFace(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Pow(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            すべての配列要素を累乗する.
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列．入力と同じタイプでなければならない.</param>
            <param name="power">累乗の指数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="image">入力画像</param>
            <param name="corners">コーナーの候補を保存する画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PreCornerDetect(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ApertureSize)">
            <summary>
            コーナー検出のために，画像ブロックの最小固有値を計算する. 
            すべてのピクセルについて，隣接ブロックにおける導関数の共変動行列の最小固有値だけを求める関数である．
            </summary>
            <param name="image">入力画像</param>
            <param name="corners">コーナーの候補を保存する画像</param>
            <param name="apertureSize">Sobel演算子のアパーチャサイズ(cvSobel参照)．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode``1(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PrevTreeNode``1(OpenCvSharp.CvTreeNodeIterator{``0})">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <param name="treeIterator">初期化されるツリーのイテレータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPCA(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            指定された部分空間にベクトルを投影する
            </summary>
            <param name="data">入力データ．それぞれのベクトルは単一行か，単一列である．</param>
            <param name="avg">平均ベクトル．単一行ベクトルの場合，それはdataの行として入力ベクトルが保存されていることを意味する． そうでない場合は，単一列ベクトルであり，そのときのベクトルはdataの列として保存されている．</param>
            <param name="eigenvects">固有ベクトル（主成分）．一つの行が一つのベクトルを意味する．</param>
            <param name="result">出力である分解係数の行列．行の数はベクトルの数と同じでなくてはならない．列の数はeigenvectorsの列の数より小さいか同じでなくてはならない．列の数が少ない場合，入力ベクトルは，第cols(result)主成分までを基底とする部分空間に投影される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            次元空間中の点を画像平面上に投影した際の座標を，内部パラメータと外部パラメータを用いて計算する．
            オプションとして，この関数は画像中の投影点の偏微分係数行列であるヤコビアンを求める．
            </summary>
            <remarks>
            内部パラメータ及び/または外部パラメータを特別な値に設定すると，
            この関数を外部変換のみ，あるいは内部変換のみ（つまり，疎な点集 合の歪みを考慮したものに変換する）を計算するために利用することができる．
            </remarks>
            <param name="objectPoints">オブジェクトの点の配列でその大きさは3xNまたはNx3である．N は画像内の点の個数</param>
            <param name="rotationVector">回転ベクトル．1x3または3x1</param>
            <param name="translationVector">並進ベクトル．1x3または3x1</param>
            <param name="intrinsicMatrix">カメラマトリクス(A) [fx 0 cx; 0 fy cy; 0 0 1]</param>
            <param name="distortionCoeffs">歪み係数．4x1または1x4 [k1, k2, p1, p2]. NULLの場合，すべての歪み係数を0とする</param>
            <param name="imagePoints">画像平面上の点の出力配列で，その大きさは2xNまたはNx2である．ここでNはビュー上の点の数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            次元空間中の点を画像平面上に投影した際の座標を，内部パラメータと外部パラメータを用いて計算する．
            オプションとして，この関数は画像中の投影点の偏微分係数行列であるヤコビアンを求める．
            </summary>
            <remarks>
            内部パラメータ及び/または外部パラメータを特別な値に設定すると，
            この関数を外部変換のみ，あるいは内部変換のみ（つまり，疎な点集 合の歪みを考慮したものに変換する）を計算するために利用することができる．
            </remarks>
            <param name="objectPoints">オブジェクトの点の配列でその大きさは3xNまたはNx3である．N は画像内の点の個数</param>
            <param name="rotationVector">回転ベクトル．1x3または3x1</param>
            <param name="translationVector">並進ベクトル．1x3または3x1</param>
            <param name="intrinsicMatrix">カメラマトリクス(A) [fx 0 cx; 0 fy cy; 0 0 1]</param>
            <param name="distortionCoeffs">歪み係数．4x1または1x4 [k1, k2, p1, p2]. NULLの場合，すべての歪み係数を0とする</param>
            <param name="imagePoints">画像平面上の点の出力配列で，その大きさは2xNまたはNx2である．ここでNはビュー上の点の数</param>
            <param name="dpdrot">オプション：画像平面上の点の回転ベクトルの各要素に関する微分係数を表す2Nx3行列</param>
            <param name="dpdt">オプション：画像平面上の点の並進ベクトルの各要素に関する微分係数を表す2Nx3行列</param>
            <param name="dpdf">オプション：画像平面上の点のfx と fyに関する微分係数を表す2Nx2行列</param>
            <param name="dpdc">オプション：画像平面上の点のcx とcyに関する微分係数を表す2Nx2行列</param>
            <param name="dpddist">オプション：画像平面上の点の歪み係数に関する微分係数を表す2Nx4行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ProjectPoints2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Double)">
            <summary>
            次元空間中の点を画像平面上に投影した際の座標を，内部パラメータと外部パラメータを用いて計算する．
            オプションとして，この関数は画像中の投影点の偏微分係数行列であるヤコビアンを求める．
            </summary>
            <remarks>
            内部パラメータ及び/または外部パラメータを特別な値に設定すると，
            この関数を外部変換のみ，あるいは内部変換のみ（つまり，疎な点集 合の歪みを考慮したものに変換する）を計算するために利用することができる．
            </remarks>
            <param name="objectPoints">オブジェクトの点の配列でその大きさは3xNまたはNx3である．N は画像内の点の個数</param>
            <param name="rotationVector">回転ベクトル．1x3または3x1</param>
            <param name="translationVector">並進ベクトル．1x3または3x1</param>
            <param name="intrinsicMatrix">カメラマトリクス(A) [fx 0 cx; 0 fy cy; 0 0 1]</param>
            <param name="distortionCoeffs">歪み係数．4x1または1x4 [k1, k2, p1, p2]. NULLの場合，すべての歪み係数を0とする</param>
            <param name="imagePoints">画像平面上の点の出力配列で，その大きさは2xNまたはNx2である．ここでNはビュー上の点の数</param>
            <param name="dpdrot">オプション：画像平面上の点の回転ベクトルの各要素に関する微分係数を表す2Nx3行列</param>
            <param name="dpdt">オプション：画像平面上の点の並進ベクトルの各要素に関する微分係数を表す2Nx3行列</param>
            <param name="dpdf">オプション：画像平面上の点のfx と fyに関する微分係数を表す2Nx2行列</param>
            <param name="dpdc">オプション：画像平面上の点のcx とcyに関する微分係数を表す2Nx2行列</param>
            <param name="dpddist">オプション：画像平面上の点の歪み係数に関する微分係数を表す2Nx4行列</param>
            <param name="aspectRatio"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr1D(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr1D(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr2D(OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr2D(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Ptr3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@,System.Boolean)">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <param name="createNode">疎な行列に対するオプションの入力パラメータ. trueの場合，指定された要素が存在しないときは要素を生成する.</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PtrND(OpenCvSharp.CvArr,System.Int32[],OpenCvSharp.MatrixType@,System.Boolean,System.Nullable{System.UInt32})">
            <summary>
            特定の配列要素へのポインタを返す．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx">要素インデックスの配列</param>
            <param name="type">行列要素のタイプ</param>
            <param name="createNode">疎な行列に対するオプションの入力パラメータ. trueの場合，指定された要素が存在しないときは要素を生成する.</param>
            <param name="precalcHashval">疎な行列に対するオプションの入力パラメータ．nullでないとき，関数はノードのハッシュ値を再計算せず，指定された場所から取ってくる． これにより，ペアワイズ操作の速度が向上する．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PutText(OpenCvSharp.CvArr,System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont,OpenCvSharp.CvScalar)">
            <summary>
            文字列を描画する
            </summary>
            <param name="img">入力画像</param>
            <param name="text">描画する文字列</param>
            <param name="org">最初の文字の左下の座標</param>
            <param name="font">フォント構造体</param>
            <param name="color">文字の色</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像のダウンサンプリングを行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrDown(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            画像のダウンサンプリングを行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
            <param name="filter">畳み込みに使うフィルタ．現在は CV_GAUSSIAN_5x5 のみサポート．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="src">入力画像．8ビット，3チャンネル</param>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,System.Int32)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="src">入力画像．8ビット，3チャンネル</param>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
            <param name="maxLevel">セグメント化のためのピラミッドの最大レベル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrMeanShiftFiltering(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,System.Int32,OpenCvSharp.CvTermCriteria)">
            <summary>
            平均値シフト法による画像のセグメント化アルゴリズムのフィルタリング部分を実装する．
            </summary>
            <param name="src">入力画像．8ビット，3チャンネル</param>
            <param name="dst">出力画像．入力画像と同じフォーマット，同じサイズ</param>
            <param name="sp">空間ウィンドウの半径</param>
            <param name="sr">色空間ウィンドウの半径</param>
            <param name="maxLevel">セグメント化のためのピラミッドの最大レベル</param>
            <param name="termcrit">終了条件．平均値シフトをいつまで繰り返すか</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.IplImage,System.Int32,System.Double,System.Double)">
            <summary>
            画像ピラミッドによる画像のセグメント化を実装する．ピラミッドは，levelまで作成する．(out引数のcompがいらないときバージョン)
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="level">セグメント化のためのピラミッドの最大レベル</param>
            <param name="threshold1">リンク構築のための誤差閾値</param>
            <param name="threshold2">セグメントクラスタリングのための誤差閾値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,System.Int32,System.Double,System.Double)">
            <summary>
            画像ピラミッドによる画像のセグメント化を実装する． ピラミッドは，levelまで作成する． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="storage">結果として得られる連結成分のシーケンスを保存するための領域</param>
            <param name="comp">セグメント化された成分の出力シーケンスへのポインタ</param>
            <param name="level">セグメント化のためのピラミッドの最大レベル</param>
            <param name="threshold1">リンク構築のための誤差閾値</param>
            <param name="threshold2">セグメントクラスタリングのための誤差閾値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像のアップサンプリングを行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.PyrUp(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvFilter)">
            <summary>
            画像のアップサンプリングを行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像．入力画像の1/2の幅と高さ．</param>
            <param name="filter">畳み込みに使うフィルタ．現在は CV_GAUSSIAN_5x5 のみサポート．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryFrame(OpenCvSharp.CvCapture)">
            <summary>
            カメラやビデオファイルから一つのフレームを取り出し，それを展開して返す．
            この関数は，単純にcvGrabFrame とcvRetrieveFrame をまとめて呼び出しているだけである．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_1D(OpenCvSharp.CvHistogram,System.Int32)">
            <summary>
            1次元ヒストグラムの指定されたビンの値を返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_2D(OpenCvSharp.CvHistogram,System.Int32,System.Int32)">
            <summary>
            2次元ヒストグラムの指定されたビンの値を返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_3D(OpenCvSharp.CvHistogram,System.Int32,System.Int32,System.Int32)">
            <summary>
            3次元ヒストグラムの指定されたビンの値を返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.QueryHistValue_nD(OpenCvSharp.CvHistogram,System.Int32[])">
            <summary>
            n次元ヒストグラムの指定されたビンの値を返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SampleLine(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint[]@,System.Int32)">
            <summary>
            ラスタ表現の線分を構成する点をサンプリングする
            </summary>
            <param name="image">線分をサンプリングするための入力画像</param>
            <param name="pt1">線分の始点</param>
            <param name="pt2">線分の終点</param>
            <param name="buffer">線分上の点を保存するためのバッファ</param>
            <param name="connectivity">線分の接続性．4 または 8．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="filename">ファイル名.</param>
            <param name="structPtr">保存するオブジェクト.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="filename">ファイル名.</param>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String,System.String)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="filename">ファイル名.</param>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
            <param name="comment">ファイルの最初に置かれるコメント（オプション）.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(System.String,System.IntPtr,System.String,System.String,OpenCvSharp.CvAttrList)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="filename">ファイル名.</param>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
            <param name="comment">ファイルの最初に置かれるコメント（オプション）.</param>
            <param name="attributes">cvWriteに渡される属性（オプション）.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="filename">ファイル名.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="filename">ファイル名.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String,System.String)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="filename">ファイル名.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
            <param name="comment">ファイルの最初に置かれるコメント（オプション）.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Save(OpenCvSharp.ICvPtrHolder,System.String,System.String,System.String,OpenCvSharp.CvAttrList)">
            <summary>
            オブジェクトをファイルに保存する
            </summary>
            <param name="structPtr">保存するオブジェクト.</param>
            <param name="filename">ファイル名.</param>
            <param name="name">オブジェクト名（オプション）．nullの場合，名前はfilenameから生成される．</param>
            <param name="comment">ファイルの最初に置かれるコメント（オプション）.</param>
            <param name="attributes">cvWriteに渡される属性（オプション）.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveImage(System.String,OpenCvSharp.CvArr,System.Int32[])">
            <summary>
            画像を指定したファイルに保存する．画像フォーマットは，filename の拡張子により決定される．
            この関数で保存できるのは，8 ビット 1チャンネル，あるいは 8 ビット3 チャンネル（'BGR' の順）画像だけである．
            </summary>
            <param name="fileName">ファイル名</param>
            <param name="image">画像ポインタ</param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveImage(System.String,OpenCvSharp.CvArr,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            画像を指定したファイルに保存する．画像フォーマットは，filename の拡張子により決定される．
            この関数で保存できるのは，8 ビット 1チャンネル，あるいは 8 ビット3 チャンネル（'BGR' の順）画像だけである．
            </summary>
            <param name="fileName">ファイル名</param>
            <param name="image">画像ポインタ</param>
            <param name="prms"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveMemStoragePos(OpenCvSharp.CvMemStorage,OpenCvSharp.CvMemStoragePos@)">
            <summary>
            メモリストレージの位置を保存する
            </summary>
            <param name="storage">メモリストレージ．</param>
            <param name="pos">出力するストレージ先頭の位置．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SaveWindowParameters(System.String)">
            <summary>
            ウィンドウのパラメータを保存します．
            </summary>
            <param name="name">ウィンドウの名前</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ScalarAll(System.Double)">
            <summary>
            指定した値を配列のすべての要素として初期化し、返す
            </summary>
            <param name="val0123"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ScaleAdd(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スケーリングされた配列ともう一つの配列の和を計算する.
            dst(I)=src1(I)*scale + src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="scale">1番目の配列のためのスケールファクタ</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スケーリングされた配列ともう一つの配列の和を計算する (cvScaleAddのエイリアス).
            dst(I)=src1(I)*scale + src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="scale">1番目の配列のためのスケールファクタ</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AXPY(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            cvScaleAdd(A, cvRealScalar(real_scalar), B, C)
            </summary>
            <param name="A"></param>
            <param name="realScalar"></param>
            <param name="B"></param>
            <param name="C"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single,OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentFGMask(OpenCvSharp.CvArr,System.Boolean,System.Single,OpenCvSharp.CvMemStorage,OpenCvSharp.CvPoint)">
            <summary>
            
            </summary>
            <param name="fgmask"></param>
            <param name="poly1Hull0"></param>
            <param name="perimScale"></param>
            <param name="storage"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SegmentMotion(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Double)">
            <summary>
            全体のモーションを動作部分毎に分割する
            </summary>
            <param name="mhi">モーション履歴画像</param>
            <param name="segMask">検出されたマスクが格納される画像，シングルチャンネル，32ビット浮動小数点型．</param>
            <param name="storage">成分に関連づけられたモーション列が格納されるメモリ領域． </param>
            <param name="timestamp">ミリ秒単位，あるいはその他の単位で表される現在時刻． </param>
            <param name="segThresh">セグメンテーション閾値．モーション履歴の間隔と同じか，それより大きい値にすることが推奨される． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqElemIdx``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="seq">シーケンス．</param>
            <param name="element">シーケンス要素</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqElemIdx``1(OpenCvSharp.CvSeq,``0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="seq">シーケンス．</param>
            <param name="element">シーケンス要素</param>
            <param name="block">要素を含むシーケンスブロックのアドレスがこの場所に保存される．</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInsert``1(OpenCvSharp.CvSeq,System.Int32,``0)">
            <summary>
            シーケンスの中に要素を挿入する
            </summary>
            <typeparam name="T">追加する要素の型.プリミティブ型か、OpenCVの構造体(CvPointなど).</typeparam>
            <param name="seq">シーケンス</param>
            <param name="beforeIndex">要素が挿入されるインデックス（このインデックスの前に挿入される）</param>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInsertSlice(OpenCvSharp.CvSeq,System.Int32,OpenCvSharp.CvArr)">
            <summary>
            シーケンス内に配列を挿入する
            </summary>
            <param name="seq">シーケンス．</param>
            <param name="beforeIndex">配列が挿入される場所へのインデックス（インデックスの前に挿入される）．</param>
            <param name="fromArr">追加される要素の配列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqInvert(OpenCvSharp.CvSeq)">
            <summary>
            シーケンス要素の順序を反転させる
            </summary>
            <param name="seq">シーケンス．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqRemove(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            与えられたインデックスをもつ要素を削除する．
            </summary>
            <param name="seq">シーケンス</param>
            <param name="index">削除される要素のインデックス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqRemoveSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスを削除する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">削除するシーケンスの一部分． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPartition(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc)">
            <summary>
            データシーケンスを同値類（同じクラスに属すると定義されたデータ群）に分割する
            </summary>
            <param name="seq">分割対象のシーケンス.</param>
            <param name="storage">同値類として分割されたシーケンスの保存領域．nullの場合は，seq->storage を使用する．</param>
            <param name="labels">出力パラメータ．入力シーケンスの各要素に割り振られた（分割結果を表す）0から始まるラベルシーケンスへのポインタのポインタ．</param>
            <param name="isEqual">2つのシーケンス要素が同じクラスである場合，関係関数は 0以外を返す． そうでなければ0を返す．分割アルゴリズムは，同値基準として関係関数の推移閉包を用いる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPartition``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc{``0})">
            <summary>
            データシーケンスを同値類（同じクラスに属すると定義されたデータ群）に分割する
            </summary>
            <param name="seq">分割対象のシーケンス.</param>
            <param name="storage">同値類として分割されたシーケンスの保存領域．nullの場合は，seq->storage を使用する．</param>
            <param name="labels">出力パラメータ．入力シーケンスの各要素に割り振られた（分割結果を表す）0から始まるラベルシーケンスへのポインタのポインタ．</param>
            <param name="isEqual">2つのシーケンス要素が同じクラスである場合，関係関数は 0以外を返す． そうでなければ0を返す．分割アルゴリズムは，同値基準として関係関数の推移閉包を用いる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPop(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスの末尾から一つの要素を削除する．
            シーケンスが既に空の場合は，エラーを返す．この関数の計算量は O(1) である．
            </summary>
            <param name="seq">シーケンス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPop``1(OpenCvSharp.CvSeq,``0@)">
            <summary>
            シーケンスの末尾から一つの要素を削除する．
            シーケンスが既に空の場合は，エラーを返す．この関数の計算量は O(1) である．
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="seq">シーケンス</param>
            <param name="element">削除した要素をコピーする出力先</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopFront(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスの先頭から一つの要素を削除する．
            シーケンスが既に空の場合は，エラーを返す．この関数の計算量は O(1) である．
            </summary>
            <param name="seq">シーケンス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopFront``1(OpenCvSharp.CvSeq,``0@)">
            <summary>
            シーケンスの先頭から一つの要素を削除する．
            シーケンスが既に空の場合は，エラーを返す．この関数の計算量は O(1) である．
            </summary>
            <typeparam name="T">出力先オブジェクトの型</typeparam>
            <param name="seq">シーケンス</param>
            <param name="element">削除した要素をコピーする出力先</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPopMulti``1(OpenCvSharp.CvSeq,``0[]@,System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）から削除する
            </summary>
            <typeparam name="T">削除する要素の型</typeparam>
            <param name="seq">シーケンス．</param>
            <param name="elements">削除される要素．</param>
            <param name="count">削除される要素数． </param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPush(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスの末尾に要素一つ分の領域を確保する．
            </summary>
            <param name="seq">シーケンス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPush``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            シーケンスの末尾に要素を追加し，割り付けられた要素を返す．
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <param name="seq">シーケンス</param>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushFront(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスの先頭に要素一つ分の領域を確保する．
            </summary>
            <param name="seq">シーケンス</param>
            <returns>追加された要素へのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushFront``1(OpenCvSharp.CvSeq,``0)">
            <summary>
            シーケンスの先頭に要素を追加し，割り付けられた要素へのポインタを返す．
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <typeparam name="T">追加する要素の型. プリミティブ型か、OpenCVの構造体(CvPointなど).</typeparam>
            <param name="seq">シーケンス</param>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqPushMulti``1(OpenCvSharp.CvSeq,``0[],OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）に追加する
            </summary>
            <typeparam name="T">追加する要素の型</typeparam>
            <param name="seq">シーケンス．</param>
            <param name="elements">追加される要素群．</param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSearch(OpenCvSharp.CvSeq,System.IntPtr,OpenCvSharp.CvCmpFunc,System.Boolean,System.Int32@)">
            <summary>
            シーケンスの中から要素を検索する
            </summary>
            <param name="seq">ソートされるシーケンス</param>
            <param name="elem">検索する要素</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
            <param name="isSorted">シーケンスがソート済みか否かを示すフラグ</param>
            <param name="elemIdx">出力パラメータ．見つかった要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSearch``1(OpenCvSharp.CvSeq,``0,OpenCvSharp.CvCmpFunc{``0},System.Boolean,System.Int32@)">
            <summary>
            シーケンスの中から要素を検索する
            </summary>
            <param name="seq">ソートされるシーケンス</param>
            <param name="elem">検索する要素</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
            <param name="isSorted">シーケンスがソート済みか否かを示すフラグ</param>
            <param name="elemIdx">出力パラメータ．見つかった要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice(OpenCvSharp.CvSeq,OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <param name="copyData">抽出されたスライスの要素をコピーするかしないかを示すフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSlice``1(OpenCvSharp.CvSeq{``0},OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            シーケンススライスのための別のヘッダを作成する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <param name="copyData">抽出されたスライスの要素をコピーするかしないかを示すフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSort(OpenCvSharp.CvSeq,OpenCvSharp.CvCmpFunc)">
            <summary>
            シーケンスの要素を，指定した比較関数を用いてソートする
            </summary>
            <param name="seq">ソートされるシーケンス</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SeqSort``1(OpenCvSharp.CvSeq,OpenCvSharp.CvCmpFunc{``0})">
            <summary>
            シーケンスの要素を，指定した比較関数を用いてソートする
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="seq">ソートされるシーケンス</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            スカラー値 value を，配列の選択された各要素にコピーする．
            </summary>
            <param name="arr">値をセットする配列. IplImage 型の場合， ROI は利用されるが，COI がセットされていてはならない．</param>
            <param name="value">配列を埋める値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            スカラー値 value を，配列の選択された各要素にコピーする．
            mask(I) != null の場合，arr(I)=value. 
            </summary>
            <param name="arr">値をセットする配列. IplImage 型の場合， ROI は利用されるが，COI がセットされていてはならない．</param>
            <param name="value">配列を埋める値</param>
            <param name="mask">8 ビットシングルチャンネル配列の処理マスク．配列の変更する要素を指定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set1D(OpenCvSharp.CvArr,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set2D(OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Set3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetND(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,System.Int32[])">
            <summary>
            新しい値を指定した配列要素に割り当てる． 
            疎な配列の場合，ノードが存在しなければ，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="value">割り当てる値</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet)">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <param name="setHeader">セット</param>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet,OpenCvSharp.CvSetElem)">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <param name="setHeader">セット</param>
            <param name="elem">挿入する要素． nullでない場合，新たに確保したノードにデータをコピーする （コピーした後，先頭の整数フィールドの最上位ビットはクリアされる）． </param>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetAdd(OpenCvSharp.CvSet,OpenCvSharp.CvSetElem,OpenCvSharp.CvSetElem@)">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <param name="setHeader">セット</param>
            <param name="elem">挿入する要素． nullでない場合，新たに確保したノードにデータをコピーする （コピーした後，先頭の整数フィールドの最上位ビットはクリアされる）． </param>
            <param name="insertedElem">割り当てられた要素への参照</param>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetHistBinRanges(OpenCvSharp.CvHistogram,System.Single[][])">
            <summary>
            ヒストグラムのビンのレンジをセットする
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="ranges">ビンのレンジの配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetHistBinRanges(OpenCvSharp.CvHistogram,System.Single[][],System.Boolean)">
            <summary>
            ヒストグラムのビンのレンジをセットする
            </summary>
            <param name="hist">ヒストグラム</param>
            <param name="ranges">ビンのレンジの配列</param>
            <param name="uniform">一様性フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetCaptureProperty(OpenCvSharp.CvCapture,System.Int32,System.Double)">
            <summary>
            ビデオキャプチャのプロパティをセットする
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="propertyID">プロパティID</param>
            <param name="value">プロパティの値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetCaptureProperty(OpenCvSharp.CvCapture,OpenCvSharp.CaptureProperty,System.Double)">
            <summary>
            ビデオキャプチャのプロパティをセットする
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="propertyID">プロパティID</param>
            <param name="value">プロパティの値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetData``1(OpenCvSharp.CvArr,``0[],System.Int32)">
            <summary>
            ユーザデータを配列のヘッダに割り当てる． 
            ヘッダは，関数 cvCreate*Header，関数 cvInit*Header あるいは 関数 cvMat（行列の場合）を用いて，あらかじめ初期化されるべきである．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">配列ヘッダ</param>
            <param name="data">ユーザデータ</param>
            <param name="step">バイト単位で表された行の長さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetData(OpenCvSharp.CvArr,System.IntPtr,System.Int32)">
            <summary>
            ユーザデータを配列のヘッダに割り当てる． 
            ヘッダは，関数 cvCreate*Header，関数 cvInit*Header あるいは 関数 cvMat（行列の場合）を用いて，あらかじめ初期化されるべきである．
            </summary>
            <param name="arr">配列ヘッダ</param>
            <param name="data">ユーザデータ</param>
            <param name="step">バイト単位で表された行の長さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetErrMode(OpenCvSharp.ErrMode)">
            <summary>
            エラーモードをセットする. 直前のエラーモードを返す.
            </summary>
            <param name="mode">エラーモード</param>
            <returns>セットする前のエラーモード</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetErrStatus(OpenCvSharp.CvStatus)">
            <summary>
            エラーステータスをセットする
            </summary>
            <param name="status">エラーステータス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetIdentity(OpenCvSharp.CvArr)">
            <summary>
            スカラー倍された単位行列を用いた初期化を行う
            </summary>
            <param name="mat">初期化される行列（正方である必要はない）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetIdentity(OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            スカラー倍された単位行列を用いた初期化を行う
            </summary>
            <param name="mat">初期化される行列（正方である必要はない）</param>
            <param name="value">対角成分の値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImageCOI(OpenCvSharp.IplImage,System.Int32)">
            <summary>
            与えられた値を channel of interest（COI）としてセットする.
            値 0 は全てのチャンネルが選択されている事を意味し，値 1 は最初のチャンネルが選択されている事を意味する．
            </summary>
            <param name="image">画像ヘッダ</param>
            <param name="coi">COI（Channel of interest）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImageROI(OpenCvSharp.IplImage,OpenCvSharp.CvRect)">
            <summary>
            与えられた矩形を画像の ROI としてセットする．
            </summary>
            <param name="image">画像ヘッダ</param>
            <param name="rect">ROI を表す矩形</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetImagesForHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            画像を隠れ分類器カスケードに割り当てる．
            </summary>
            <param name="cascade">cvCreateHidHaarClassifierCascade によって作成された隠れHaar分類器カスケード</param>
            <param name="sum">32 ビット整数シングルチャンネルのインテグラルイメージ</param>
            <param name="sqsum">64ビット浮動小数点型のシングルチャンネル画像の各ピクセルを二乗した値に対するインテグラルイメージ</param>
            <param name="tiltedSum">32 ビット整数型のシングルチャンネル画像を 45°傾けたものに対するインテグラルイメージ</param>
            <param name="scale">カスケードのウィンドウスケール</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetMouseCallback(System.String,OpenCvSharp.CvMouseCallback)">
            <summary>
            指定されたウィンドウ内で発生するマウスイベントに対するコールバック関数を設定する
            </summary>
            <param name="windowName">ウィンドウの名前</param>
            <param name="onMouse">指定されたウィンドウ内でマウスイベントが発生するたびに呼ばれるデリゲート</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNew(OpenCvSharp.CvSet)">
            <summary>
            セットに要素を加える（高速版）
            </summary>
            <param name="setHeader">セット</param>
            <returns>ノードへのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNumThreads">
            <summary>
            並列化されたOpenCV関数によって使用されるスレッド数を0にセットする．
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.SetNumThreads(System.Int32)">
            <summary>
            並列化されたOpenCV関数によって使用されるスレッド数をセットする．
            </summary>
            <param name="threads">スレッド数.
            負の場合，またプログラム開始時は，スレッド数にOpenMPランタイムの関数omp_get_num_procs() の戻り値であるシステムのプロセッサ数がセットされる． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetPostprocessFuncWin32(OpenCvSharp.CvWin32WindowCallback)">
            <summary>
            
            </summary>
            <param name="onPostprocess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetPreprocessFuncWin32(OpenCvSharp.CvWin32WindowCallback)">
            <summary>
            
            </summary>
            <param name="onPreprocess"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal1D(OpenCvSharp.CvArr,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal2D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetReal3D(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRealND(OpenCvSharp.CvArr,System.Double,System.Int32[])">
            <summary>
            シングルチャンネルの配列の指定した要素に新しい値を割り当てる．配列がマルチチャンネルのときは，ランタイムエラーが起こる．
            疎な配列の場合に，ノードが存在しなれば，この関数はノードを生成する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="value">割り当てる値</param>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRemove(OpenCvSharp.CvSet,System.Int32)">
            <summary>
            セットから要素を削除する
            </summary>
            <param name="setHeader">セット．</param>
            <param name="index">削除する要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetRemoveByPtr(OpenCvSharp.CvSet,System.IntPtr)">
            <summary>
            ポインタで指定したセットの要素を削除する
            </summary>
            <param name="setHeader">セット．</param>
            <param name="elem">削除される要素．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqBlockSize(OpenCvSharp.CvSeq,System.Int32)">
            <summary>
            シーケンスのブロックサイズを設定する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="deltaElems">シーケンス要素のブロックサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqReaderPos(OpenCvSharp.CvSeqReader,System.Int32)">
            <summary>
            読み込み位置を絶対位置で表された位置に移動する
            </summary>
            <param name="reader">リーダの状態</param>
            <param name="index">移動先の位置</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetSeqReaderPos(OpenCvSharp.CvSeqReader,System.Int32,System.Boolean)">
            <summary>
            読み込み位置を絶対位置か相対位置で表された位置に移動する
            </summary>
            <param name="reader">リーダの状態</param>
            <param name="index">移動先の位置．位置決めモード（次のパラメータis_relativeを参照）が使用されている場合， 実際の位置は index を reader->seq->totalで割った剰余になる．</param>
            <param name="isRelative">true，index は現在位置からの相対値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetTrackbarPos(System.String,System.String,System.Int32)">
            <summary>
            指定されたトラックバーの位置を設定する
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="windowName">トラックバーの親ウィンドウの名前</param>
            <param name="pos">新しい位置</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetWindowProperty(System.String,OpenCvSharp.WindowProperty,OpenCvSharp.WindowPropertyValue)">
            <summary>
            ウィンドウのプロパティを設定する
            </summary>
            <param name="name"></param>
            <param name="propId">プロパティの種類</param>
            <param name="propValue">プロパティに設定する値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SetZero(OpenCvSharp.CvArr)">
            <summary>
            配列をクリアする
            </summary>
            <param name="arr">クリアされる配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Zero(OpenCvSharp.CvArr)">
            <summary>
            配列をクリアする
            </summary>
            <param name="arr">クリアされる配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ShowImage(System.String,OpenCvSharp.CvArr)">
            <summary>
            指定したウィンドウ内に画像を表示する．
            そのウィンドウのフラグに CV_WINDOW_AUTOSIZE が指定されていた場合は，画像はオリジナルサイズで表示される．
            それ以外の場合，ウィンドウサイズに合わせて 表示画像サイズが変更される． 
            </summary>
            <param name="name">ウィンドウの名前</param>
            <param name="image">画像ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Size(System.Int32,System.Int32)">
            <summary>
            矩形のピクセル精度でのサイズ構造体を生成する (cvSize相当)
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SliceLength(OpenCvSharp.CvSlice,OpenCvSharp.CvSeq)">
            <summary>
            シーケンスのスライス長を計算する
            </summary>
            <param name="slice"></param>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
            <param name="param3">ガウシアン平滑化 の場合，このパラメータがガウシアンsigma（標準偏差）を示す．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Smooth(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SmoothType,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            画像の平滑化を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="smoothtype">平滑化の方法</param>
            <param name="param1">平滑化処理のパラメータ1</param>
            <param name="param2">平滑化処理のパラメータ2．スケーリング有り/無しの単純平滑またはガウシアン平滑化の場合，param2 が0のときは param1 にセットされる.</param>
            <param name="param3">ガウシアン平滑化 の場合，このパラメータがガウシアンsigma（標準偏差）を示す．</param>
            <param name="param4">非正方形のガウシアンカーネルを使用する場合，垂直方向に異なるsigma 値(param3と違う値)指定するために用いられる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="image">元画像あるいは，外部エネルギー場</param>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="image">元画像あるいは，外部エネルギー場</param>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
            <param name="calcGradient">勾配フラグ．trueの場合，この関数は全ての画像ピクセルに対する勾配の強さを計算し，これをエネルギー場と見なす． falseの場合は，入力画像自体がエネルギー場と見なされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="image">元画像あるいは，外部エネルギー場</param>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SnakeImage(OpenCvSharp.IplImage,OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="image">元画像あるいは，外部エネルギー場</param>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
            <param name="calcGradient">勾配フラグ．trueの場合，この関数は全ての画像ピクセルに対する勾配の強さを計算し，これをエネルギー場と見なす． falseの場合は，入力画像自体がエネルギー場と見なされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sobel(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            拡張Sobel演算子を用いて1次，2次，3次または混合次数の微分画像を計算する [aperture_size=3]
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="xorder">x-導関数の次数</param>
            <param name="yorder">y-導関数の次数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sobel(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32,OpenCvSharp.ApertureSize)">
            <summary>
            拡張Sobel演算子を用いて1次，2次，3次または混合次数の微分画像を計算する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="xorder">x-導関数の次数</param>
            <param name="yorder">y-導関数の次数</param>
            <param name="apertureSize">拡張Sobelカーネルのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Solve(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            線形問題または最小二乗法問題を解く. dst = arg min_x||A*X-B||
            </summary>
            <param name="src1">入力行列</param>
            <param name="src2">線形システムの右辺</param>
            <param name="dst">出力解</param>
            <returns>methodにLUを指定した場合，Aが正則行列であればtrueを返し，そうでなければfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Solve(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.InvertMethod)">
            <summary>
            線形問題または最小二乗法問題を解く. dst = arg min_x||A*X-B||
            </summary>
            <param name="src1">入力行列</param>
            <param name="src2">線形システムの右辺</param>
            <param name="dst">出力解</param>
            <param name="method">逆行列の解法</param>
            <returns>methodにLUを指定した場合，Aが正則行列であればtrueを返し，そうでなければfalseを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SolveCubic(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            3次方程式の実根を求める
            </summary>
            <param name="coeffs">式の係数で，3個または4個の要素を持つ配列．</param>
            <param name="roots">実根の出力配列．三つの要素を持つ．</param>
            <returns>求めた実根の数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            実係数多項式の実根および複素根を求める
            </summary>
            <param name="coeffs">(degree + 1) の長さの，方程式の係数配列（CV_32FC1 or CV_64FC1）</param>
            <param name="roots">degree の長さのね実根と複素根の出力配列（CV_32FC2 or CV_64FC2）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            実係数多項式の実根および複素根を求める
            </summary>
            <param name="coeffs">(degree + 1) の長さの，方程式の係数配列（CV_32FC1 or CV_64FC1）</param>
            <param name="roots">degree の長さのね実根と複素根の出力配列（CV_32FC2 or CV_64FC2）</param>
            <param name="maxiter">反復計算の最大繰り返し数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SolvePoly(OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            実係数多項式の実根および複素根を求める
            </summary>
            <param name="coeffs">(degree + 1) の長さの，方程式の係数配列（CV_32FC1 or CV_64FC1）</param>
            <param name="roots">degree の長さのね実根と複素根の出力配列（CV_32FC2 or CV_64FC2）</param>
            <param name="maxiter">反復計算の最大繰り返し数</param>
            <param name="fig">要求精度の桁数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sort(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SortFlag)">
            <summary>
            Sorts the rows/cols of an array ascending/descending
            </summary>
            <param name="src">Source array to sort</param>
            <param name="dst">Optional destination array</param>
            <param name="idxmat">Index matrix</param>
            <param name="flags">Sorting parameter</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Split(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            マルチチャンネルの配列を，複数のシングルチャンネルの配列に分割する．または，配列から一つのチャンネルを取り出す．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst0">出力チャンネル1</param>
            <param name="dst1">出力チャンネル2</param>
            <param name="dst2">出力チャンネル3</param>
            <param name="dst3">出力チャンネル4</param>
        </member>
        <member name="M:OpenCvSharp.Cv.CvtPixToPlane(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            マルチチャンネルの配列を，複数のシングルチャンネルの配列に分割する．または，配列から一つのチャンネルを取り出す．
            </summary>
            <param name="src">入力配列</param>
            <param name="dst0">出力チャンネル1</param>
            <param name="dst1">出力チャンネル2</param>
            <param name="dst2">出力チャンネル3</param>
            <param name="dst3">出力チャンネル4</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sqrt(System.Single)">
            <summary>
            引数の平方根を計算する． 
            引数が負の値の場合，結果は求まらない． 
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに入力画像の二乗を加算する
            </summary>
            <param name="image">入力画像，1- あるいは 3-チャンネル，8 ビットあるいは 32 ビット浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="sqsum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SquareAcc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータに入力画像の二乗を加算する
            </summary>
            <param name="image">入力画像，1- あるいは 3-チャンネル，8 ビットあるいは 32 ビット浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="sqsum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型． </param>
            <param name="mask">オプションの処理マスク</param>        
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarDetectorParams(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="maxSize"></param>
            <param name="responseThreshold"></param>
            <param name="lineThresholdProjected"></param>
            <param name="lineThresholdBinarized"></param>
            <param name="suppressNonmaxSize"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StarKeypoint(OpenCvSharp.CvPoint,System.Int32,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <param name="response"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartAppendToSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqWriter@)">
            <summary>
            シーケンスへのデータ書き込み処理を初期化する
            </summary>
            <param name="seq">シーケンスへのポインタ．</param>
            <param name="writer">ライタ（Writer）の状態．この関数で初期化される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize"></param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <param name="offset">ROIのオフセット．cvFindContoursを参照． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartNextStream(OpenCvSharp.CvFileStorage)">
            <summary>
            ファイルストレージ内の次のストリームを開始する． 
            </summary>
            <param name="fs">ファイルストレージ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadChainPoints(OpenCvSharp.CvChain,OpenCvSharp.CvChainPtReader)">
            <summary>
            チェーンリーダを初期化する
            </summary>
            <param name="chain">チェーンへのポインタ</param>
            <param name="reader">チェーンリーダの状態</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadRawData(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,OpenCvSharp.CvSeqReader@)">
            <summary>
            ファイルノードのシーケンスリーダの初期化
            </summary>
            <param name="fs">ファイルストレージ．</param>
            <param name="src">読み込むファイルノード(シーケンス)．</param>
            <param name="reader">シーケンスリーダへのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqReader)">
            <summary>
            シーケンスからの連続読み出し処理を初期化する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartReadSeq(OpenCvSharp.CvSeq,OpenCvSharp.CvSeqReader,System.Boolean)">
            <summary>
            シーケンスからの連続読み出し処理を初期化する
            </summary>
            <param name="seq">シーケンス</param>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
            <param name="reverse">シーケンス走査方向の指定．reverse が false の場合，リーダは先頭のシーケンス要素に位置する．それ以外は最後の要素に位置する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWindowThread">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteSeq(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeqWriter@)">
            <summary>
            新しいシーケンスを作成し，ライタ（writer）を初期化する
            </summary>
            <param name="seqFlags">作成されたシーケンスのフラグ． 生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない． そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない． </param>
            <param name="headerSize">シーケンスヘッダのサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプか拡張が指示されている場合，そのタイプは基本タイプのヘッダサイズと合致しなければならない． </param>
            <param name="elemSize">シーケンスの要素サイズ（バイト単位）．サイズはシーケンスタイプと合致しなければならない． 例えば，点群のシーケンス（要素タイプは CV_SEQ_ELTYPE_POINT）を作成する場合， パラメータ elem_size は sizeof(CvPoint) と等しくなければならない． </param>
            <param name="storage">シーケンスの位置． </param>
            <param name="writer">ライタの状態．この関数で初期化される． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteStruct(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.NodeType)">
            <summary>
            新しい構造体の書き込みを開始する
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込む構造体の名前．読み込む場合は，この名前で構造体にアクセスできる．</param>
            <param name="structFlags">Seq, Map, Flowのフラグの組み合わせ. SeqとMapはどちらか1つを指定しなければならない.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StartWriteStruct(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.NodeType,System.String)">
            <summary>
            新しい構造体の書き込みを開始する
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込む構造体の名前．読み込む場合は，この名前で構造体にアクセスできる．</param>
            <param name="structFlags">Seq, Map, Flowのフラグの組み合わせ. SeqとMapはどちらか1つを指定しなければならない.</param>
            <param name="typeName">オプションパラメータ - オブジェクトの型の名前． 
            XMLの場合，構造体開始タグのtype_id属性として書かれる． YAMLの場合，構造体名に続くコロンの後に書かれる． 
            主にユーザオブジェクトと共に使われる．ストレージが読まれたとき，エンコードされた型名がオブジェクトの型を決定する.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            ステレオカメラのキャリブレーションを行う
            </summary>
            <param name="objectPoints">オブジェクト点の結合行列，3xN あるいは Nx3．ここで， N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints1">1 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints2">2 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="npoints">各ビューに含まれる点数のベクトル，1xM あるいは Mx1． ここで，M はビューの数． </param>
            <param name="cameraMatrix1">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs1">カメラ1の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="cameraMatrix2">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs2">カメラ2の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">画像サイズ．カメラの内部パラメータ行列を初期化する際にのみ用いられる． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            ステレオカメラのキャリブレーションを行う
            </summary>
            <param name="objectPoints">オブジェクト点の結合行列，3xN あるいは Nx3．ここで， N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints1">1 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints2">2 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="npoints">各ビューに含まれる点数のベクトル，1xM あるいは Mx1． ここで，M はビューの数． </param>
            <param name="cameraMatrix1">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs1">カメラ1の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="cameraMatrix2">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs2">カメラ2の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">画像サイズ．カメラの内部パラメータ行列を初期化する際にのみ用いられる． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="E">出力オプション：E行列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            ステレオカメラのキャリブレーションを行う
            </summary>
            <param name="objectPoints">オブジェクト点の結合行列，3xN あるいは Nx3．ここで， N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints1">1 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints2">2 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="npoints">各ビューに含まれる点数のベクトル，1xM あるいは Mx1． ここで，M はビューの数． </param>
            <param name="cameraMatrix1">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs1">カメラ1の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="cameraMatrix2">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs2">カメラ2の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">画像サイズ．カメラの内部パラメータ行列を初期化する際にのみ用いられる． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="E">出力オプション：E行列．</param>
            <param name="F">出力オプション：F行列（基礎行列）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvTermCriteria)">
            <summary>
            ステレオカメラのキャリブレーションを行う
            </summary>
            <param name="objectPoints">オブジェクト点の結合行列，3xN あるいは Nx3．ここで， N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints1">1 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints2">2 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="npoints">各ビューに含まれる点数のベクトル，1xM あるいは Mx1． ここで，M はビューの数． </param>
            <param name="cameraMatrix1">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs1">カメラ1の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="cameraMatrix2">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs2">カメラ2の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">画像サイズ．カメラの内部パラメータ行列を初期化する際にのみ用いられる． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="E">出力オプション：E行列．</param>
            <param name="F">出力オプション：F行列（基礎行列）．</param>
            <param name="termCrit">繰り返し最適化アルゴリズムのための終了条件．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoCalibrate(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvTermCriteria,OpenCvSharp.CalibrationFlag)">
            <summary>
            ステレオカメラのキャリブレーションを行う
            </summary>
            <param name="objectPoints">オブジェクト点の結合行列，3xN あるいは Nx3．ここで， N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints1">1 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="imagePoints2">2 番目のカメラのビューにおける画像間対応点の結合行列， 2xN あるいは Nx2．ここで，N は全てのビューにおける点数の合計． </param>
            <param name="npoints">各ビューに含まれる点数のベクトル，1xM あるいは Mx1． ここで，M はビューの数． </param>
            <param name="cameraMatrix1">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs1">カメラ1の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="cameraMatrix2">入出力カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]． CV_CALIB_USE_INTRINSIC_GUESS か CV_CALIB_FIX_ASPECT_RATIO が指定された場 合は，これらの行列のいくつか（または全て）の要素が初期化されているはずである． </param>
            <param name="distCoeffs2">カメラ2の歪み係数を表す入出力ベクトル， 4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">画像サイズ．カメラの内部パラメータ行列を初期化する際にのみ用いられる． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="E">出力オプション：E行列．</param>
            <param name="F">出力オプション：F行列（基礎行列）．</param>
            <param name="termCrit">繰り返し最適化アルゴリズムのための終了条件．</param>
            <param name="flags">様々なフラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="Q">視差と奥行きのマッピング行列，4x4．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="Q">視差と奥行きのマッピング行列，4x4．</param>
            <param name="flags">オプションフラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="Q">視差と奥行きのマッピング行列，4x4．</param>
            <param name="flags">オプションフラグ</param>
            <param name="alpha"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CvSize)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="Q">視差と奥行きのマッピング行列，4x4．</param>
            <param name="flags">オプションフラグ</param>
            <param name="alpha"></param>
            <param name="newImageSize"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectify(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.StereoRectificationFlag,System.Double,OpenCvSharp.CvSize,OpenCvSharp.CvRect@,OpenCvSharp.CvRect@)">
            <summary>
            ステレオカメラの平行化変換を求める
            </summary>
            <param name="cameraMatrix1">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="cameraMatrix2">カメラ行列 [fxk 0 cxk; 0 fyk  cyk; 0 0 1]．</param>
            <param name="distCoeffs1">カメラ1の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="distCoeffs2">カメラ2の歪み係数ベクトル．4x1，1x4，5x1，1x5．</param>
            <param name="imageSize">ステレオカメラのキャリブレーションに用いられる画像サイズ． </param>
            <param name="R">1 番目と2 番目のカメラの座標系間の回転行列． </param>
            <param name="T">カメラ座標系間の並進ベクトル． </param>
            <param name="R1">1 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="R2">2 番目のカメラに対する 3x3 平行化変換（回転行列）．</param>
            <param name="P1">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="P2">新しい（平行化された）座標系に対する 3x4 の投影行列． </param>
            <param name="Q">視差と奥行きのマッピング行列，4x4．</param>
            <param name="flags">オプションフラグ</param>
            <param name="alpha"></param>
            <param name="newImageSize"></param>
            <param name="validPixROI1"></param>
            <param name="validPixROI2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectifyUncalibrated(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            キャリブレーションされていないステレオカメラの平行化変換を求める
            </summary>
            <param name="points1">互いに対応する 2 次元点の二つの配列</param>
            <param name="points2">互いに対応する 2 次元点の二つの配列</param>
            <param name="F">基礎行列． points1 と points2 の点ペアを用いて， 関数 cvFindFundamentalMat  によって計算される．</param>
            <param name="imgSize">画像サイズ．</param>
            <param name="H1">1 番目の画像と 2 番目の画像に対する平行化ホモグラフィ行列．</param>
            <param name="H2">1 番目の画像と 2 番目の画像に対する平行化ホモグラフィ行列．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.StereoRectifyUncalibrated(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvSize,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Double)">
            <summary>
            キャリブレーションされていないステレオカメラの平行化変換を求める
            </summary>
            <param name="points1">互いに対応する 2 次元点の二つの配列</param>
            <param name="points2">互いに対応する 2 次元点の二つの配列</param>
            <param name="F">基礎行列． points1 と points2 の点ペアを用いて， 関数 cvFindFundamentalMat  によって計算される．</param>
            <param name="imgSize">画像サイズ．</param>
            <param name="H1">1 番目の画像と 2 番目の画像に対する平行化ホモグラフィ行列．</param>
            <param name="H2">1 番目の画像と 2 番目の画像に対する平行化ホモグラフィ行列．</param>
            <param name="threshold">オプション：外れ値を排除するための閾値． このパラメータが 0 よりも大きい場合， エピポーラ幾何に充分に従わないすべての点ペア （つまり，fabs(points2[i]T*F*points1[i])&gt;threshold  となる点）が，ホモグラフィ行列を計算する前に棄却される． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの減算を行う. 
            dst(I)=src1(I)-src2(I) 
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sub(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの減算を行う.
            dst(I)=src1(I)-src2(I) [mask(I)!=0 の場合]
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列要素からスカラーを減算する.
            dst(I) = src(I)-value 
            </summary>
            <param name="src">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列要素からスカラーを減算する.
            dst(I) = src(I)-value [mask(I)!=0]
            </summary>
            <param name="src">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubRS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            スカラーから配列要素を減算する.
            dst(I)=value-src(I)
            </summary>
            <param name="src">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SubRS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            スカラーから配列要素を減算する.
            dst(I)=value-src(I) [mask(I)!=0 の場合]
            </summary>
            <param name="src">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Sum(OpenCvSharp.CvArr)">
            <summary>
            配列要素の総和を計算する.
            配列のタイプが IplImage で COI がセットされている場合，指定されたチャンネルのみを処理し，総和を１番目のスカラー値（S0）として保存する．
            </summary>
            <param name="arr">入力配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DEdgeDst(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            辺の終点を返す． 
            仮想点は関数 cvCalcSubdivVoronoi2D を用いて計算される.
            </summary>
            <param name="edge">細分割平面の辺の一つ（quad-edge表現ではない）</param>
            <returns>辺の終点. 辺が双対細分割のものであり，仮想点の座標がまだ計算されていない場合は，nullを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DEdgeOrg(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            辺の始点を返す． 
            仮想点は関数 cvCalcSubdivVoronoi2D を用いて計算される.
            </summary>
            <param name="edge">細分割平面の辺の一つ（quad-edge表現ではない）</param>
            <returns>辺の始点. 辺が双対細分割のものであり，仮想点の座標がまだ計算されていない場合は，nullを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DGetEdge(OpenCvSharp.CvSubdiv2DEdge,OpenCvSharp.CvNextEdgeType)">
            <summary>
            入力された辺に関連する辺の一つを返す
            </summary>
            <param name="edge">細分割平面の辺の一つ（quad-edge表現ではない）</param>
            <param name="type">戻り値とする辺の条件</param>
            <returns>与えられた辺に関連する辺の一つ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DLocate(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@)">
            <summary>
            ドロネー三角形に点を追加する
            </summary>
            <param name="subdiv">ドロネー，またはその他の細分割</param>
            <param name="pt">配置する点</param>
            <param name="edge">出力される辺．配置した点は，その辺上または端に存在する.</param>
            <returns>配置する点</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DLocate(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@,OpenCvSharp.CvSubdiv2DPoint@)">
            <summary>
            ドロネー三角形に点を追加する
            </summary>
            <param name="subdiv">ドロネー，またはその他の細分割</param>
            <param name="pt">配置する点</param>
            <param name="edge">出力される辺．配置した点は，その辺上または端に存在する.</param>
            <param name="vertex">オプション出力．入力点と一致する細分割の頂点へのポインタのポインタ</param>
            <returns>配置する点</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DNextEdge(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DRotateEdge(OpenCvSharp.CvSubdiv2DEdge,OpenCvSharp.RotateEdgeFlag)">
            <summary>
            入力された辺を含むquad-edge中の辺の一つを返す．
            </summary>
            <param name="edge">細分割の辺（quad-edge表現ではない）</param>
            <param name="rotate">関係の指定（入力された辺と同じquad-edgeのどの辺を返すかを指定）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Subdiv2DSymEdge(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SubdivDelaunay2DInsert(OpenCvSharp.CvSubdiv2D,OpenCvSharp.CvPoint2D32f)">
            <summary>
            ドロネー三角形に点を追加する
            </summary>
            <param name="subdiv">関数cvCreateSubdivDelaunay2D で作成されたドロネー細分割</param>
            <param name="pt">追加する点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SubstituteContour(OpenCvSharp.CvContourScanner,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint})">
            <summary>
            抽出された輪郭を置き換える
            </summary>
            <param name="scanner">関数cvStartFindContoursで初期化された輪郭スキャナ</param>
            <param name="newContour">新しく置き換える輪郭</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SURFParams(System.Double,System.Boolean)">
            <summary>
            SURFのデフォルトパラメータを生成する
            </summary>
            <param name="hessianThreshold">keypoint.hessian の値がこの閾値よりも大きい特徴だけが検出される</param>
            <param name="extended">false：基本的なディスクリプタ（64要素）, true：拡張されたディスクリプタ（128要素）</param>
            <returns>デフォルトパラメータ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SVBkSb(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            特異値の後退代入を行う
            </summary>
            <param name="W">特異値の行列またはベクトル</param>
            <param name="U">左直交行列（転置されているかもしれない）</param>
            <param name="V">右直交行列（転置されているかもしれない）</param>
            <param name="B">行列Aの擬似逆行列に乗ずるための行列</param>
            <param name="X">出力行列．後退代入の結果．</param>
            <param name="flags">操作フラグ．cvSVDでのflagsと一致していなければならない．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="A">入力M×N行列</param>
            <param name="W">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="A">入力M×N行列</param>
            <param name="W">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="U">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="A">入力M×N行列</param>
            <param name="W">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="U">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
            <param name="V">任意の右直交行列（N×N)．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.SVD(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.SVDFlag)">
            <summary>
            浮動小数点型の実数行列の特異値分解を行う.
            行列Aを二つの直交行列と一つの対角行列の積に分解する．A=U*W*VT
            </summary>
            <param name="A">入力M×N行列</param>
            <param name="W">特異値行列の結果 (M×N または N×N)またはベクトル（N×1）．</param>
            <param name="U">任意の左直交行列 (M×M または M×N)．もしCV_SVD_U_Tが指定された場合，上で述べた，行と列の数は入れ替わる．</param>
            <param name="V">任意の右直交行列（N×N)．</param>
            <param name="flags">操作フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.TermCriteria(OpenCvSharp.CriteriaType,System.Int32,System.Double)">
            <summary>
            反復アルゴリズムのための終了条件を生成する
            </summary>
            <param name="type">終了条件</param>
            <param name="maxIter">反復数の最大値</param>
            <param name="epsilon">目標精度</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ThreshHist(OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            ヒストグラムの閾値処理を行う.
            指定した閾値以下のヒストグラムのビンをクリアする.
            </summary>
            <param name="hist">ヒストグラムへの参照</param>
            <param name="threshold">閾値レベル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Threshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.ThresholdType)">
            <summary>
            シングルチャンネルの配列に対して，固定閾値での閾値処理を行う
            </summary>
            <param name="src">入力配列 (シングルチャンネル，8ビット，あるいは32ビット浮動小数点型）</param>
            <param name="dst">出力配列．src と同じデータタイプ，または8ビット． </param>
            <param name="threshold">閾値</param>
            <param name="maxValue">threshold_type が Binary と BinaryInv のときに使用する最大値</param>
            <param name="thresholdType">閾値処理の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Trace(OpenCvSharp.CvArr)">
            <summary>
            行列のトレース(対角成分の和)を返す
            </summary>
            <param name="mat">入力行列</param>
            <returns>対角成分の和</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TrackFace(OpenCvSharp.CvFaceTracker,OpenCvSharp.IplImage,OpenCvSharp.CvRect[],OpenCvSharp.CvPoint@,System.Double@)">
            <summary>
            
            </summary>
            <param name="faceTracker"></param>
            <param name="imgGray"></param>
            <param name="rects"></param>
            <param name="ptRotate"></param>
            <param name="angleRotate"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Transform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            すべての配列要素を行列により変換する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="transmat">変換行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Transform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            すべての配列要素を行列により変換する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="transmat">変換行列</param>
            <param name="shiftvec">オプションのシフトベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            すべての配列要素を行列により変換する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="transmat">変換行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MatMulAddS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            すべての配列要素を行列により変換する
            </summary>
            <param name="src">入力配列</param>
            <param name="dst">出力配列</param>
            <param name="transmat">変換行列</param>
            <param name="shiftvec">オプションのシフトベクトル</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Transpose(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            行列の転置を行う.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.T(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            行列の転置を行う.
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">出力行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.TreeToNodeSeq``1(OpenCvSharp.CvTreeNode{``0},System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            すべてのノードへのポインタを一つのシーケンスに集める
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">ツリーの先頭ノード．</param>
            <param name="headerSize">作成したシーケンスのヘッダサイズ（sizeof(CvSeq) が用いられることが多い）．</param>
            <param name="storage">シーケンスのためのコンテナ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TriangulatePoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="projMatr1"></param>
            <param name="projMatr2"></param>
            <param name="projPoints1"></param>
            <param name="projPoints2"></param>
            <param name="points4D"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.TypeOf(System.IntPtr)">
            <summary>
            オブジェクトの型を返す
            </summary>
            <param name="structPtr">オブジェクトへのポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.TypeOf(OpenCvSharp.ICvPtrHolder)">
            <summary>
            オブジェクトの型を返す
            </summary>
            <param name="structPtr">OpenCVのオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            半径方向や円周方向のレンズ歪みを補正するために画像を変換する．
            </summary>
            <param name="src">入力画像（歪みあり）</param>
            <param name="dst">出力画像（補正済み）</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数ベクトル． 4x1 または 1x4 [k1, k2, p1, p2]. </param>
        </member>
        <member name="M:OpenCvSharp.Cv.Undistort2(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            半径方向や円周方向のレンズ歪みを補正するために画像を変換する．
            </summary>
            <param name="src">入力画像（歪みあり）</param>
            <param name="dst">出力画像（補正済み）</param>
            <param name="intrinsicMatrix">カメラ内部行列 (A) [fx 0 cx; 0 fy cy; 0 0 1]. </param>
            <param name="distortionCoeffs">歪み係数ベクトル． 4x1 または 1x4 [k1, k2, p1, p2]. </param>
            <param name="newCameraMatrix"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.UndistortPoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            観測された点座標から理想的な点座標を計算する
            </summary>
            <param name="src">カメラで観測された点座標の集合．</param>
            <param name="dst">歪み補正後に逆透視投影を行った理想的な点座標.</param>
            <param name="cameraMatrix">カメラ行列 A=[fx 0 cx; 0 fy cy; 0 0 1] </param>
            <param name="distCoeffs">歪み係数のベクトル，4x1, 1x4, 5x1, 1x5．</param>
            <param name="R">オブジェクト空間での平行化変換（3x3 行列）． cvStereoRectify で計算された値， R1 あるいは R2 が渡される．このパラメータが null の場合，単位行列が用いられる．</param>
            <param name="P">新しいカメラ行列（3x3），あるいは，新しい投影行列（3x4）． cvStereoRectify  で計算された値， P1 あるいは P2  が渡される． このパラメータが null の場合，単位行列が用いられる． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.UnregisterType(System.String)">
            <summary>
            型の登録を取り消す
            </summary>
            <param name="typeName">登録を取り消す型の名前</param>
        </member>
        <member name="M:OpenCvSharp.Cv.UpdateMotionHistory(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            動くシルエットを用いてモーション履歴画像を更新する
            </summary>
            <param name="silhouette">モーションが発生した場所が 0 以外のピクセル値をもつシルエットマスク．</param>
            <param name="mhi">関数によって更新される，モーション履歴画像（シングルチャンネル，32 ビット浮動小数点型）．</param>
            <param name="timestamp">ミリ秒単位，あるはその他の単位で表される現在時間．</param>
            <param name="duration">timestamp と同じ時間単位で表される，モーション軌跡の最大保持時間． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.UseOptimized(System.Boolean)">
            <summary>
            最適化モード／非最適化モードを切り替える
            </summary>
            <param name="onOff">trueのとき最適化，falseのとき非最適化．</param>
            <returns>ロードされた最適化関数の数</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ValidateDisparity(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="disparity"></param>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ValidateDisparity(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="disparity"></param>
            <param name="cost"></param>
            <param name="minDisparity"></param>
            <param name="numberOfDisparities"></param>
            <param name="disp12MaxDiff"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WaitKey">
            <summary>
            Waits for key event infinitely (delay&lt;=0) or for "delay" milliseconds. 
            Returns the code of the pressed key or -1 if no key were pressed until the specified timeout has elapsed. 
            </summary>
            <returns>key code</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WaitKey(System.Int32)">
            <summary>
            Waits for key event infinitely (delay&lt;=0) or for "delay" milliseconds. 
            Returns the code of the pressed key or -1 if no key were pressed until the specified timeout has elapsed. 
            </summary>
            <param name="delay">Delay in milliseconds. </param>
            <returns>key code</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            画像のアフィン変換を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">2×3 変換行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            画像のアフィン変換を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">2×3 変換行列</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpAffine(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            画像のアフィン変換を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">2×3 変換行列</param>
            <param name="flags">補間方法</param>
            <param name="fillval">対応の取れない点に対して与える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WarpPerspective(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            画像の透視変換を行う.
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapMatrix">3×3 の変換行列</param>
            <param name="flags">補間方法</param>
            <param name="fillval">対応の取れない点に対して与える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Watershed(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            watershedアルゴリズムによる画像のセグメント化を行う.
            画像をこの関数に渡す前に，ユーザーは大まかに画像markers中の処理対象領域を，正（>0）のインデックスを用いて区切っておかなければならない．
            </summary>
            <param name="image">入力画像．8ビット，3チャンネル画像.</param>
            <param name="markers">入出力画像．32ビットシングルチャンネルのマーカー画像（マップ）.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Write(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvArr)">
            <summary>
            オブジェクトをファイルストレージに書き込む.
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込まれるオブジェクトの名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="ptr">オブジェクトへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Write(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvArr,OpenCvSharp.CvAttrList)">
            <summary>
            オブジェクトをファイルストレージに書き込む.
            </summary>
            <param name="fs">ファイルストレージ.</param>
            <param name="name">書き込まれるオブジェクトの名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="ptr">オブジェクトへの参照.</param>
            <param name="attributes">オブジェクトの属性．これは特定の型に対して固有である.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteComment(OpenCvSharp.CvFileStorage,System.String)">
            <summary>
            ファイルストレージにコメントを書き込む (eol_comment = false)．
            このコメントはデバッグや説明を記述するために使われるもので，読み込み時には読み飛ばされる．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="comment">一行または複数行の，書き込まれるコメ文字列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteComment(OpenCvSharp.CvFileStorage,System.String,System.Boolean)">
            <summary>
            ファイルストレージにコメントを書き込む．
            このコメントはデバッグや説明を記述するために使われるもので，読み込み時には読み飛ばされる．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="comment">一行または複数行の，書き込まれるコメ文字列</param>
            <param name="eolComment">trueの場合，この関数は現在の行の最後にコメントを入れようと試みる．
            falseで，コメントが複数，または現在の行の最後に納まらない場合は，コメントは新しい行から始められる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteFileNode(OpenCvSharp.CvFileStorage,System.String,OpenCvSharp.CvFileNode,System.Boolean)">
            <summary>
            ファイルノードを他のファイルストレージに書き込む
            </summary>
            <param name="fs">書き込み先のファイルストレージ．</param>
            <param name="newNodeName">書き込み先ファイルストレージ内のファイルノードの新しい名前．元の名前を維持するためには，cvGetFileNodeName(node)を用いる．</param>
            <param name="node">書き込まれるノード．</param>
            <param name="embed">書き込まれるノードがコレクションで，このパラメータがtrueの場合，階層の余分なレベルは生成されない．
            その代わりに，nodeの全ての要素は現在書き込まれている構造体に書き込まれる．
            当然，マップ要素はマップにのみ書き込まれ，シーケンス要素はシーケンスにのみ書き込まれる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteFrame(OpenCvSharp.CvVideoWriter,OpenCvSharp.IplImage)">
            <summary>
            一つのフレームをビデオファイルに書き込む/追加する
            </summary>
            <param name="writer">ビデオライタクラス</param>
            <param name="image">書き込まれるフレーム</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteInt(OpenCvSharp.CvFileStorage,System.String,System.Int32)">
            <summary>
            1つの整数値（名前あり，または無し）をファイルに書き込む.
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="value">書き込まれる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteRawData``1(OpenCvSharp.CvFileStorage,``0[],System.String)">
            <summary>
            複数の数値を書き込む
            </summary>
            <typeparam name="T">srcの要素の型</typeparam>
            <param name="fs">ファイルストレージ</param>
            <param name="src">書き込む配列</param>
            <param name="dt">フォーマット</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteReal(OpenCvSharp.CvFileStorage,System.String,System.Double)">
            <summary>
            単精度浮動小数点型の値（名前あり，または無し）をファイルに書き込む．
            特別な値はエンコードされる：Not A NumberはNaN に，±Infinityは +.Inf (-.Inf) になる．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="value">書き込まれる値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteString(OpenCvSharp.CvFileStorage,System.String,System.String)">
            <summary>
            文字列をファイルストレージに書き込む.
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="str">書き込まれる文字列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.WriteString(OpenCvSharp.CvFileStorage,System.String,System.String,System.Boolean)">
            <summary>
            文字列をファイルストレージに書き込む.
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="str">書き込まれる文字列</param>
            <param name="quote">trueの場合，書き込まれる文字列は必要かどうかに関わらず引用符で挟まれる．
            falseの場合，必要な場合にのみ引用符が使われる（例えば，文字列が数字で始まっていたり，スペースを含む場合）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの排他的論理和（XOR）を計算する. 
            dst(I)=src1(I)^src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Xor(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの排他的論理和（XOR）を計算する. 
            dst(I)=src1(I)^src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.XorS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の排他的論理和(XOR)を計算する.
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)^value
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.XorS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の排他的論理和(XOR)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)^value [mask(I)!=0の場合]
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecRefData(OpenCvSharp.CvArr)">
            <summary>
            参照カウンタのポインタが null ではない場合に CvMat あるいは CvMatND のデータの参照カウンタをデクリメントし，さらにカウンタが 0 になった場合にはデータを解放する．
            </summary>
            <param name="arr">配列ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Det(OpenCvSharp.CvArr)">
            <summary>
            行列式を返す
            </summary>
            <param name="mat">入力行列</param>
            <returns>行列式</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DCT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DCTFlag)">
            <summary>
            次元あるいは2次元浮動小数点型配列の順方向・逆方向離散コサイン変換を行う
            </summary>
            <param name="src">入力配列（実数の1次元あるいは2次元配列）</param>
            <param name="dst">入力と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecodeImage(OpenCvSharp.CvMat,OpenCvSharp.LoadMode)">
            <summary>
            指定したバッファメモリから画像を読み込む
            </summary>
            <param name="buf">入力のbyte配列</param>
            <param name="iscolor">出力の色を指定するフラグ</param>
            <returns></returns>        
        </member>
        <member name="M:OpenCvSharp.Cv.DecodeImageM(OpenCvSharp.CvMat,OpenCvSharp.LoadMode)">
            <summary>
            指定したバッファメモリから画像をCvMatとして読み込む
            </summary>
            <param name="buf">入力のbyte配列</param>
            <param name="iscolor">出力の色を指定するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="projMatr">入力の3x4の射影行列 P</param>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="projMatr">入力の3x4の射影行列 P</param>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
            <param name="rotMatrX">オプション出力の3x3のx軸周りでの回転行列</param>
            <param name="rotMatrY">オプション出力の3x3のy軸周りでの回転行列</param>
            <param name="rotMatrZ">オプション出力の3x3のz軸周りでの回転行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="projMatr">入力の3x4の射影行列 P</param>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
            <param name="rotMatrX">オプション出力の3x3のx軸周りでの回転行列</param>
            <param name="rotMatrY">オプション出力の3x3のy軸周りでの回転行列</param>
            <param name="rotMatrZ">オプション出力の3x3のz軸周りでの回転行列</param>
            <param name="eulerAngles">オプション出力の回転のオイラー角</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DeleteMoire(OpenCvSharp.IplImage)">
            <summary>
            入力画像のモアレを削除する
            </summary>
            <param name="img">入力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DestroyAllWindows">
            <summary>
            オープンされている全ての HighGUI ウィンドウを破棄する
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.DestroyWindow(System.String)">
            <summary>
            指定された名前のウィンドウを破棄する
            </summary>
            <param name="name">破棄するウィンドウの名前</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.
            </summary>
            <param name="src">入力配列（実数または複素数）</param>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.
            </summary>
            <param name="src">入力配列（実数または複素数）</param>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
            <param name="nonzeroRows">入力配列の非0である行の数（2次元順変換の場合），あるいは出力配列で注目する行の数（2次元逆変換の場合）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う. cvDFTのエイリアス.
            </summary>
            <param name="src">入力配列（実数または複素数）</param>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.FFT(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DFTFlag,System.Int32)">
            <summary>
            1次元あるいは2次元浮動小数点型配列に対して離散フーリエ変換（DFT），逆離散フーリエ変換（IDFT）を行う.cvDFTのエイリアス.
            </summary>
            <param name="src">入力配列（実数または複素数）</param>
            <param name="dst">入力配列と同じサイズ・タイプの出力配列</param>
            <param name="flags">変換フラグ</param>
            <param name="nonzeroRows">入力配列の非0である行の数（2次元順変換の場合），あるいは出力配列で注目する行の数（2次元逆変換の場合）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="element">膨張に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Dilate(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.IplConvKernel,System.Int32)">
            <summary>
            隣接ピクセルの形状を決定する指定された構造要素を用いて，入力画像を膨張する. 
            この関数はインプレースモード（src=dstである入力）をサポートする．膨張は複数回 (iterations) 繰り返すことができる．
            カラー画像の場合は，それぞれのチャンネルが独立に処理される． 
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="element">膨張に用いる構造要素．nullの場合は, 3×3 の矩形形状の構造要素を用いる．</param>
            <param name="iterations">膨張の回数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DisplayOverlay(System.String,System.String,System.Int32)">
            <summary>
            ウィンドウ画像上に，delay ミリ秒間だけテキストをオーバレイ表示します．これは，画像データを変更しません．テキストは画像の一番上に表示されます．
            </summary>
            <param name="name">ウィンドウの名前．</param>
            <param name="text">ウィンドウ画像上に描画される，オーバレイテキスト．</param>
            <param name="delayms">オーバレイテキストを表示する時間．直前のオーバレイテキストがタイムアウトするより前に，この関数が呼ばれると，タイマーは再起動されてテキストが更新されます．この値が0の場合，テキストは表示されません．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DisplayStatusBar(System.String,System.String,System.Int32)">
            <summary>
            ウィンドウのステータスバーに，delay ミリ秒間だけテキストを表示します．
            </summary>
            <param name="name">ウィンドウの名前．</param>
            <param name="text">ウィンドウのステータスバー上に描画されるテキスト．</param>
            <param name="delayms">テキストが表示される時間．直前のテキストがタイムアウトするより前に，この関数が呼ばれると，タイマーは再起動されてテキストが更新されます．この値が0の場合，テキストは表示されません．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[])">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
            <param name="mask">ユーザ定義の距離の場合はユーザ定義のマスク．3×3のマスクを用いる場合は2つの値（上下シフト値，斜めシフト値）を指定，5×5のマスクを用いる場合は3つの値（上下シフト値，斜めシフト値，ナイト移動シフト値（桂馬飛びのシフト値））を指定する．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[],OpenCvSharp.CvArr)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
            <param name="mask">ユーザ定義の距離の場合はユーザ定義のマスク．3×3のマスクを用いる場合は2つの値（上下シフト値，斜めシフト値）を指定，5×5のマスクを用いる場合は3つの値（上下シフト値，斜めシフト値，ナイト移動シフト値（桂馬飛びのシフト値））を指定する．</param>
            <param name="labels">オプション出力．整数ラベルに変換された2次元配列で，src ，dstと同じサイズ．現在は mask_size==3 あるいは 5 のときのみに使用される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DistTransform(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.DistanceType,System.Int32,System.Single[],OpenCvSharp.CvArr,OpenCvSharp.DistTransformLabelType)">
            <summary>
            入力画像中の値が0でないピクセルから，最も近い値が0のピクセルまでの距離を計算する
            </summary>
            <param name="src">入力画像（8ビット，シングルチャンネル，2値画像）</param>
            <param name="dst">距離計算結果をピクセル値として持つ出力画像 （32ビット浮動小数点型，シングルチャンネル）</param>
            <param name="distanceType">距離の種類．L1, L2, C か User</param>
            <param name="maskSize">距離変換マスクのサイズで，3，5，0 のいずれか． L1，C の場合，このパラメータ値は3に固定される．mask_size==0の場合，距離計算に別の近似無しアルゴリズムが用いられる．</param>
            <param name="mask">ユーザ定義の距離の場合はユーザ定義のマスク．3×3のマスクを用いる場合は2つの値（上下シフト値，斜めシフト値）を指定，5×5のマスクを用いる場合は3つの値（上下シフト値，斜めシフト値，ナイト移動シフト値（桂馬飛びのシフト値））を指定する．</param>
            <param name="labels">オプション出力．整数ラベルに変換された2次元配列で，src ，dstと同じサイズ．現在は mask_size==3 あるいは 5 のときのみに使用される．</param>
            <param name="labelType"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素同士を除算する (scale=1).
            dst(I)=scale*src1(I)/src2(I) [src1!=nullの場合],  
            dst(I)=scale/src2(I) [src1=nullの場合]
            </summary>
            <param name="src1">1番目の入力配列. nullの場合は，すべての要素が 1であると仮定する．</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Div(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            二つの配列の要素同士を除算する.
            dst(I)=scale*src1(I)/src2(I) [src1!=nullの場合],  
            dst(I)=scale/src2(I) [src1=nullの場合]
            </summary>
            <param name="src1">1番目の入力配列. nullの場合は，すべての要素が 1であると仮定する．</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="scale">任意のスケーリング係数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DotProduct(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            ユークリッド距離に基づく2つの配列の内積を計算する.
            src1•src2 = sumI(src1(I)*src2(I))
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <returns>ユークリッド距離に基づく2つの配列の内積</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawChessboardCorners(OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.CvPoint2D32f[],System.Boolean)">
            <summary>
            チェスボードからコーナーが完全に検出されていない場合（pattern_was_found=false）は，検出されたコーナーそれぞれに赤色の円を描く．
            また完全に検出されている場合（pattern_was_found=true）は，色付けされた各コーナを線分で接続して表示する． 
            </summary>
            <param name="image">コーナー点を表示する画像．8ビットカラー画像．</param>
            <param name="patternSize">チェスボードの各行と各列の内部コーナーの数．</param>
            <param name="corners">検出されたコーナーの配列．</param>
            <param name="patternWasFound">チェスボードからコーナーが完全に発見された(true)か，そうでない(false)かを示す．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="img">輪郭を描画する元画像．輪郭はROIで切り取られる．</param>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="img">輪郭を描画する元画像．輪郭はROIで切り取られる．</param>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="img">輪郭を描画する元画像．輪郭はROIで切り取られる．</param>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawContours(OpenCvSharp.CvArr,OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},OpenCvSharp.CvScalar,OpenCvSharp.CvScalar,System.Int32,System.Int32,OpenCvSharp.LineType,OpenCvSharp.CvPoint)">
            <summary>
            画像の外側輪郭線，または内側輪郭線を描画する
            </summary>
            <param name="img">輪郭を描画する元画像．輪郭はROIで切り取られる．</param>
            <param name="contour">最初の輪郭へのポインタ</param>
            <param name="externalColor">外側輪郭線の色</param>
            <param name="holeColor">内側輪郭線（穴）の色</param>
            <param name="maxLevel">描画される輪郭の最大レベル． 0にした場合，contourのみが描画される． 1にした場合，先頭の輪郭と，同レベルのすべての輪郭が描画される． 2にした場合，先頭の輪郭と同レベルのすべての輪郭と，先頭の輪郭の一つ下のレベルのすべての輪郭が描画される．以下同様．</param>
            <param name="thickness">描画される輪郭線の太さ. 負(例えば=Cv.FILLED)にした場合には，内部を塗りつぶす．</param>
            <param name="lineType">線の種類</param>
            <param name="offset">全ての座標を指定した値だけシフトする</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AbsDiff(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの差の絶対値を計算する.
            dst(I) = abs(src1(I) - src2(I)).
            </summary>
            <param name="src1">1番目の入力画像</param>
            <param name="src2">2番目の入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Abs(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の要素の絶対値を計算する. 
            dst(I) = abs(src(I)).
            すべての配列は同じタイプ，同じサイズ（または同じROIサイズ）でなければならない．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AbsDiffS(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvScalar)">
            <summary>
            配列の要素と定数との差の絶対値を計算する. 
            dst(I) = abs(src(I) - value).
            </summary>
            <param name="src">1番目の入力画像</param>
            <param name="dst">出力画像</param>
            <param name="value">スカラー</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータにフレームを加算する
            </summary>
            <param name="image">入力画像．1 または 3 チャンネル，8 ビットあるいは 32 ビット浮動小数点型．</param>
            <param name="sum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Acc(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            アキュムレータにフレームを加算する
            </summary>
            <param name="image">入力画像．1 または 3 チャンネル，8 ビットあるいは 32 ビット浮動小数点型．</param>
            <param name="sum">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
            <param name="mask">オプションの処理マスク．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
            <param name="blockSize">ピクセルの閾値を計算するために用いる隣接領域のサイズ： 3, 5, 7, ... </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AdaptiveThreshold(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.AdaptiveThresholdType,OpenCvSharp.ThresholdType,System.Int32,System.Double)">
            <summary>
            適応的な閾値処理を行い、グレースケール画像を2値画像に変換する
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="maxValue">threshold_type がBinaryあるいはBinaryInvのときに用いる最大値</param>
            <param name="adaptiveMethod">適応的閾値処理で使用するアルゴリズム</param>
            <param name="thresholdType">閾値処理の種類. BinaryかBinaryInvのどちらか</param>
            <param name="blockSize">ピクセルの閾値を計算するために用いる隣接領域のサイズ： 3, 5, 7, ... </param>
            <param name="param1">各適応手法に応じたパラメータ. 適応手法がMeanCおよびGaussianCの場合は，平均値または重み付き平均値から引く定数. 負の値の場合もある.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列を要素ごとに加算する. 
            dst(I)=src1(I)+src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Add(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列を要素ごとに加算する. 
            dst(I)=src1(I)+src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I)=src(I)+value
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I)=src(I)+value [mask(I)!=0 の場合]
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">加算するスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddText(OpenCvSharp.CvArr,System.String,OpenCvSharp.CvPoint,OpenCvSharp.CvFont)">
            <summary>
            画像上にテキストを描画します．
            </summary>
            <param name="img">文字列描画の対象となる画像．</param>
            <param name="text">画像上に描画されるテキスト．</param>
            <param name="location">画像上のテキストの開始位置 Point(x,y)．</param>
            <param name="font">テキストを描画するのに利用されるフォント．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AddWeighted(OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr,System.Double,System.Double,OpenCvSharp.CvArr)">
            <summary>
            入力配列 src1 のすべての要素にスカラー value を加え，結果を dst に保存する．
            dst(I) = src1(I)*alpha + src2(I)*beta + gamma
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="alpha">1番目の配列要素への重み</param>
            <param name="src2">2番目の入力配列スカラー</param>
            <param name="beta">2番目の配列要素への重み</param>
            <param name="gamma">加算結果に，さらに加えられるスカラー値</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Alloc(System.UInt32)">
            <summary>
            メモリバッファの領域を確保する
            </summary>
            <param name="size">バッファサイズ（バイト単位）</param>
            <returns>メモリを確保した領域へのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理積（AND）を計算する. 
            dst(I)=src1(I)&amp;src2(I)
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.And(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            二つの配列の要素ごとの論理積（AND）を計算する. 
            dst(I)=src1(I)&amp;src2(I) [mask(I)!=0の場合]
            </summary>
            <param name="src1">1番目の入力配列</param>
            <param name="src2">2番目の入力配列</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）． </param>
        </member>
        <member name="M:OpenCvSharp.Cv.AndS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理積(AND)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)&amp;value
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AndS(OpenCvSharp.CvArr,OpenCvSharp.CvScalar,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列の各要素とスカラーとのビット単位の論理積(AND)を計算する. 
            実際の計算の前に，スカラーは配列と同じタイプに変換される．浮動小数点型配列の場合，それらのビット表現が処理に使われる．
            dst(I)=src(I)&amp;value [mask(I)!=0の場合]
            </summary>
            <param name="src1">入力配列</param>
            <param name="value">処理に用いるスカラー</param>
            <param name="dst">出力配列</param>
            <param name="mask">処理マスク．8ビットシングルチャンネル配列（出力配列のどの要素が変更されるかを指定する）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="srcSeq">他のチェーンから参照可能なチェーンへの参照．</param>
            <param name="storage">計算結果保存用のストレージ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="srcSeq">他のチェーンから参照可能なチェーンへの参照．</param>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="srcSeq">他のチェーンから参照可能なチェーンへの参照．</param>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="srcSeq">他のチェーンから参照可能なチェーンへの参照．</param>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <param name="minimalPerimeter">minimal_perimeter以上の周囲長をもつ輪郭のみを計算する．その他のチェーンは結果の構造体から削除される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxChains(OpenCvSharp.CvChain,OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32,System.Boolean)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="srcSeq">他のチェーンから参照可能なチェーンへの参照．</param>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <param name="minimalPerimeter">minimal_perimeter以上の周囲長をもつ輪郭のみを計算する．その他のチェーンは結果の構造体から削除される．</param>
            <param name="recursive">trueの場合，src_seqからh_nextあるいはv_nextによって辿ることができる全てのチェーンを近似する．falseの場合，単一のチェーンを近似する． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxPoly(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double)">
            <summary>
            指定した精度でポリラインを近似する
            </summary>
            <param name="srcSeq">点のシーケンスまたは配列</param>
            <param name="headerSize">近似されたポリラインのヘッダサイズ．</param>
            <param name="storage">近似された輪郭の保存場所．nullの場合，入力シーケンスのストレージが使われる． </param>
            <param name="method">近似方法</param>
            <param name="parameter">近似方法に依存するパラメータ．CV_POLY_APPROX_DPの場合には，要求する近似精度である．</param>
            <returns>単一もしくは複数の近似曲線を計算した結果</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ApproxPoly(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint},System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double,System.Boolean)">
            <summary>
            指定した精度でポリラインを近似する
            </summary>
            <param name="srcSeq">点のシーケンスまたは配列</param>
            <param name="headerSize">近似されたポリラインのヘッダサイズ．</param>
            <param name="storage">近似された輪郭の保存場所．nullの場合，入力シーケンスのストレージが使われる． </param>
            <param name="method">近似方法</param>
            <param name="parameter">近似方法に依存するパラメータ．CV_POLY_APPROX_DPの場合には，要求する近似精度である．</param>
            <param name="parameter2">src_seqが点の配列（CvMat）の場合， このパラメータは輪郭が閉じている（parameter2=true）か，開いているか(parameter2=false)を指定する．</param>
            <returns>単一もしくは複数の近似曲線を計算した結果</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr)">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <param name="curve">配列</param>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr,OpenCvSharp.CvSlice)">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <param name="curve">配列</param>
            <param name="slice">曲線の始点と終点．デフォルトでは曲線の全ての長さが計算される．</param>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ArcLength(OpenCvSharp.CvArr,OpenCvSharp.CvSlice,System.Int32)">
            <summary>
            輪郭の周囲長または曲線の長さを計算する
            </summary>
            <param name="curve">配列</param>
            <param name="slice">曲線の始点と終点．デフォルトでは曲線の全ての長さが計算される．</param>
            <param name="isClosed">閉曲線かどうかを示す．次の3つの状態がある： 
            is_closed=0 - 曲線は閉曲線として扱われない． 
            is_closed&gt;0 - 曲線は閉曲線として扱われる． 
            is_closed&lt;0 - 曲線がシーケンスの場合， ((CvSeq*)curve)-&gt;flagsのフラグCV_SEQ_FLAG_CLOSEDから閉曲線かどうかを判別する．そうでない（曲線が点の配列（CvMat*）で表現される）場合，閉曲線として扱われない． 
            </param>
            <returns>輪郭の周囲長または曲線の長さ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList">
            <summary>
            構造体CvAttrListの初期化
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList(System.String[])">
            <summary>
            構造体CvAttrListの初期化
            </summary>
            <param name="attr">(attribute_name,attribute_value)のペアからなる配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AttrList(System.String[],OpenCvSharp.Pointer{OpenCvSharp.CvAttrList})">
            <summary>
            構造体CvAttrListの初期化
            </summary>
            <param name="attr">(attribute_name,attribute_value)のペアからなる配列</param>
            <param name="next">属性リストの次の塊へのポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Avg(OpenCvSharp.CvArr)">
            <summary>
            配列要素の平均値を各チャンネルで独立に計算する．
            </summary>
            <param name="arr">配列</param>
            <returns>平均値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Avg(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            配列要素の平均値を各チャンネルで独立に計算する．
            </summary>
            <param name="arr">配列</param>
            <param name="mask">オプションの処理マスク</param>
            <returns>平均値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.AvgSdv(OpenCvSharp.CvArr,OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@)">
            <summary>
            配列要素の平均と標準偏差を各チャンネルで独立に計算する．
            </summary>
            <param name="arr">配列</param>
            <param name="mean">計算結果の平均値の出力</param>
            <param name="stdDev">計算結果の標準偏差の出力</param>
        </member>
        <member name="M:OpenCvSharp.Cv.AvgSdv(OpenCvSharp.CvArr,OpenCvSharp.CvScalar@,OpenCvSharp.CvScalar@,OpenCvSharp.CvArr)">
            <summary>
            配列要素の平均と標準偏差を各チャンネルで独立に計算する．
            </summary>
            <param name="arr">配列</param>
            <param name="mean">計算結果の平均値の出力</param>
            <param name="stdDev">計算結果の標準偏差の出力</param>
            <param name="mask">オプションの処理マスク</param>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="cascade">Haar 分類器カスケード の内部表現</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <param name="minSize">最小ウィンドウサイズ．デフォルトでは分類器の学習に用いられたサンプルのサイズが設定される（顔検出の場合は，~20×20）.</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <param name="maxRadius">検出すべき円の最大半径 デフォルトの最大半径は max(image_width, image_height) にセットされている．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughCircles(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughCirclesMethod,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            ハフ変換を用いてグレースケール画像中の円を検出する
            </summary>
            <param name="image">入力画像 （8ビット，シングルチャンネル，グレースケール）．</param>
            <param name="circleStorage">検出された円を保存するメモリストレージ</param>
            <param name="method">現状では，CV_HOUGH_GRADIENT（基本的な2段階のハフ変換）のみ実装されている. </param>
            <param name="dp">円の中心を求める際に用いられる計算時の解像度．例えば，この値が 1 の場合は，計算は入力画像と同じ解像度で行われる．2 の場合は，計算は幅・高さともに1/2の解像度になる，等． </param>
            <param name="minDist">円検出における中心座標間の最小間隔．この値が非常に小さい場合は，正しく抽出されるべき円の近傍に複数の間違った円が検出されることになる．また，逆に非常に大きい場合は，円検出に失敗する． </param>
            <param name="param1">手法に応じた1番目のパラメータ． CV_HOUGH_GRADIENT の場合は，Cannyのエッジ検出器で用いる二つの閾値の高い方の値 (低い方の値は，この値を1/2したものになる）．</param>
            <param name="param2">手法に応じた2番目のパラメータ． CV_HOUGH_GRADIENT の場合は，中心検出計算時の閾値．小さすぎると誤検出が多くなる．これに対応する値が大きい円から順に検出される．</param>
            <param name="minRadius">検出すべき円の最小半径．</param>
            <param name="maxRadius">検出すべき円の最大半径 デフォルトの最大半径は max(image_width, image_height) にセットされている．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="image">入力画像（8ビット，シングルチャンネル，２値化画像）．確率的な手法の場合は，画像は関数内で変換される．</param>
            <param name="lineStorage">検出された線を保存するメモリストレージ. 関数によって線分のシーケンスがストレージ内につくられ，その参照が返される</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="image">入力画像（8ビット，シングルチャンネル，２値化画像）．確率的な手法の場合は，画像は関数内で変換される．</param>
            <param name="lineStorage">検出された線を保存するメモリストレージ. 関数によって線分のシーケンスがストレージ内につくられ，その参照が返される</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="image">入力画像（8ビット，シングルチャンネル，２値化画像）．確率的な手法の場合は，画像は関数内で変換される．</param>
            <param name="lineStorage">検出された線を保存する1行の行列/1列の行列. 行列のヘッダは，そのcols か rowsが検出された線の数となるように，この関数によって変更される．もし実際の線の数が行列のサイズを超える場合は，線の最大可能数が返される（標準的ハフ変換の場合は 投票数でソートされる）．</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.HoughLines2(OpenCvSharp.CvArr,OpenCvSharp.CvMat,OpenCvSharp.HoughLinesMethod,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            ハフ（Hough）変換を用いて2値画像から直線を検出する
            </summary>
            <param name="image">入力画像（8ビット，シングルチャンネル，２値化画像）．確率的な手法の場合は，画像は関数内で変換される．</param>
            <param name="lineStorage">検出された線を保存する1行の行列/1列の行列. 行列のヘッダは，そのcols か rowsが検出された線の数となるように，この関数によって変更される．もし実際の線の数が行列のサイズを超える場合は，線の最大可能数が返される（標準的ハフ変換の場合は 投票数でソートされる）．</param>
            <param name="method">ハフ変換の種類</param>
            <param name="rho">距離解像度（１ピクセル当たりの単位）</param>
            <param name="theta">角度解像度（ラジアン単位で計測）</param>
            <param name="threshold">閾値パラメータ．対応する投票数がthresholdより大きい場合のみ，抽出された線が返される．</param>
            <param name="param1">各手法に応じた１番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，最小の線の長さ．マルチスケールハフ変換では， 距離解像度rhoの除数．（荒い距離解像度では rho であり，詳細な解像度では (rho / param1) となる）．</param>
            <param name="param2">各手法に応じた２番目のパラメータ．標準的ハフ変換では，使用しない（0）．確率的ハフ変換では，同一線上に存在する線分として扱う（つまり，それらを統合しても問題ない），二つの線分の最大の間隔． マルチスケールハフ変換では，角度解像度 thetaの除数． （荒い角度解像度では theta であり，詳細な解像度では (theta / param2) となる）． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rand(OpenCvSharp.CvRandState,OpenCvSharp.CvArr)">
            <summary>
            配列をランダムな値で埋める
            </summary>
            <param name="state"></param>
            <param name="arr"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandArr(OpenCvSharp.CvRNG,OpenCvSharp.CvArr,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            一様または正規分布の乱数で出力配列を埋める 
            </summary>
            <param name="rng">cvRNGによって初期化されたRNGの状態</param>
            <param name="arr">出力配列</param>
            <param name="distType">分布のタイプ</param>
            <param name="param1">分布の第一パラメータ．一様分布では，発生する乱数の下限値（この値を含む）である． 正規分布では，乱数の平均値である．</param>
            <param name="param2">分布の第二パラメータ．一様分布では，発生する乱数の上限値（この値は含まない）である． 正規分布では，乱数の標準偏差である．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInit(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInit(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
            <param name="disttype"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandInt(OpenCvSharp.CvRNG)">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <param name="rng">RNG state initialized by RandInit and, optionally, customized by RandSetRange (though, the latter function does not affect on the discussed function outcome). </param>
            <returns>uniformly-distributed random 32-bit unsigned integer</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RandReal(OpenCvSharp.CvRNG)">
            <summary>
            Returns floating-point random number and updates RNG
            </summary>
            <param name="rng">RNG state initialized by cvRNG. </param>
            <returns>uniformly-distributed random floating-point number from 0..1 range (1 is not included).</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RANSACUpdateNumIters(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            updates the number of RANSAC iterations
            </summary>
            <param name="p"></param>
            <param name="errProb"></param>
            <param name="modelPoints"></param>
            <param name="maxIters"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RandSetRange(OpenCvSharp.CvRandState,System.Double,System.Double)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="state"></param>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandSetRange(OpenCvSharp.CvRandState,System.Double,System.Double,System.Int32)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="state"></param>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="index"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr)">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
            <param name="mat">入力/出力行列．インプレースモードでシャッフルされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr,OpenCvSharp.CvRNG)">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
            <param name="mat">入力/出力行列．インプレースモードでシャッフルされる．</param>
            <param name="rng">要素のシャッフルで用いられる Random Number Generator．ポインタがnullの場合，一時的なRNGが生成され，利用される．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RandShuffle(OpenCvSharp.CvArr,OpenCvSharp.CvRNG,System.Double)">
            <summary>
            ランダムに選ばれた配列要素ペアの入れ替えを反復することにより行列をシャッフルする（マルチチャンネル配列の場合，それぞれの要素は複数の成分を含む）．
            </summary>
            <param name="mat">入力/出力行列．インプレースモードでシャッフルされる．</param>
            <param name="rng">要素のシャッフルで用いられる Random Number Generator．ポインタがnullの場合，一時的なRNGが生成され，利用される．</param>
            <param name="iterFactor">シャッフルの強さを指定するパラメータ.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Range(OpenCvSharp.CvArr,System.Double,System.Double)">
            <summary>
            与えられた範囲の数で行列を埋める．次のように行列を初期化する．
            arr(i,j) = (End-Start) * (i*cols(arr)+j) / (cols(arr)*rows(arr)) 
            </summary>
            <param name="mat">初期化される行列．これは，整数型あるいは浮動小数点型 32 ビットシングルチャンネルでなくてはならない．</param>
            <param name="start">範囲の下限（範囲に含まれる）</param>
            <param name="end">範囲の上限（範囲に含まれない）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Read``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode)">
            <summary>
            オブジェクトをデコードし，その参照を返す.
            </summary>
            <typeparam name="T">返却値の型(CvArr派生型)</typeparam>
            <param name="fs">ファイルストレージ</param>
            <param name="node">ルートオブジェクトノード</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadByName``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            オブジェクトをデコードし，デコードする.
            cvGetFileNodeByName とcvReadの単純な合成である．
            </summary>
            <typeparam name="T">返却値の型(CvArr派生型)</typeparam>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する．</param>
            <param name="name">ノード名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadChainPoint(OpenCvSharp.CvChainPtReader)">
            <summary>
            チェーン上の次の点を得る
            </summary>
            <param name="reader">チェーンリーダの状態</param>
            <returns>現在のチェーン上の点</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadInt(OpenCvSharp.CvFileNode)">
            <summary>
            ファイルノードで表現された整数値を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadInt(OpenCvSharp.CvFileNode,System.Int32)">
            <summary>
            ファイルノードで表現された整数値を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadIntByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadIntの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadIntByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.Int32)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadIntの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRawData``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,``0[]@,System.String)">
            <summary>
            複数の数値を読み込む
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">ファイルストレージ</param>
            <param name="src">数値を読み込むファイルノード(シーケンス)</param>
            <param name="dst">書き込み先の配列へのポインタ．</param>
            <param name="dt">配列の個々の要素の仕様．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRawDataSlice``1(OpenCvSharp.CvFileStorage,OpenCvSharp.CvSeqReader,System.Int32,``0[]@,System.String)">
            <summary>
            複数の数値のシーケンスを読み込む
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fs">ファイルストレージ</param>
            <param name="reader">シーケンスリーダ</param>
            <param name="count">読み込む要素数</param>
            <param name="dst">出力配列</param>
            <param name="dt">各配列要素の仕様</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadReal(OpenCvSharp.CvFileNode)">
            <summary>
            ファイルノードで表現された浮動小数点型の値を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadReal(OpenCvSharp.CvFileNode,System.Double)">
            <summary>
            ファイルノードで表現された浮動小数点型の値を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRealByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadRealの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadRealByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.Double)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadRealの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadString(OpenCvSharp.CvFileNode)">
            <summary>
            ファイルノードで表現された文字列を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadString(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードで表現された文字列を返す．
            </summary>
            <param name="node">ファイルノード</param>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadStringByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadStringの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReadStringByName(OpenCvSharp.CvFileStorage,OpenCvSharp.CvFileNode,System.String,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadStringの単純な合成である．
            </summary>
            <param name="fs">ファイルストレージ</param>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RealScalar(System.Double)">
            <summary>
            指定した値を先頭要素とし、残りを0で初期化し、返す
            </summary>
            <param name="val0"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Rectangle(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1X">矩形の一つの頂点のx座標</param>
            <param name="pt1Y">矩形の一つの頂点のy座標</param>
            <param name="pt2X">矩形の反対側の頂点のx座標</param>
            <param name="pt2Y">矩形の反対側の頂点のy座標</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる.</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="pt1">矩形の一つの頂点</param>
            <param name="pt2">矩形の反対側の頂点</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.DrawRect(OpenCvSharp.CvArr,OpenCvSharp.CvRect,OpenCvSharp.CvScalar,System.Int32,OpenCvSharp.LineType,System.Int32)">
            <summary>
            枠のみ，もしくは塗りつぶされた矩形を描画する
            </summary>
            <param name="img">画像</param>
            <param name="rect">矩形</param>
            <param name="color">線の色(RGB)，もしくは輝度(グレースケール画像).</param>
            <param name="thickness">矩形を描く線の太さ．負の値，例えばCV_FILLEDを指定した場合は塗りつぶされる．</param>
            <param name="lineType">線の種類</param>
            <param name="shift">座標の小数点以下の桁を表すビット数</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(OpenCvSharp.CvErrorCallback)">
            <summary>
            新しいエラーハンドラをセットする
            </summary>
            <param name="error_handler">新しいエラーハンドラ</param>
            <returns>現在のエラーハンドラ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(OpenCvSharp.CvErrorCallback,System.IntPtr,System.IntPtr@)">
            <summary>
            新しいエラーハンドラをセットする
            </summary>
            <param name="error_handler">新しいエラーハンドラ</param>
            <param name="userdata">エラーハンドラへの引数として渡される任意のポインタ</param>
            <param name="prev_userdata">あらかじめ割り当てられているユーザデータへのポインタのポインタ</param>
            <returns>現在のエラーハンドラ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(System.IntPtr)">
            <summary>
            新しいエラーハンドラをセットする
            </summary>
            <param name="error_handler">新しいエラーハンドラ</param>
            <returns>現在のエラーハンドラ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RedirectError(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            新しいエラーハンドラをセットする
            </summary>
            <param name="error_handler">新しいエラーハンドラ</param>
            <param name="userdata">エラーハンドラへの引数として渡される任意のポインタ</param>
            <param name="prev_userdata">あらかじめ割り当てられているユーザデータへのポインタのポインタ</param>
            <returns>現在のエラーハンドラ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
            <param name="dim">配列をどのように縮小するかを示すインデックス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reduce(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.ReduceDimension,OpenCvSharp.ReduceOperation)">
            <summary>
            行列をベクトルへ縮小する
            </summary>
            <param name="src">入力行列</param>
            <param name="dst">行（または1列）の出力ベクトル（すべての行/列から指定された方法で計算される）</param>
            <param name="dim">配列をどのように縮小するかを示すインデックス</param>
            <param name="type">縮小処理の種類</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RegisterType(OpenCvSharp.CvTypeInfo)">
            <summary>
            新しい型を登録する
            </summary>
            <param name="info">型情報構造体</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Release(System.IntPtr@)">
            <summary>
            オブジェクトを解放する
            </summary>
            <param name="struct_ptr">オブジェクトのポインタのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Release(OpenCvSharp.ICvPtrHolder@)">
            <summary>
            オブジェクトを解放する
            </summary>
            <param name="struct_ptr">オブジェクトのポインタのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseBGCodeBookModel(OpenCvSharp.CvBGCodeBookModel)">
            <summary>
            BGCodeBookModel 構造体を解放する
            </summary>
            <param name="model">解放する構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseCapture(OpenCvSharp.CvCapture)">
            <summary>
            CvCapture 構造体を解放する
            </summary>
            <param name="capture">キャプチャ構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseConDensation(OpenCvSharp.CvConDensation)">
            <summary>
            ConDensation フィルタ構造体を解放する
            </summary>
            <param name="condens">解放する構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseData(OpenCvSharp.CvArr)">
            <summary>
            配列データを解放する． 
            </summary>
            <param name="arr">配列ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFaceTracker(OpenCvSharp.CvFaceTracker)">
            <summary>
            
            </summary>
            <param name="ppFaceTracker"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFeatureTree(OpenCvSharp.CvFeatureTree)">
            <summary>
            特徴ベクトルのツリーを解放する
            </summary>
            <param name="tr">解放されるツリーへのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseFileStorage(OpenCvSharp.CvFileStorage)">
            <summary>
            ファイルを閉じて，一時的な構造体をすべて解放する．
            この関数は，すべての入出力操作が終了した後に実行されなければならない． 
            </summary>
            <param name="fs">解放するファイルへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseGraphScanner(OpenCvSharp.CvGraphScanner)">
            <summary>
            グラフの走査処理を終了する
            </summary>
            <param name="scanner">スキャナへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade)">
            <summary>
            Haar分類器カスケードを解放する 
            </summary>
            <param name="cascade">解放するカスケード分類器への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseHist(OpenCvSharp.CvHistogram)">
            <summary>
            ヒストグラム（ヘッダ・データ）を解放する． 
            ヒストグラムへのポインタは，この関数でクリアされる． 
            </summary>
            <param name="hist">解放するヒストグラムへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseImage(OpenCvSharp.IplImage)">
            <summary>
            ヘッダと画像データを解放する
            </summary>
            <param name="image">確保した画像ヘッダへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseImageHeader(OpenCvSharp.IplImage)">
            <summary>
            画像のヘッダを解放する
            </summary>
            <param name="image">確保したヘッダへの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseKalman(OpenCvSharp.CvKalman)">
            <summary>
            カルマンフィルタ構造体を解放する
            </summary>
            <param name="kalman">カルマンフィルタクラス</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseLatentSvmDetector(OpenCvSharp.CvLatentSvmDetector)">
            <summary>
            release memory allocated for CvLatentSvmDetector structure
            </summary>
            <param name="detector"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseLSH(OpenCvSharp.CvLSH)">
            <summary>
            Free the given LSH structure.
            </summary>
            <param name="lsh"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMat(OpenCvSharp.CvMat)">
            <summary>
            行列を解放する
            </summary>
            <param name="mat">行列への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMatND(OpenCvSharp.CvMatND)">
            <summary>
            CvMatNDを解放する
            </summary>
            <param name="mat">行列への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMemStorage(OpenCvSharp.CvMemStorage)">
            <summary>
            メモリストレージを解放する
            </summary>
            <param name="storage">解放するストレージの参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleasePOSITObject(OpenCvSharp.CvPOSITObject)">
            <summary>
            3次元オブジェクト構造体のメモリを解放する
            </summary>
            <param name="positObject">構造体 CvPOSIT への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleasePyramid(OpenCvSharp.CvMat[],System.Int32)">
            <summary>
            Releases pyramid
            </summary>
            <param name="pyramid"></param>
            <param name="extra_layers"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseMatND(OpenCvSharp.CvSparseMat)">
            <summary>
            疎な配列を解放する
            </summary>
            <param name="mat">配列への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStereoBMState(OpenCvSharp.CvStereoBMState)">
            <summary>
            ステレオブロックマッチング構造体を解放する
            </summary>
            <param name="state">解放される構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStereoGCState(OpenCvSharp.CvStereoGCState)">
            <summary>
            グラフカットアルゴリズムに基づくステレオマッチング構造体を解放する
            </summary>
            <param name="state">解放される構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseStructuringElement(OpenCvSharp.IplConvKernel)">
            <summary>
            cvDilate, cvErodeで用いる構造要素を解放する
            </summary>
            <param name="element">構造要素</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReleaseVideoWriter(OpenCvSharp.CvVideoWriter)">
            <summary>
            ビデオファイルライタを解放する
            </summary>
            <param name="writer">ビデオライタ構造体への参照</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
            <param name="flags">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Remap(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation,OpenCvSharp.CvScalar)">
            <summary>
            画像に対して幾何変換を行う. 指定されたマップを用いて入力画像を以下のように変換する．
            dst(x,y)&lt;-src(mapx(x,y),mapy(x,y)) .
            他の幾何変換と同様，非整数座標値を持つピクセルを抽出するために，ユーザによって指定された補間方法が用いられる．
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="mapx">x座標マップ (32FC1 フォーマットの画像)</param>
            <param name="mapy">y座標マップ (32FC1 フォーマットの画像)</param>
            <param name="flags">補間方法</param>
            <param name="fillval">対応の取れない点に対して与える値</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RemoveNodeFromTree``1(OpenCvSharp.CvTreeNode{``0},OpenCvSharp.CvTreeNode{``0})">
            <summary>
            ツリーからノードを削除する
            </summary>
            <param name="node">削除されるノード．</param>
            <param name="frame">トップレベルノード．node->v_prev = null かつ node->h_prev = null （つまり，node が frameの最初の子ノードである）である場合， 
            frame->v_next は node->h_next にセットされる (つまり，最初の子ノードかframeが変更される）．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Repeat(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            出力配列を入力配列でタイル状に埋める
            </summary>
            <param name="src">入力配列，画像または行列．</param>
            <param name="dst">出力配列，画像または行列．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ReprojectImageTo3D(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvMat)">
            <summary>
            視差画像を三次元空間に再投影する
            </summary>
            <param name="disparityImage">視差画像</param>
            <param name="_3dImage">3 チャンネル，16ビット あるいは 32ビットの浮動小数点型画像． 出力は，三次元点の集合になる．</param>
            <param name="Q">4×4 の再投影行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ResetImageROI(OpenCvSharp.IplImage)">
            <summary>
            画像の ROI を解放する．解放後は全画像が選択されている状態と同じになる．
            </summary>
            <param name="image">画像ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat@,System.Int32,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="new_rows">新しい行数． new_rows = 0は，行数がnew_cnの値に応じて変更する必要があるのにも関わらず，変更されないままであることを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Reshape(OpenCvSharp.CvArr,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            オリジナルの配列と同じデータだが，異なる形状（異なるチャンネル数，異なる行数，またその両方）を持つCvMatのヘッダを初期化する．
            </summary>
            <param name="arr">入力配列</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="new_rows">新しい行数． new_rows = 0は，行数がnew_cnの値に応じて変更する必要があるのにも関わらず，変更されないままであることを意味する．</param>
            <returns>行列データ</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReshapeMatND``1(OpenCvSharp.CvArr,System.Int32,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            cvReshape の拡張バージョン．
            これは多次元配列を扱うことが可能（普通の画像と行列に対しても使用することが可能）で，さらに次元の変更も可能である．
            </summary>
            <typeparam name="T">出力ヘッダの型</typeparam>
            <param name="arr">入力配列</param>
            <param name="sizeof_header">IplImageとCvMat，CvMatNDそれぞれの出力ヘッダを区別するための出力ヘッダのサイズ．</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="new_dims">新しい次元数． new_dims = 0は，次元数が同じままであることを意味する．</param>
            <param name="new_sizes">新しい次元サイズの配列．要素の総数は変化してはいけないので，new_dims-1の値のみ使用される．従って，new_dims = 1であればnew_sizesは使用されない．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ReshapeND``1(OpenCvSharp.CvArr,``0,System.Int32,System.Int32,System.Int32[])">
            <summary>
            cvReshape の拡張バージョン．
            これは多次元配列を扱うことが可能（普通の画像と行列に対しても使用することが可能）で，さらに次元の変更も可能である．
            </summary>
            <typeparam name="T">出力ヘッダの型</typeparam>
            <param name="arr">入力配列</param>
            <param name="header">書き込まれる出力ヘッダ</param>
            <param name="new_cn">新しいチャンネル数 ．new_cn = 0はチャンネル数が変更されていないことを意味する．</param>
            <param name="new_dims">新しい次元数． new_dims = 0は，次元数が同じままであることを意味する．</param>
            <param name="new_sizes">新しい次元サイズの配列．要素の総数は変化してはいけないので，new_dims-1の値のみ使用される．従って，new_dims = 1であればnew_sizesは使用されない．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Resize(OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            画像のサイズ変更を行う (バイリニア補間)
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
        </member>
        <member name="M:OpenCvSharp.Cv.Resize(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.Interpolation)">
            <summary>
            画像のサイズ変更を行う
            </summary>
            <param name="src">入力画像</param>
            <param name="dst">出力画像</param>
            <param name="interpolation">補間方法</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ResizeWindow(System.String,System.Int32,System.Int32)">
            <summary>
            ウィンドウサイズを変更する
            </summary>
            <param name="name">サイズ変更するウィンドウの名前</param>
            <param name="width">新しい幅</param>
            <param name="height">新しい高さ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RestoreMemStoragePos(OpenCvSharp.CvMemStorage,OpenCvSharp.CvMemStoragePos)">
            <summary>
            メモリストレージの位置を復元する
            </summary>
            <param name="storage">メモリストレージ</param>
            <param name="pos">新しいストレージの先頭位置</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture)">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture,System.Int32)">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RetrieveFrame(OpenCvSharp.CvCapture,OpenCvSharp.CameraChannels)">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="capture">ビデオキャプチャクラス</param>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RNG">
            <summary>
            乱数生成器の状態を初期化する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RNG(System.UInt64)">
            <summary>
            乱数生成器の状態を初期化する
            </summary>
            <param name="seed">ランダムシーケンスを開始するために使用される64ビットの数値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            回転ベクトルを回転行列に変換する．またはその逆も可能である．
            </summary>
            <param name="src">入力の回転ベクトル（3x1 あるいは 1x3），または回転行列（3x3）</param>
            <param name="dst">各入力に対応した出力の回転行列（3x3），または回転ベクトル（3x1 あるいは 1x3）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            回転ベクトルを回転行列に変換する．またはその逆も可能である．
            </summary>
            <param name="src">入力の回転ベクトル（3x1 あるいは 1x3），または回転行列（3x3）</param>
            <param name="dst">各入力に対応した出力の回転行列（3x3），または回転ベクトル（3x1 あるいは 1x3）</param>
            <param name="jacobian">オプション出力の3x9または9x3のヤコビアン - 出力配列の各要素の，入力配列の各要素に関する偏微分係数．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.Round(System.Double)">
            <summary>
            引数に最も近い整数値を返す.
            </summary>
            <param name="value">浮動小数点型の入力値</param>
            <returns>引数に最も近い整数値</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>
            <param name="matrixM">入力の3x3行列 M</param>
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>
            <param name="matrixM">入力の3x3行列 M</param>
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
            <param name="matrixQx">オプション出力の3x3のx軸を中心とする回転行列</param>
            <param name="matrixQy">オプション出力の3x3のy軸を中心とする回転行列</param>
            <param name="matrixQz">オプション出力の3x3のz軸を中心とする回転行列</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>
            <param name="matrixM">入力の3x3行列 M</param>
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
            <param name="matrixQx">オプション出力の3x3のx軸を中心とする回転行列</param>
            <param name="matrixQy">オプション出力の3x3のy軸を中心とする回転行列</param>
            <param name="matrixQz">オプション出力の3x3のz軸を中心とする回転行列</param>
            <param name="eulerAngles">オプション出力の回転のオイラー角</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RunHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvPoint)">
            <summary>
            ブーストされた分類器のカスケードを，与えられた画像位置で実行する
            </summary>
            <param name="cascade">Haar分類器カスケード</param>
            <param name="pt">解析する領域の左上の角</param>
            <returns>分析対象の領域が全ての分類器ステージを通過した場合（これは候補の一つになる）はtrue，そうでなければfalse．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RunHaarClassifierCascade(OpenCvSharp.CvHaarClassifierCascade,OpenCvSharp.CvPoint,System.Boolean)">
            <summary>
            ブーストされた分類器のカスケードを，与えられた画像位置で実行する
            </summary>
            <param name="cascade">Haar分類器カスケード</param>
            <param name="pt">解析する領域の左上の角</param>
            <param name="start_stage">0から始まるインデックスで，カスケードステージをどこ から開始するかを決定する</param>
            <returns>分析対象の領域が全ての分類器ステージを通過した場合（これは候補の一つになる）はtrue，そうでなければfalse．</returns>
        </member>
        <member name="M:OpenCvSharp.Cv.RunningAvg(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            入力画像 image と アキュムレータ acc の重み付き和を計算し，その結果 acc がフレーム列の現在の平均値になる.
            mask(x,y)!=0の場合，acc(x,y)=(1-α)•acc(x,y) + α•image(x,y) 
            </summary>
            <param name="image">入力画像，1 または 3 チャンネル，8 ビットあるいは 32 ビッ ト浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="acc">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
            <param name="alpha">入力画像の重み．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.RunningAvg(OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double,OpenCvSharp.CvArr)">
            <summary>
            入力画像 image と アキュムレータ acc の重み付き和を計算し，その結果 acc がフレーム列の現在の平均値になる.
            mask(x,y)!=0の場合，acc(x,y)=(1-α)•acc(x,y) + α•image(x,y) 
            </summary>
            <param name="image">入力画像，1 または 3 チャンネル，8 ビットあるいは 32 ビッ ト浮動小数点型．（マルチチャンネル画像の各チャンネルは，個別に処理される）.</param>
            <param name="acc">入力画像と同じチャンネル数のアキュムレータ，32 ビットあるいは 64 ビット浮動小数点型．</param>
            <param name="alpha">入力画像の重み．</param>
            <param name="mask">オプションの処理マスク．</param>
        </member>
        <member name="M:OpenCvSharp.Cv.ToPtr(OpenCvSharp.ICvPtrHolder)">
            <summary>
            Returns obj.CvPtr if obj != null; otherwise, IntPtr.Zero
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts IEnumerable to Array
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.Cv.WHOLE_SEQ">
            <summary>
            CV_WHOLE_SEQ
            </summary>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            指定した2つの行列のデータタイプが等しければtrueを返す
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            指定した2つの行列のデータタイプが等しければtrueを返す
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_TYPES_EQ(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            指定した2つの行列のデータタイプが等しければtrueを返す
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_CNS_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            指定した2つの行列のチャンネル数が同じならばtrueを返す
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_DEPTHS_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ARE_SIZES_EQ(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="mat1">1つ目の入力行列</param>
            <param name="mat2">2つ目の入力行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ELEM_SIZE1(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.ELEM_SIZE(System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.FOURCC(System.String)">
            <summary>
            4つの文字からFOURCCの整数値を得る
            </summary>
            <param name="fourcc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_IMAGE_HDR(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_IMAGE(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(OpenCvSharp.CvGraphEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_EDGE_VISITED(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(OpenCvSharp.CvGraphVtx)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_GRAPH_VERTEX_VISITED(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="vtx"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT_HDR(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_MAT(OpenCvSharp.ICvPtrHolder)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(OpenCvSharp.CvSetElem)">
            <summary>
            指定したノードが使用されているかどうかを判断する
            </summary>
            <param name="elem">ノードポインタ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(OpenCvSharp.ICvPtrHolder)">
            <summary>
            指定したノードが使用されているかどうかを判断する
            </summary>
            <param name="ptr">ノードポインタ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.IS_SET_ELEM(System.IntPtr)">
            <summary>
            指定したノードが使用されているかどうかを判断する
            </summary>
            <param name="ptr">ノードポインタ</param>
        </member>
        <member name="M:OpenCvSharp.Cv.MAKETYPE(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="depth"></param>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_CN(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_DEPTH(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_ELEM_PTR_FAST(OpenCvSharp.CvMat,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="pixSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_ELEM_PTR(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.CV_MAT_ELEM``1(OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.MAT_TYPE(System.Int32)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NEXT_LINE_POINT(OpenCvSharp.CvLineIterator)">
            <summary>
            
            </summary>
            <param name="lineIterator"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.NEXT_SEQ_ELEM(System.Int32,OpenCvSharp.CvSeqReader)">
            <summary>
            次のシーケンスへ
            </summary>
            <param name="elemSize"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IDX(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_IDX
            </summary>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_VAL``1(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_VAL(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <param name="mat"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_TYPE(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_INT(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_REAL(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_STRING(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_SEQ(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_MAP(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_COLLECTION(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_FLOW(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_EMPTY(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_IS_USER(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.NODE_HAS_NAME(OpenCvSharp.NodeType)">
            <summary>
            
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.PREV_SEQ_ELEM(System.Int32,OpenCvSharp.CvSeqReader)">
            <summary>
            前のシーケンスへ
            </summary>
            <param name="elemSize"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.READ_SEQ_ELEM``1(``0@,OpenCvSharp.CvSeqReader)">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる
            </summary>
            <param name="elem"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.REV_READ_SEQ_ELEM``1(``0@,OpenCvSharp.CvSeqReader)">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる
            </summary>
            <param name="elem"></param>
            <param name="reader"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.RGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            カラー値を作成する
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SUBDIV2D_NEXT_EDGE(OpenCvSharp.CvSubdiv2DEdge)">
            <summary>
            
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Cv.SWAP(System.Object@,System.Object@)">
            <summary>
            2つの引数の値を入れ替える (OpenCV準拠版)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.SWAP``1(``0@,``0@)">
            <summary>
            2つの引数の値を入れ替える (ジェネリック版)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM_VAR(System.IntPtr,OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <param name="elemPtr"></param>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM``1(``0,OpenCvSharp.CvSeqWriter)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.Cv.WRITE_SEQ_ELEM``1(``0,OpenCvSharp.CvSeqWriter{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
            <param name="writer"></param>
        </member>
        <member name="T:OpenCvSharp.CvErrorCallback">
            <summary>
            エラーハンドラ
            </summary>
            <param name="status">エラーステータス</param>
            <param name="funcName">エラーが発生したOpenCVの関数名</param>
            <param name="errMsg">エラーについての追加情報/診断結果</param>
            <param name="fileName">エラーが発生したファイル名</param>
            <param name="line">エラーが発生した行番号</param>
            <param name="userdata"></param>    
        </member>
        <member name="T:OpenCvSharp.CvCallback">
            <summary>
            読み込みコールバック関数
            </summary>
            <param name="index"></param>
            <param name="buffer"></param>
            <param name="user_data"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvOpenGLCallback">
            <summary>
            
            </summary>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvButtonCallback">
            <summary>
            ボタン状態が変更される度に呼び出されるdelegate
            </summary>
            <param name="state"></param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvButtonCallbackNative">
            <summary>
            Pointer to the function to be called every time the button changed its state.
            </summary>
            <param name="state"></param>
            <param name="userdata"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.EigenObjectsIOFlag">
            <summary>
            主成分分析関数の入出力フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.NoCallback">
            <summary>
            
            [CV_EIGOBJ_NO_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.InputCallback">
            <summary>
            
            [CV_EIGOBJ_INPUT_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.OutputCallback">
            <summary>
            
            [CV_EIGOBJ_OUTPUT_CALLBACK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.EigenObjectsIOFlag.BothCallback">
            <summary>
            
            [CV_EIGOBJ_BOTH_CALLBACK]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HardwareSupport">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.None">
            <summary>
            
            [CV_CPU_NONE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.MMX">
            <summary>
            
            [CV_CPU_MMX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE">
            <summary>
            
            [CV_CPU_SSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE2">
            <summary>
            
            [CV_CPU_SSE2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE3">
            <summary>
            
            [CV_CPU_SSE3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSSE3">
            <summary>
            
            [CV_CPU_SSSE3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE4_1">
            <summary>
            
            [CV_CPU_SSE4_1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.SSE4_2">
            <summary>
            
            [CV_CPU_SSE4_2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.POPCNT">
            <summary>
            
            [CV_CPU_POPCNT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.AVX">
            <summary>
            
            [CV_CPU_AVX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HardwareSupport.MaxFeature">
            <summary>
            
            [CV_HARDWARE_MAX_FEATURE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.KMeansFlag">
            <summary>
            cvKMeans2の処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.Zero">
            <summary>
            
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.RandomCenters">
            <summary>
            
            [KMEANS_RANDOM_CENTERS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.PpCenters">
            <summary>
            
            [KMEANS_PP_CENTERS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.KMeansFlag.UseInitialLabels">
            <summary>
            
            [CV_KMEANS_USE_INITIAL_LABELS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DominantsFlag">
            <summary>
            cvFindDominantPointsの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DominantsFlag.IPAN">
            <summary>
             
            [CV_DOMINANT_IPAN]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MarkerStyle">
            <summary>
            CvArr.DrawMarkerで用いるマーカーの形状
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleLine">
            <summary>
            円（線のみ）
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleFilled">
            <summary>
            円（塗りつぶし）
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.Cross">
            <summary>
            十字
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.TiltedCross">
            <summary>
            バツ
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleAndCross">
            <summary>
            円と十字
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.CircleAndTiltedCross">
            <summary>
            円とバツ
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.DiamondLine">
            <summary>
            菱形（線のみ）
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.DiamondFilled">
            <summary>
            菱形（塗りつぶし）
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.SquareLine">
            <summary>
            正方形（線のみ）
            </summary>
        </member>
        <member name="F:OpenCvSharp.MarkerStyle.SquareFilled">
            <summary>
            正方形（塗りつぶし）
            </summary>
        </member>
        <member name="T:OpenCvSharp.ImageEncodingID">
            <summary>
            cv::imwrite, cv::inencode で用いるエンコードの種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.JpegQuality">
            <summary>
            JPEGの場合のフラグ。0から100の値を取る（大きいほど高品質）。デフォルト値は95。
            [CV_IMWRITE_JPEG_QUALITY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.PngCompression">
            <summary>
            PNGの場合のフラグ。圧縮レベルを0から9の値で指定する（大きいほど高圧縮率で、かつ圧縮に時間を要する）。デフォルト値は3。
            [CV_IMWRITE_PNG_COMPRESSION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageEncodingID.PxmBinary">
            <summary>
            PPM, PGM, PBMの場合のフラグ。フォーマットをバイナリ(1)かアスキー(0)かで指定する。デフォルト値は1。
            [CV_IMWRITE_PXM_BINARY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.WindowProperty">
            <summary>
            ウィンドウのプロパティを取得・設定する際のプロパティID(cvGetWindowProperty/cvSetWindowProperty)
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.AutoSize">
            <summary>
            通常モード
            [CV_WND_PROP_AUTOSIZE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.Fullscreen">
            <summary>
            フルスクリーン
            [CV_WND_PROP_FULLSCREEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.AspectRatio">
            <summary>
            
            [CV_WND_PROP_ASPECTRATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowProperty.OpenGL">
            <summary>
            opengl support
            [CV_WND_PROP_OPENGL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.WindowPropertyValue">
            <summary>
            New value of the window property.
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowPropertyValue.Normal">
            <summary>
            Change the window to normal size or make the window resizable.
            [CV_WINDOW_NORMAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowPropertyValue.AutoSize">
            <summary>
            Constrain the size by the displayed image. The window is not resizable.
            [CV_WINDOW_AUTOSIZE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowPropertyValue.FullScreen">
            <summary>
            Change the window to fullscreen.
            [CV_WINDOW_FULLSCREEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowPropertyValue.FreeRatio">
            <summary>
            Make the window resizable without any ratio constraints.
            [CV_WINDOW_FREERATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowPropertyValue.KeepRatio">
            <summary>
             Make the window resizable, but preserve the proportions of the displayed image.
            [CV_WINDOW_KEEPRATIO]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFaceElements">
            <summary>
            CV_FACE_ELEMENTS
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.Mouth">
            <summary>
            
            [CV_FACE_MOUTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.LeftEye">
            <summary>
            
            [CV_FACE_LEFT_EYE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceElements.RightEye">
            <summary>
            
            [CV_FACE_RIGHT_EYE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontWeight">
            <summary>
            cvFontQtで用いるフォントの太さフラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Light">
            <summary>
            QFont::Light
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Normal">
            <summary>
            QFont::Normal
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.DemiBold">
            <summary>
            QFont::DemiBold
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Bold">
            <summary>
            QFont::Bold
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontWeight.Black">
            <summary>
            QFont::Black
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontStyle">
            <summary>
            cvFontQtで用いるフォントスタイルのフラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Normal">
            <summary>
            QFont::StyleNormal
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Italic">
            <summary>
            QFont::StyleItalic
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontStyle.Oblique">
            <summary>
            QFont::StyleOblique
            </summary>
        </member>
        <member name="T:OpenCvSharp.ButtonType">
            <summary>
            cvCreateButtonで用いるボタンの種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.PushButton">
            <summary>
            ボタンは，通常のプッシュボタンになります．
            [CV_PUSH_BUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.Checkbox">
            <summary>
            ボタンは，チェックボックスボタンになります．
            [CV_CHECKBOX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ButtonType.Radiobox">
            <summary>
            ボタンは，ラジオボックスボタンになります．同じボタンバー（同じライン上）にあるラジオボックスは，排他的です．つまり，同時に1つしか選択できません．
            [CV_RADIOBOX]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CameraChannels">
            <summary>
            マルチヘッドカメラから取得する画像のチャネル
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DepthMap">
            <summary>
            Depth values in mm (CV_16UC1)
            [CV_CAP_OPENNI_DEPTH_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_PointCloudMap">
            <summary>
            XYZ in meters (CV_32FC3)
            [CV_CAP_OPENNI_POINT_CLOUD_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DisparityMap">
            <summary>
            Disparity in pixels (CV_8UC1)
            [CV_CAP_OPENNI_DISPARITY_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_DisparityMap32F">
            <summary>
            Disparity in pixels (CV_32FC1)
            [CV_CAP_OPENNI_DISPARITY_MAP_32F]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_ValidDepthMask">
            <summary>
            CV_8UC1
            [CV_CAP_OPENNI_VALID_DEPTH_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_BGRImage">
            <summary>
            
            [CV_CAP_OPENNI_BGR_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_GrayImage">
            <summary>
            
            [CV_CAP_OPENNI_GRAY_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_VGA30Hz">
            <summary>
            
            [CV_CAP_OPENNI_VGA_30HZ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.OpenNI_SXGA15Hz">
            <summary>
            
            [CV_CAP_OPENNI_SXGA_15HZ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameBGR">
            <summary>
            BGR
            [CV_CAP_ANDROID_COLOR_FRAME_BGR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrame">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_GreyFrame">
            <summary>
            Y
            [CV_CAP_ANDROID_GREY_FRAME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameRGB">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_RGB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameBGRA">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_BGRA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CameraChannels.Android_ColorFrameRGBA">
            <summary>
            
            [CV_CAP_ANDROID_COLOR_FRAME_RGBA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DistTransformLabelType">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistTransformLabelType.CComp">
            <summary>
            
            [CV_DIST_LABEL_CCOMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistTransformLabelType.Pixel">
            <summary>
            
            [CV_DIST_LABEL_PIXEL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FloodFillFlag">
            <summary>
            floodFillの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.FloodFillFlag.Link4">
            <summary>
            4連結による線分
            [= 4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FloodFillFlag.Link8">
            <summary>
            8連結による線分
            [= 8]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FloodFillFlag.FixedRange">
            <summary>
            If set, the difference between the current pixel and seed pixel is considered. Otherwise, the difference between neighbor pixels is considered (that is, the range is floating).
            [CV_FLOODFILL_FIXED_RANGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FloodFillFlag.MaskOnly">
            <summary>
            If set, the function does not change the image ( newVal is ignored), but fills the mask. The flag can be used for the second variant only.
            [CV_FLOODFILL_MASK_ONLY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvButton">
            <summary>
            QtによるCvWindowで利用するボタン
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvButton.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String)">
            <summary>
            初期化
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback)">
            <summary>
            初期化
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object)">
            <summary>
            初期化
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数渡されるポインタ</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType)">
            <summary>
            初期化
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数渡されるポインタ</param>
            <param name="button_type">ボタンの種類</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.#ctor(System.String,OpenCvSharp.CvButtonCallback,System.Object,OpenCvSharp.ButtonType,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="name">ボタンの名前． （これが null の場合，”button &lt;number of boutton&gt;” という名前になります）</param>
            <param name="callback">ボタン状態が変更される度に呼び出されるデりゲート</param>
            <param name="userdata">コールバック関数に渡されるオブジェクト</param>
            <param name="button_type">ボタンの種類</param>
            <param name="initial_button_state">ボタンのデフォルトの状態．チェックボックスとラジオボックスの場合，これは 0 または 1 になります．</param>
        </member>
        <member name="M:OpenCvSharp.CvButton.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="P:OpenCvSharp.CvButton.ButtonName">
            <summary>
            トラックバーの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Callback">
            <summary>
            スライダが動いた際のコールバックイベントデリゲートを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Result">
            <summary>
            作成したすべてのボタン
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvButton.Instances">
            <summary>
            作成したすべてのボタン
            </summary>
        </member>
        <member name="T:OpenCvSharp.ImageEncodingParam">
            <summary>
            cv::imwrite, cv::imencode で用いるエンコードパラメータ
            </summary>
        </member>
        <member name="M:OpenCvSharp.ImageEncodingParam.#ctor(OpenCvSharp.ImageEncodingID,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="id">エンコードの種類</param>
            <param name="value">パラメータの値</param>
        </member>
        <member name="P:OpenCvSharp.ImageEncodingParam.EncodingID">
            <summary>
            エンコードの種類
            </summary>
        </member>
        <member name="P:OpenCvSharp.ImageEncodingParam.Value">
            <summary>
            パラメータの値
            </summary>
        </member>
        <member name="T:OpenCvSharp.JpegEncodingParam">
            <summary>
            cv::imwrite, cv::imencode で用いるエンコードパラメータ
            </summary>
        </member>
        <member name="M:OpenCvSharp.JpegEncodingParam.#ctor(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="value">パラメータの値。0から100の値を取る（大きいほど高品質）。デフォルト値は95。</param>
        </member>
        <member name="T:OpenCvSharp.PngEncodingParam">
            <summary>
            cv::imwrite, cv::imencode で用いるエンコードパラメータ
            </summary>
        </member>
        <member name="M:OpenCvSharp.PngEncodingParam.#ctor(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="value">パラメータの値。圧縮レベルを0から9の値で指定する（大きいほど高圧縮率で、かつ圧縮に時間を要する）。デフォルト値は3。</param>
        </member>
        <member name="T:OpenCvSharp.PxmEncodingParam">
            <summary>
            cv::imwrite, cv::imencode で用いるエンコードパラメータ
            </summary>
        </member>
        <member name="M:OpenCvSharp.PxmEncodingParam.#ctor(System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="value">パラメータの値。フォーマットをバイナリ(1)かアスキー(0)かで指定する。デフォルト値は1。</param>
        </member>
        <member name="T:OpenCvSharp.Utilities.PInvokeHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.PInvokeHelper.TryPInvoke">
            <summary>
            PInvokeが正常に行えるかチェックする
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.PInvokeHelper.DllImportError(System.Exception)">
            <summary>
            DllImportの際にDllNotFoundExceptionかBadImageFormatExceptionが発生した際に呼び出されるメソッド。
            エラーメッセージを表示して解決策をユーザに示す。
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.PInvokeHelper.CreateException(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:OpenCvSharp.Cv64suf">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConst">
            <summary>
            OpenCVの定数
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadStep">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadModelOrChSeq">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadNumChannels">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadNumChannel1U">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadDepth">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadAlphaChannel">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadOrder">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadOrigin">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadAlign">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadCallBack">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadTileSize">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadCOI">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_BadROISize">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_MaskIsTiled">
            
        </member>
        <member name="F:OpenCvSharp.CvConst.CV_StsNullPtr">
            
        </member>
        <member name="T:OpenCvSharp.CvIsInstanceFunc">
            <summary>
            
            </summary>
            <param name="structPtr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvReleaseFunc">
            <summary>
            
            </summary>
            <param name="struct_dblptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvReadFunc">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvWriteFunc">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="name"></param>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvCloneFunc">
            <summary>
            
            </summary>
            <param name="struct_ptr"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CapturePosAviRatio">
            <summary>
            ビデオファイル内の相対的な位置
            </summary>
        </member>
        <member name="F:OpenCvSharp.CapturePosAviRatio.Start">
            <summary>
            ファイルの最初
            </summary>
        </member>
        <member name="F:OpenCvSharp.CapturePosAviRatio.End">
            <summary>
            ファイルの最後
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStatus">
            <summary>
            エラーステータス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsOk">
            <summary>
            everithing is ok [CV_StsOk]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBackTrace">
            <summary>
            pseudo error for back trace [CV_StsBackTrace]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsError">
            <summary>
            unknown /unspecified error [CV_StsError]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsInternal">
            <summary>
            internal error (bad state)  [CV_StsInternal]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNoMem">
            <summary>
            insufficient memory [CV_StsNoMem]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadArg">
            <summary>
            function arg/param is bad [CV_StsBadArg]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadFunc">
            <summary>
            unsupported function [CV_StsBadFunc]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNoConv">
            <summary>
            iter. didn't converge [CV_StsNoConv]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsAutoTrace">
            <summary>
            tracing [CV_StsAutoTrace]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.HeaderIsNull">
            <summary>
            image header is NULL [CV_HeaderIsNull]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadImageSize">
            <summary>
            image size is invalid [CV_BadImageSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOffset">
            <summary>
            offset is invalid [CV_BadOffset]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadDataPtr">
            <summary>
            [CV_BadOffset]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadStep">
            <summary>
            [CV_BadStep]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadModelOrChSeq">
            <summary>
            [CV_BadModelOrChSeq]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadNumChannels">
            <summary>
            [CV_BadNumChannels]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadNumChannel1U">
            <summary>
            [CV_BadNumChannel1U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadDepth">
            <summary>
            [CV_BadDepth]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadAlphaChannel">
            <summary>
            [CV_BadAlphaChannel]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOrder">
            <summary>
            [CV_BadOrder]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadOrigin">
            <summary>
            [CV_BadOrigin]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadAlign">
            <summary>
            [CV_BadAlign]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadCallBack">
            <summary>
            [CV_BadCallBack]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadTileSize">
            <summary>
            [CV_BadTileSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadCOI">
            <summary>
            [CV_BadCOI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.BadROISize">
            <summary>
            [CV_BadROISize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.MaskIsTiled">
            <summary>
            [CV_MaskIsTiled]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNullPtr">
            <summary>
            null pointer [CV_StsNullPtr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsVecLengthErr">
            <summary>
            incorrect vector length [CV_StsVecLengthErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsFilterStructContentErr">
            <summary>
            incorr. filter structure content [CV_StsFilterStructContentErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsKernelStructContentErr">
            <summary>
            incorr. transform kernel content [CV_StsKernelStructContentErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsFilterOffsetErr">
            <summary>
            incorrect filter ofset value [CV_StsFilterOffsetErr]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadSize">
            <summary>
            the input/output structure size is incorrect [CV_StsBadSize]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsDivByZero">
            <summary>
            division by zero [CV_StsDivByZero]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsInplaceNotSupported">
            <summary>
            in-place operation is not supported [CV_StsInplaceNotSupported]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsObjectNotFound">
            <summary>
            request can't be completed [CV_StsObjectNotFound]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnmatchedFormats">
            <summary>
            formats of input/output arrays differ [CV_StsUnmatchedFormats]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadFlag">
            <summary>
            flag is wrong or not supported [CV_StsBadFlag]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadPoint">
            <summary>
            bad CvPoint [CV_StsBadPoint]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadMask">
            <summary>
            bad format of mask (neither 8uC1 nor 8sC1) [CV_StsBadMask]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnmatchedSizes">
            <summary>
            sizes of input/output structures do not match [CV_StsUnmatchedSizes]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsUnsupportedFormat">
            <summary>
            the data format/type is not supported by the function [CV_StsUnsupportedFormat]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsOutOfRange">
            <summary>
            some of parameters are out of range [CV_StsOutOfRange]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsParseError">
            <summary>
            invalid syntax/structure of the parsed file [CV_StsParseError]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsNotImplemented">
            <summary>
            the requested function/feature is not implemented [CV_StsNotImplemented]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStatus.StsBadMemBlock">
            <summary>
            an allocated block has been corrupted [CV_StsBadMemBlock]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ErrMode">
            <summary>
            エラーモード
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeLeaf">
            <summary>
            プログラムはエラーハンドラを呼び出した後，途中終了する．デフォルト．
            エラー発生後，直ちに通知されるので，デバッグ時に有効． 
            しかし，製品（完成版の）システムでは，他の二つのモードの使用が制御しやすいので好ましい． 
            [CV_ErrModeLeaf]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeParent">
            <summary>
            プログラムは途中終了しないが，エラーハンドラが呼び出される．
            スタックは解放されない（C++の例外処理を用いないため）．
            ユーザはCxCoreの関数cvGetErrStatusを呼び出し，エラーコードをチェックし，対処を行わなければならない． 
            [CV_ErrModeParent]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ErrMode.CV_ErrModeSilent">
            <summary>
            Parentモードとほぼ同じだが，エラーハンドラは呼び出されない．
            [CV_ErrModeSilent]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FourCC">
            <summary>
            フレームを圧縮するためのコーデックを表す4文字
            </summary>
        </member>
        <member name="M:OpenCvSharp.WCvQuadEdge2D.pt(System.Int64)">
            <summary>
            pt[i]
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.WCvQuadEdge2D.next(System.Int64)">
            <summary>
            next[i]
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.WindowsLibraryLoader">
            <summary>
            Handles loading embedded dlls into memory, based on http://stackoverflow.com/questions/666799/embedding-unmanaged-dll-into-a-managed-c-sharp-dll.
            </summary>
            <remarks>This code is based on https://github.com/charlesw/tesseract </remarks>
        </member>
        <member name="F:OpenCvSharp.WindowsLibraryLoader.ProcessorArchitecture">
            <summary>
            The default base directory name to copy the assemblies too.
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowsLibraryLoader.processorArchitecturePlatforms">
            <summary>
            Map processor 
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowsLibraryLoader.processorArchitectureAddressWidthPlatforms">
            <summary>
            Used as a sanity check for the returned processor architecture to double check the returned value.
            </summary>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.IsLibraryLoaded(System.String)">
            <summary>
            
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.IsCurrentPlatformSupported">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.LoadLibrary(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="dllName"></param>
            <param name="additionalPaths"></param>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.GetProcessArchitecture">
            <summary>
            Get's the current process architecture while keeping track of any assumptions or possible errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.FixUpDllFileName(System.String)">
            <summary>
            Determines if the dynamic link library file name requires a suffix
            and adds it if necessary.
            </summary>
        </member>
        <member name="M:OpenCvSharp.WindowsLibraryLoader.GetPlatformName(System.String)">
            <summary>
            Given the processor architecture, returns the name of the platform.
            </summary>
        </member>
        <member name="P:OpenCvSharp.WindowsLibraryLoader.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.WindowsLibraryLoader.AdditionalPaths">
            <summary>
            Additional user-defined DLL paths 
            </summary>
        </member>
        <member name="T:OpenCvSharp.WindowsLibraryLoader.ProcessArchitectureInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvAttrList">
            <summary>
            属性のリスト
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList._attr">
            <summary>
            const char** attr;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList._next">
            <summary>
            struct CvAttrList* next;
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAttrList.SizeOf">
            <summary>
            sizeof(CvAttrList)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.#ctor(System.String[])">
            <summary>
            構造体CvAttrListの初期化
            </summary>
            <param name="attr">(attribute_name,attribute_value)のペアからなる配列</param>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.#ctor(System.String[],OpenCvSharp.Pointer{OpenCvSharp.CvAttrList})">
            <summary>
            構造体CvAttrListの初期化
            </summary>
            <param name="attr">(attribute_name,attribute_value)のペアからなる配列</param>
            <param name="next">属性リストの次の塊へのポインタ</param>
        </member>
        <member name="M:OpenCvSharp.CvAttrList.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvAttrList.Attr">
            <summary>
            (attribute_name,attribute_value)のペアからなるNULLで終わる配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvAttrList.Next">
            <summary>
            属性リストの次の塊へのポインタ
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvBox2D">
            <summary>
            回転が考慮された2次元の箱
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.SizeOf">
            <summary>
            sizeof(CvBox2D)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Center">
            <summary>
            箱の中心
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Size">
            <summary>
            箱の幅と長さ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvBox2D.Angle">
            <summary>
            水平軸と始めの辺（長さ方向の辺）との角度（度）
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.#ctor(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSize2D32f,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="center">箱の中心</param>
            <param name="size">箱の幅と長さ</param>
            <param name="angle">水平軸と始めの辺（長さ方向の辺）との角度（度）</param>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.BoxPoints">
            <summary>
            箱の頂点を見つける
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.Equals(OpenCvSharp.CvBox2D)">
            <summary>
             
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.op_Equality(OpenCvSharp.CvBox2D,OpenCvSharp.CvBox2D)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.op_Inequality(OpenCvSharp.CvBox2D,OpenCvSharp.CvBox2D)">
            <summary>
            
            </summary>
            <param name="self"></param>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvBox2D.ToString">
            <summary>
            このオブジェクトの文字列形式を返す
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvChainPtReader">
            <summary>
            Chain Reader
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqReader`1">
            <summary>
            CvSeqからデータを読み取るためのクラス
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqReader">
            <summary>
            CvSeqからデータを読み取るためのクラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeqReader.SizeOf">
            <summary>
            sizeof(CvSeqReader) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.GetPos">
            <summary>
            現在のリーダの位置（0 ... reader->seq->total - 1 の範囲）を返す (cvGetSeqReaderPos).
            </summary>
            <returns>リーダの位置</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.NextSeqElem(System.Int32)">
            <summary>
            次のシーケンスへ (CV_NEXT_SEQ_ELEM相当)
            </summary>
            <param name="elem_size"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.PrevSeqElem(System.Int32)">
            <summary>
            前のシーケンスへ (CV_PREV_SEQ_ELEM相当)
            </summary>
            <param name="elem_size"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.ReadSeqElem``1">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる (CV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.RevReadSeqElem``1">
            <summary>
            シーケンスの前の要素を一つ読みだして、読み出しポインタを前へ1つ移動させる (CV_REV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.SetPos(System.Int32)">
            <summary>
            読み込み位置を絶対位置か相対位置で表された位置に移動する (cvSetSeqReaderPos).
            </summary>
            <param name="index">移動先の位置．位置決めモード（次のパラメータis_relativeを参照）が使用されている場合， 実際の位置は index を reader->seq->totalで割った剰余になる．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader.SetPos(System.Int32,System.Boolean)">
            <summary>
            読み込み位置を絶対位置か相対位置で表された位置に移動する (cvSetSeqReaderPos).
            </summary>
            <param name="index">移動先の位置．位置決めモード（次のパラメータis_relativeを参照）が使用されている場合， 実際の位置は index を reader->seq->totalで割った剰余になる．</param>
            <param name="is_relative">true，index は現在位置からの相対値</param>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.HeaderSize">
            <summary>
            シーケンスのヘッダサイズ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Block">
            <summary>
            current block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.Ptr">
            <summary>
            pointer to element be read next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.BlockMin">
            <summary>
            pointer to the beginning of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.BlockMax">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.DeltaIndex">
            <summary>
            seq->first->start_index
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.PrevElem">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader.ReaderPos">
            <summary>
            現在のリーダの位置を取得・設定する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.ReadSeqElem">
            <summary>
            シーケンスの要素を一つ読みだして、読み出しポインタを次へ1つ移動させる (CV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqReader`1.RevReadSeqElem">
            <summary>
            シーケンスの前の要素を一つ読みだして、読み出しポインタを前へ1つ移動させる (CV_REV_READ_SEQ_ELEM相当)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqReader`1.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvChainPtReader.chain">
            <summary>
            Target chain
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.#ctor(OpenCvSharp.CvChain)">
            <summary>
            cvStartReadChainPointsで初期化
            </summary>
            <param name="chain">チェーンへのポインタ</param>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvChainPtReader.SizeOf">
            <summary>
            sizeof(CvChainPtReader)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.StartReadChainPoints(OpenCvSharp.CvChain)">
            <summary>
            チェーンリーダを初期化する
            </summary>
            <param name="target">チェーンへのポインタ</param>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.ReadChainPoint">
            <summary>
            チェーン上の次の点を得る
            </summary>
            <returns>現在のチェーン上の点</returns>
        </member>
        <member name="M:OpenCvSharp.CvChainPtReader.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.CvPtr">
            <summary>
            Data pointer (CvChainPtReader*)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvChainPtReader.Deltas">
            <summary>
            schar deltas[8][2]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConDensation">
            <summary>
            ConDenstation 状態
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConDensation.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvConDensation*</param>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            ConDensation フィルタ構造体の領域確保を行う
            </summary>
            <param name="dynamParams">状態ベクトルの次元</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <param name="sampleCount">サンプル数</param>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvConDensation.SizeOf">
            <summary>
            sizeof(CvConDensation) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.GetFlSamples">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvConDensation.SetFlSamples(System.Single[0:,0:])">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.MP">
            <summary>
            観測ベクトルの次元
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.DP">
            <summary>
            状態ベクトルの次元
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.DynamMatr">
            <summary>
            線形ダイナミクスを表す行列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.State">
            <summary>
            状態ベクトル
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.SamplesNum">
            <summary>
            サンプル数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlSamples">
            <summary>
            サンプルベクトルの配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlNewSamples">
            <summary>
            サンプルベクトルのテンポラリ配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlConfidence">
            <summary>
            各サンプルの確かさ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.FlCumulative">
            <summary>
            確かさの累積値
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.Temp">
            <summary>
            テンポラリベクトル
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.RandomSample">
            <summary>
            サンプルセットを更新するためのランダムベクトル
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConDensation.RandS">
            <summary>
            ランダムベクトルを生成するための構造体配列
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFeatureTree">
            <summary>
            特徴ベクトルのインデックスに対するバランスk-d木
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFeatureTree.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.#ctor(OpenCvSharp.CvMat)">
            <summary>
            特徴ベクトルのツリーを作成する
            </summary>
            <param name="desc">d 次元特徴ベクトルの n × d 行列 (CV_32FC1 or CV_64FC1).</param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateFeatureTree(OpenCvSharp.CvMat)">
            <summary>
            特徴ベクトルのツリーを作成する
            </summary>
            <param name="desc">d 次元特徴ベクトルの n × d 行列（CV_32FC1 or CV_64FC1）.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateKDTree(OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat)">
            <summary>
            
            </summary>
            <param name="raw_data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32)">
            <summary>
            
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.CreateSpillTree(OpenCvSharp.CvMat,System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="raw_data"></param>
            <param name="naive"></param>
            <param name="rho"></param>
            <param name="tau"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
            <param name="k">検出される近傍の数．</param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeatures(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,System.Int32,System.Int32)">
            <summary>
            最適ビン優先（Best-Bin-First）探索を用いて，与えられたベクトルのおおよその k 近傍値を求める
            </summary>
            <param name="desc">（行）ベクトルの m × d 行列．これらのベクトルの近傍値を探索する．</param>
            <param name="results">一致したベクトルの行インデックス （cvCreateFeatureTreeに引数として渡される行列を参照する） の集合．m × kの行列．k 近傍より遠い場合は，その列には -1 が入る．</param>
            <param name="dist">k 近傍値までの距離のm × k 行列.</param>
            <param name="k">検出される近傍の数．</param>
            <param name="emax">探索する葉の最大数．</param>
        </member>
        <member name="M:OpenCvSharp.CvFeatureTree.FindFeaturesBoxed(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            与えられたk-d木上で直交領域探索を行う．
            </summary>
            <param name="bounds_min">各次元の最小値を与える 1×d あるいは d×1 のベクトル（CV_32FC1 or CV_64FC1）</param>
            <param name="bounds_max">各次元の最大値を与える 1×d あるいは d×1 のベクトル（CV_32FC1 or CV_64FC1）</param>
            <param name="result">出力行インデックス（cvCreateFeatureTreeに引数として渡される行列を参照する） の 1×m あるいは m×1 のベクトル（CV_32SC1）</param>
            <returns>求められたベクトル数</returns>
        </member>
        <member name="T:OpenCvSharp.CvGraphEdge">
            <summary>
            グラフの辺
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.#ctor(System.Void*)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvGraphEdge.SizeOf">
            <summary>
            sizeof(CvGraphEdge) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphEdge.IsGraphEdgeVisited">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Flags">
            <summary>
            辺フラグ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Weight">
            <summary>
            辺の重み
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Next">
            <summary>
            辺リストにおける次の辺．始点（0），終点（1）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphEdge.Vtx">
            <summary>
             始点（0），終点（1）
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraphScanner">
            <summary>
            グラフ走査状態のための構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvGraphScanner.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(System.IntPtr)">
            <summary>
            Initialize from pointer
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph)">
            <summary>
            グラフの深さ優先走査のためのクラスを生成する
            </summary>
            <param name="graph">グラフ</param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフの深さ優先走査のためのクラスを生成する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">走査開始頂点．nullの場合，走査は先頭の頂点（頂点シーケンスのうち最小のインデックスを持つ頂点）から始まる．</param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.#ctor(OpenCvSharp.CvGraph,OpenCvSharp.CvGraphVtx,OpenCvSharp.GraphScannerMask)">
            <summary>
            グラフの深さ優先走査のためのクラスを生成する
            </summary>
            <param name="graph">グラフ</param>
            <param name="vtx">走査開始頂点．nullの場合，走査は先頭の頂点（頂点シーケンスのうち最小のインデックスを持つ頂点）から始まる．</param>
            <param name="mask">イベントマスク．どのイベントにユーザが着目したいのかを指定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvGraphScanner.SizeOf">
            <summary>
            sizeof(CvGraphScanner) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphScanner.NextGraphItem">
            <summary>
            グラフ走査処理を1ステップ，あるいは数ステップ進める
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Vtx">
            <summary>
            現在の頂点（あるいは辺の始点）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Dst">
            <summary>
            現在の辺の接続先頂点
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Edge">
            <summary>
            現在の辺
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Graph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Stack">
            <summary>
            the graph vertex stack
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Index">
            <summary>
            the lower bound of certainly visited vertices
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphScanner.Mask">
            <summary>
            event mask
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraphVtx">
            <summary>
            グラフの頂点
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor">
            <summary>
            メモリを確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.#ctor(System.Void*)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvGraphVtx.SizeOf">
            <summary>
            sizeof(CvGraphVtx) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraphVtx.IsGraphVertexVisited">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvGraphVtx.Flags">
            <summary>
            頂点フラグ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvGraphVtx.First">
            <summary>
            最初の辺
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarClassifier">
            <summary>
            単一決定木による分類器（最も単純な場合は stump）.
            これは個々の画像位置における特徴に対する応答（つまりウィンドウ内の部分矩形におけるピクセル合計値）
            を返し，その応答に依存する値を出力する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifier.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvHaarClassifier*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifier.SizeOf">
            <summary>
            sizeof(CvHaarClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Count">
            <summary>
            決定木のノード数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.HaarFeature">
            <summary>
            haar特徴の配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Threshold">
            <summary>
            枝の閾値．特徴応答 &lt;= threshold となる場合は左側の枝が選択され，そうでない場合は右の枝が選択される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Left">
            <summary>
            左側の子のインデックス（左側の子が葉だった場合には負のインデックス）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Right">
            <summary>
            右側の子のインデックス（右側の子が葉だった場合には負のインデックス）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifier.Alpha">
            <summary>
            葉に対応する出力値
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarFeature">
            <summary>
            haar 特徴. 適切な重みを持つ 2 個，あるいは 3 個の矩形から構成される.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarFeature.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvHaarFeature*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarFeature.SizeOf">
            <summary>
            sizeof(CvHaarClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarFeature.Tilted">
            <summary>
            0 は，垂直な特徴，1 は，45度回転した特徴を意味する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarFeature.rect">
            <summary>
            haar特徴を構成する矩形
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarFeature.Rect">
            <summary>
            haar特徴を構成する矩形
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHaarStageClassifier">
            <summary>
            ブーストされた分類器の組（= 段階分類器（stage classifiers））： 
            分類器の応答の合計がthresholdよりも大きい場合には
            段階分類器は 1 を返し，そうでない場合は 0 を返す．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarStageClassifier.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvHaarStageClassifier*</param>
        </member>
        <member name="F:OpenCvSharp.CvHaarStageClassifier.SizeOf">
            <summary>
            sizeof(CvHaarStageClassifier) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Count">
            <summary>
            組に含まれる分類器の個数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Threshold">
            <summary>
            ブーストされた分類器で用いる閾値
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Classifier">
            <summary>
            分類器の配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Next">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Child">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarStageClassifier.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHuMoments">
            <summary>
            Hu moments
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHuMoments.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHuMoments.#ctor(OpenCvSharp.CvMoments)">
            <summary>
            cvGetHuMomentsにより初期化
            </summary>
            <param name="moments">画像モーメント構造体への参照</param>
        </member>
        <member name="T:OpenCvSharp.CvLineIterator">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor">
            <summary>
            構造体の分のメモリを割り当てて初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <param name="connectivity">走査した線分の接続性．4または8</param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            ラインイテレータを初期化する
            </summary>
            <param name="image">対象画像</param>
            <param name="pt1">線分の一つ目の端点</param>
            <param name="pt2">線分のニつ目の端点</param>
            <param name="connectivity">走査した線分の接続性．4または8</param>
            <param name="leftToRight">pt1とpt2とは無関係に線分をいつも左から右に走査する(true)か， pt1からpt2への決まった方向で走査するか(false)を指定するフラグ. </param>
            <returns></returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Initialize(OpenCvSharp.CvArr,OpenCvSharp.CvPoint,OpenCvSharp.CvPoint,OpenCvSharp.PixelConnectivity,System.Boolean)">
            <summary>
            Initializes line iterator
            </summary>
            <param name="image">Image to sample the line from.  </param>
            <param name="pt1">First ending point of the line segment. </param>
            <param name="pt2">Second ending point of the line segment. </param>
            <param name="connectivity">The scanned line connectivity, 4 or 8. </param>
            <param name="leftToRight">The flag, indicating whether the line should be always scanned from the left-most point to the right-most out of pt1 and pt2 (leftToRight=true), or it is scanned in the specified order, from pt1 to pt2 (leftToRight=false). </param>
            <returns>The function cvInitLineIterator initializes the line iterator and returns the number of pixels between two end points. Both points must be inside the image. After the iterator has been initialized, all the points on the raster line that connects the two ending points may be retrieved by successive calls of NextLinePoint point. The points on the line are calculated one by one using 4-connected or 8-connected Bresenham algorithm.</returns> 
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Initialize">
            <summary>
            Initializes line iterator
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvLineIterator.SizeOf">
            <summary>
            sizeof(CvLineIterator) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.NextLinePoint">
            <summary>
            CV_NEXT_LINE_POINT
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.CurrentPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.GetEnumerator">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Ptr">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.Err">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.PlusDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.MinusDelta">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.PlusStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvLineIterator.MinusStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMemBlock">
            <summary>
            メモリストレージブロック
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemBlock.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvMemBlock*</param>
        </member>
        <member name="F:OpenCvSharp.CvMemBlock.SizeOf">
            <summary>
            sizeof(CvMemBlock) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemBlock.Prev">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemBlock.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMemStoragePos">
            <summary>
            メモリストレージの位置
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStoragePos.#ctor">
            <summary>
            メモリを確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStoragePos.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvMemStoragePos*</param>
        </member>
        <member name="F:OpenCvSharp.CvMemStoragePos.SizeOf">
            <summary>
            sizeof(CvMemStoragePos) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStoragePos.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStoragePos.FreeSpace">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMoments">
            <summary>
            Moment state structure 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMoments.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMoments.#ctor(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            cvMomentsにより初期化
            </summary>
            <param name="arr">画像（1チャンネル，あるいはCOIをもつ3チャンネル画像） あるいはポリゴン （CvSeqで表される点群，または点のベクトル）．</param>
            <param name="binary">（画像の場合のみ）このフラグがtrueの場合，値0のピクセルは0として，その他のピクセル値は1として扱われる． </param>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetCentralMoment(System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から中心モーメントを計算する
            </summary>
            <param name="x_order">取り出すモーメントのx方向の次数，x_order &gt;= 0. </param>
            <param name="y_order">取り出すモーメントのy方向の次数， y_order &gt;= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetHuMoments(OpenCvSharp.CvHuMoments@)">
            <summary>
            ７つのHuモーメント不変量を計算する
            </summary>
            <param name="humoments">Huモーメント構造体への参照</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetNormalizedCentralMoment(System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から正規化された中心モーメントを計算する
            </summary>
            <param name="x_order">取り出すモーメントのx方向の次数，x_order &gt;= 0. </param>
            <param name="y_order">取り出すモーメントのy方向の次数， y_order &gt;= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMoments.GetSpatialMoment(System.Int32,System.Int32)">
            <summary>
            画像モーメント構造体から空間モーメントを計算する
            </summary>
            <param name="x_order">取り出すモーメントのx方向の次数，x_order >= 0. </param>
            <param name="y_order">取り出すモーメントのy方向の次数， y_order >= 0 かつ x_order + y_order &lt;= 3. </param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPOSITObject">
            <summary>
            オブジェクト構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPOSITObject.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.#ctor(OpenCvSharp.CvPoint3D32f[])">
            <summary>
            cvCreatePOSITObjectで初期化
            </summary>
            <param name="points">3次元オブジェクトモデル上の点データの配列</param>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvPOSITObject.POSIT(OpenCvSharp.CvPoint2D32f[],System.Double,OpenCvSharp.CvTermCriteria,System.Single[0:,0:]@,System.Single[]@)">
            <summary>
            POSITアルゴリズムの実装
            </summary>
            <param name="imagePoints">オブジェクト上の点を二次元画像平面上へ投影して得られる点群</param>
            <param name="focalLength">使用するカメラの焦点距離</param>
            <param name="criteria">反復POSITアルゴリズムの終了条件</param>
            <param name="rotationMatrix">回転行列</param>
            <param name="translationVector">並進ベクトル</param>
        </member>
        <member name="T:OpenCvSharp.CvRandState">
            <summary>
            CvRandState
            </summary>
            <remarks>
            typedef struct CvRandState
            {
                CvRNG     _state;    /* RNG state (the current seed and carry)*/
                int       _disttype; /* distribution type */
                CvScalar  _param[2]; /* parameters of RNG */
            }
            CvRandState;
            </remarks>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
            <param name="disttype"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.Set(OpenCvSharp.CvRandState)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.Rand(OpenCvSharp.CvArr)">
            <summary>
            配列をランダムな値で埋める
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandInit(System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandInit(System.Double,System.Double,System.Int32,OpenCvSharp.DistributionType)">
            <summary>
            
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="seed"></param>
            <param name="disttype"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandSetRange(System.Double,System.Double)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
        </member>
        <member name="M:OpenCvSharp.CvRandState.RandSetRange(System.Double,System.Double,System.Int32)">
            <summary>
            Changes RNG range while preserving RNG state
            </summary>
            <param name="param1"></param>
            <param name="param2"></param>
            <param name="index"></param>
        </member>
        <member name="P:OpenCvSharp.CvRandState.State">
            <summary>
            RNG _state (the current seed and carry)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRandState.DistType">
            <summary>
            distribution type
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRandState.Param">
            <summary>
            parameters of RNG
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSparseMatIterator">
            <summary>
            疎な配列要素のイテレータ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSparseMatIterator.mat">
            <summary>
            Target sparse mat
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.#ctor">
            <summary>
            デフォルトコンストラクタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.#ctor(OpenCvSharp.CvSparseMat)">
            <summary>
            対象のCvSparseMatを指定して初期化
            </summary>
            <param name="mat">入力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvSparseMatIterator.SizeOf">
            <summary>
            sizeof(CvSparseMatIterator)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.GetNextSparseNode">
            <summary>
            疎な配列において次の要素のポインタを返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.Init(OpenCvSharp.CvSparseMat)">
            <summary>
            疎な配列要素のイテレータを初期化する (cvInitSparseMatIterator)
            </summary>
            <param name="m">入力配列</param>
            <returns>疎な配列の先頭要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMatIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.Mat">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMatIterator.CurIdx">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSparseNode">
            <summary>
            CvSparseMatの要素
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseNode.#ctor(System.IntPtr)">
            <summary>
            デフォルトコンストラクタ
            </summary>
            <param name="ptr">CvSparseNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvSparseNode.SizeOf">
            <summary>
            sizeof(CvSparseNode)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseNode.HashVal">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseNode.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTreeNodeIterator">
            <summary>
            ツリーノードのイテレータのためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.node">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.level">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTreeNodeIterator.max_level">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.#ctor(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.NextTreeNode">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.NextTreeNode``1">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.PrevTreeNode">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator.PrevTreeNode``1">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTreeNodeIterator.MaxLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTreeNodeIterator`1">
            <summary>
            ツリーノードのイテレータのためのクラス
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(OpenCvSharp.CvArr,System.Int32)">
            <summary>
            Construct by cvInitTreeNodeIterator
            </summary>
            <param name="first"></param>
            <param name="max_level"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.#ctor(OpenCvSharp.CvTreeNodeIterator)">
            <summary>
            Convert to generic class
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.NextTreeNode">
            <summary>
            現在のノードを返し，イテレータを次のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.PrevTreeNode">
            <summary>
            現在のノードを返し，イテレータを前のノードに移動させる．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvTreeNodeIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSeqWriter">
            <summary>
            CvSeqにデータを書き込むためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeqWriter.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスへのデータ書き込み処理を初期化する (cvStartAppendToSeq).
            </summary>
            <param name="seq">シーケンスのポインタ</param>
            <returns>ライタ（Writer）の状態．この関数で初期化される．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            新しいシーケンスを作成し，ライタ（writer）を初期化する (cvStartWriteSeq).
            </summary>
            <param name="seqFlags">作成されたシーケンスのフラグ． 生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない． そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない． </param>
            <param name="headerSize">シーケンスヘッダのサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプか拡張が指示されている場合，そのタイプは基本タイプのヘッダサイズと合致しなければならない． </param>
            <param name="elemSize">シーケンスの要素サイズ（バイト単位）．サイズはシーケンスタイプと合致しなければならない． 例えば，点群のシーケンス（要素タイプは CV_SEQ_ELTYPE_POINT）を作成する場合， パラメータ elem_size は sizeof(CvPoint) と等しくなければならない． </param>
            <param name="storage">シーケンスの位置． </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvSeqWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvSeqWriter.SizeOf">
            <summary>
            sizeof(CvSeqWriter) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.EndWriteSeq">
            <summary>
            シーケンス書き込み処理を終了する
            </summary>
            <returns>書き込まれたシーケンスへのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.Flush">
            <summary>
            ライタの状態からシーケンスヘッダを更新する (cvFlushSeqWriter).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.WRITE_SEQ_ELEM_VAR(System.IntPtr)">
            <summary>
            (CV_WRITE_SEQ_ELEM_VAR)
            </summary>
            <param name="elemPtr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter.WriteSeqElem``1(``0)">
            <summary>
            (CV_WRITE_SEQ_ELEM)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elem"></param>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.HeaderSize">
            <summary>
            シーケンスのヘッダサイズ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Seq">
            <summary>
            Sequence, beign read
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Block">
            <summary>
            current block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.Ptr">
            <summary>
            pointer to element be read next
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.BlockMin">
            <summary>
            pointer to the beginning of block
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqWriter.BlockMax">
            <summary>
            pointer to the End of block
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeqWriter`1">
            <summary>
            CvSeqにデータを書き込むためのクラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスへのデータ書き込み処理を初期化する (cvStartAppendToSeq).
            </summary>
            <param name="seq">シーケンスのポインタ</param>
            <returns>ライタ（Writer）の状態．この関数で初期化される．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            新しいシーケンスを作成し，ライタ（writer）を初期化する (cvStartWriteSeq).
            </summary>
            <param name="seq_flags">作成されたシーケンスのフラグ． 生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない． そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない． </param>
            <param name="header_size">シーケンスヘッダのサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプか拡張が指示されている場合，そのタイプは基本タイプのヘッダサイズと合致しなければならない． </param>
            <param name="elem_size">シーケンスの要素サイズ（バイト単位）．サイズはシーケンスタイプと合致しなければならない． 例えば，点群のシーケンス（要素タイプは CV_SEQ_ELTYPE_POINT）を作成する場合， パラメータ elem_size は sizeof(CvPoint) と等しくなければならない． </param>
            <param name="storage">シーケンスの位置． </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(OpenCvSharp.CvSeqWriter)">
            <summary>
            ジェネリックなし版のWriterから初期化
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvSeqWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvSeqWriter`1.WriteSeqElem(`0)">
            <summary>
            (CV_WRITE_SEQ_ELEM)
            </summary>
            <param name="elem"></param>
        </member>
        <member name="T:OpenCvSharp.CvContourTree">
            <summary>
            輪郭データの二分木
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeq">
            <summary>
            拡張可能な要素のシーケンス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSeq.holdingStorage">
            <summary>
            to keep alive storage
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor">
            <summary>
            既定の初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する. header_size=sizeof(CvSeq)
            </summary>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない．</param>
            <param name="elemSize">シーケンスの要素サイズ（バイト単位）．サイズはシーケンスタイプと合致しなければならない．例えば，点群のシーケンスを作成する場合，要素タイプにCV_SEQ_ELTYPE_POINTを指定し，パラメータ elem_size は sizeof(CvPoint) と等しくなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する
            </summary>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない．</param>
            <param name="headerSize">シーケンスのヘッダサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプかその拡張が指示されている場合，そのタイプは基本タイプのヘッダと合致していなければならない．</param>
            <param name="elemSize">シーケンスの要素サイズ（バイト単位）．サイズはシーケンスタイプと合致しなければならない．例えば，点群のシーケンスを作成する場合，要素タイプにCV_SEQ_ELTYPE_POINTを指定し，パラメータ elem_size は sizeof(CvPoint) と等しくなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvSeq*</param>
        </member>
        <member name="F:OpenCvSharp.CvSeq.SizeOf">
            <summary>
            sizeof(CvSeq)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.CalcPGH(OpenCvSharp.CvHistogram)">
            <summary>
            輪郭の pair-wise geometrical histogram を求める
            </summary>
            <param name="hist">求められたヒストグラム．必ず2次元になる．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ClearSeq">
            <summary>
            シーケンスをクリアする
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Clone">
            <summary>
            入力行列のコピーを作成し返す (cvCloneSeq).
            </summary>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Clone(OpenCvSharp.CvMemStorage)">
            <summary>
            入力行列のコピーを作成し返す (cvCloneSeq).
            </summary>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，入力シーケンスに含まれるストレージを使用する．</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.System#ICloneable#Clone">
            <summary>
            ICloneable.Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ContoursMoments">
            <summary>
            Alias for Moments with CvSeq contours
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.CreateContourTree(OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            輪郭の階層的表現を生成する
            </summary>
            <param name="storage">結果のツリーの出力先</param>
            <param name="threshold">近似精度</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ElemIdx``1(``0)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す (cvSeqElemIdx).
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="element">シーケンス要素</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ElemIdx``1(``0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す (cvSeqElemIdx).
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="element">シーケンス要素</param>
            <param name="block">要素を含むシーケンスブロックのアドレスがこの場所に保存される．</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.GetSeqElem``1(System.Int32)">
            <summary>
            与えられたインデックスを持つ要素をシーケンスの中から求め，その要素を返す．
            </summary>
            <typeparam name="T">出力オブジェクトの型</typeparam>
            <param name="index">要素のインデックス. 負のインデックスの指定も可能で, 例えば，-1はシーケンスの最後の要素，-2は最後の一つ前を指す.</param>
            <returns>与えられたインデックスを持つ要素．要素が見つからない場合はnull．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Insert``1(System.Int32,``0)">
            <summary>
            シーケンスの中に要素を挿入する (cvSeqInsert).
            </summary>
            <typeparam name="T">追加する要素の型.プリミティブ型か、OpenCVの構造体(CvPointなど).</typeparam>
            <param name="beforeIndex">要素が挿入されるインデックス（このインデックスの前に挿入される）</param>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.InsertSlice(System.Int32,OpenCvSharp.CvArr)">
            <summary>
            シーケンス内に配列を挿入する (cvSeqInsertSlice).
            </summary>
            <param name="beforeIndex">配列が挿入される場所へのインデックス（インデックスの前に挿入される）．</param>
            <param name="fromArr">追加される要素の配列．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Invert">
            <summary>
            シーケンス要素の順序を反転させる (cvSeqInvert).
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Remove(System.Int32)">
            <summary>
            与えられたインデックスをもつ要素を削除する (cvSeqRemove).
            </summary>
            <param name="index">削除される要素のインデックス</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.RemoveSlice(OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスを削除する (cvSeqRemoveSlice).
            </summary>
            <param name="slice">削除するシーケンスの一部分． </param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Partition(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc)">
            <summary>
            データシーケンスを同値類（同じクラスに属すると定義されたデータ群）に分割する
            </summary>
            <param name="storage">同値類として分割されたシーケンスの保存領域．nullの場合は，seq->storage を使用する．</param>
            <param name="labels">出力パラメータ．入力シーケンスの各要素に割り振られた（分割結果を表す）0から始まるラベルシーケンスへのポインタのポインタ．</param>
            <param name="isEqual">2つのシーケンス要素が同じクラスである場合，関係関数は 0以外を返す． そうでなければ0を返す．分割アルゴリズムは，同値基準として関係関数の推移閉包を用いる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Pop``1">
            <summary>
            シーケンスの末尾から一つの要素を削除する (cvSeqPop).
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <returns>削除した要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PopFront``1">
            <summary>
            シーケンスの先頭から一つの要素を削除する (cvSeqPopFront).
            </summary>
            <typeparam name="T">出力先オブジェクトの型</typeparam>
            <returns>削除した要素をコピーする出力先</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PopMulti``1(System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）から削除する (cvSeqPopMulti).
            </summary>
            <typeparam name="T">削除する要素の型</typeparam>
            <param name="count">削除される要素数．</param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Push">
            <summary>
            シーケンスの末尾に要素一つ分の領域を確保する (cvSeqPush)．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Push``1(``0)">
            <summary>
            シーケンスの末尾に要素を追加し，割り付けられた要素を返す (cvSeqPush)．
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <typeparam name="T">要素の型</typeparam>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PushFront``1(``0)">
            <summary>
            シーケンスの先頭に要素を追加し，割り付けられた要素へのポインタを返す (cvSeqPushFront).
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <typeparam name="T">追加する要素の型. プリミティブ型か、OpenCVの構造体(CvPointなど).</typeparam>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.PushMulti``1(``0[],OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）に追加する (cvSeqPushMulti).
            </summary>
            <typeparam name="T">追加する要素の型</typeparam>
            <param name="elements">追加される要素群．</param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Search(System.IntPtr,OpenCvSharp.CvCmpFunc,System.Boolean,System.Int32@)">
            <summary>
            シーケンスの中から要素を検索する (cvSeqSearch).
            </summary>
            <param name="elem">検索する要素</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
            <param name="isSorted">シーケンスがソート済みか否かを示すフラグ</param>
            <param name="elemIdx">出力パラメータ．見つかった要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.SetBlockSize(System.Int32)">
            <summary>
            シーケンスのブロックサイズを設定する
            </summary>
            <param name="deltaElems">シーケンス要素のブロックサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <param name="copyData">抽出されたスライスの要素をコピーするかしないかを示すフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.Sort(OpenCvSharp.CvCmpFunc)">
            <summary>
            シーケンスの要素を，指定した比較関数を用いてソートする (cvSeqSort).
            </summary>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartAppend">
            <summary>
            シーケンスへのデータ書き込み処理を初期化する (cvStartAppendToSeq).
            </summary>
            <returns>ライタ（Writer）の状態．この関数で初期化される．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartRead(OpenCvSharp.CvSeqReader)">
            <summary>
            シーケンスからの連続読み出し処理を初期化する (cvStartReadSeq).
            </summary>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.StartRead(OpenCvSharp.CvSeqReader,System.Boolean)">
            <summary>
            シーケンスからの連続読み出し処理を初期化する (cvStartReadSeq).
            </summary>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
            <param name="reverse">シーケンス走査方向の指定．reverse が false の場合，リーダは先頭のシーケンス要素に位置する．それ以外は最後の要素に位置する．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ToArray``1">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする (cvCvtSeqToArray).
            </summary>
            <typeparam name="T"></typeparam>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq.ToArray``1(OpenCvSharp.CvSlice)">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする (cvCvtSeqToArray).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="slice">配列へコピーするシーケンス内の部分</param>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="P:OpenCvSharp.CvSeq.HPrev">
            <summary>
            一つ前のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.HNext">
            <summary>
            一つ後のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.VPrev">
            <summary>
            一つ前のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.VNext">
            <summary>
            一つ後のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Total">
            <summary>
            要素の総数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.ElemSize">
            <summary>
            シーケンス要素のサイズ（バイト単位）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.BlockMax">
            <summary>
            最新のブロックの最大値
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Ptr">
            <summary>
            現在の書き込みポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.DeltaElems">
            <summary>
            シーケンスを拡張させる際に，領域確保する要素数（シーケンスの粒度）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.Storage">
            <summary>
            seqが保存される領域
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.FreeBlocks">
            <summary>
            空きブロックリスト
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq.First">
            <summary>
            先頭シーケンスブロックへのポインタ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.#ctor(OpenCvSharp.CvSeq,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            輪郭の階層的表現を生成する
            </summary>
            <param name="contour">入力輪郭</param>
            <param name="storage">結果のツリーの出力先</param>
            <param name="threshold">近似精度</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvContourTree.SizeOf">
            <summary>
            sizeof(CvContourTree) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourTree.ContourFromContourTree(OpenCvSharp.CvMemStorage,OpenCvSharp.CvTermCriteria)">
            <summary>
            ツリーから輪郭を復元する
            </summary>
            <param name="storage">復元した輪郭の出力先</param>
            <param name="criteria">復元を止める基準</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvContourTree.P1">
            <summary>
            The first point of the binary tree root segment
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContourTree.P2">
            <summary>
            The last point of the binary tree root segment
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvGraph">
            <summary>
            重み付きの有向または無向グラフ
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSet">
            <summary>
            ノードの集合
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor">
            <summary>
            既定の初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            空のセットを生成する
            </summary>
            <param name="setFlags">生成するセットのタイプ． </param>
            <param name="headerSize">セットのヘッダのサイズ（sizeof(CvSet)以上）． </param>
            <param name="elemSize">セットの要素のサイズ（CvSetElem 以上）． </param>
            <param name="storage">セットのためのコンテナ． </param>
        </member>
        <member name="M:OpenCvSharp.CvSet.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvSet*</param>
        </member>
        <member name="F:OpenCvSharp.CvSet.SizeOf">
            <summary>
            sizeof(CvSet)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSet.ClearSet">
            <summary>
            セットをクリアする
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.GetSetElem(System.Int32)">
            <summary>
            インデックスによってセットの要素を検索する
            </summary>
            <param name="index">シーケンスの中のセットの要素のインデックス．</param>
            <returns>見つけた要素への参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd(OpenCvSharp.CvSetElem)">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <param name="elem">挿入する要素． nullでない場合，新たに確保したノードにデータをコピーする （コピーした後，先頭の整数フィールドの最上位ビットはクリアされる）． </param>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetAdd(OpenCvSharp.CvSetElem,OpenCvSharp.CvSetElem@)">
            <summary>
            セットに新しいノード（要素）を追加する
            </summary>
            <param name="elem">挿入する要素． nullでない場合，新たに確保したノードにデータをコピーする （コピーした後，先頭の整数フィールドの最上位ビットはクリアされる）． </param>
            <param name="insertedElem">割り当てられた要素への参照</param>
            <returns>ノードへのインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetNew">
            <summary>
            セットに要素を加える（高速版）
            </summary>
            <returns>ノードへのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetRemove(System.Int32)">
            <summary>
            セットから要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.CvSet.SetRemoveByPtr(System.IntPtr)">
            <summary>
            ポインタで指定したセットの要素を削除する
            </summary>
            <param name="elem">削除される要素．</param>
        </member>
        <member name="P:OpenCvSharp.CvSet.FreeElems">
            <summary>
            空きノードのリスト 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSet.ActiveCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor">
            <summary>
            既定の初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            空のグラフを生成する
            </summary>
            <param name="graphFlags">生成したグラフのタイプ．無向グラフの場合，CV_SEQ_KIND_GRAPH，有向グラフの場合，CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED． </param>
            <param name="vtxSize">グラフのヘッダサイズ （sizeof(CvGraph)以上）</param>
            <param name="edgeSize">グラフの頂点サイズ</param>
            <param name="storage">グラフの辺サイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(OpenCvSharp.SeqType,System.Int32,System.Int32,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            空のグラフを生成する
            </summary>
            <param name="graphFlags">生成したグラフのタイプ．無向グラフの場合，CV_SEQ_KIND_GRAPH，有向グラフの場合，CV_SEQ_KIND_GRAPH | CV_GRAPH_FLAG_ORIENTED． </param>
            <param name="headerSize">グラフのヘッダサイズ （sizeof(CvGraph)以上）</param>
            <param name="vtxSize">グラフの頂点サイズ</param>
            <param name="edgeSize">グラフの辺サイズ</param>
            <param name="storage">グラフコンテナ</param>
        </member>
        <member name="M:OpenCvSharp.CvGraph.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvGraph*</param>
        </member>
        <member name="F:OpenCvSharp.CvGraph.SizeOf">
            <summary>
            sizeof(CvGraph) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.ClearGraph">
            <summary>
            グラフから全ての頂点と辺を削除する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvGraph.CloneGraph(OpenCvSharp.CvMemStorage)">
            <summary>
            グラフをコピーする
            </summary>
            <param name="storage">コピーのためのコンテナ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.FindGraphEdge(System.Int32,System.Int32)">
            <summary>
            グラフから辺を検出する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphFindEdge(System.Int32,System.Int32)">
            <summary>
            グラフから辺を検出する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.FindGraphEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を検出する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点へのポインタ． </param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>指定した二つの頂点を接続する辺</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphFindEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を検出する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点へのポインタ． </param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>指定した二つの頂点を接続する辺</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <param name="edge">オプションの入力パラメータ．辺の初期化のためのデータ． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdge(System.Int32,System.Int32,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            グラフに辺を追加する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示すインデックス</param>
            <param name="endIdx">辺の終点を示すインデックス．無向グラフの場合，順序はどちらでもよい． </param>
            <param name="edge">オプションの入力パラメータ．辺の初期化のためのデータ． </param>
            <param name="insertedEdge">入力された辺のアドレスを保存するための，オプションの出力パラメータ． </param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <param name="edge">オプションの入力パラメータ，辺の初期化データ．</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddEdgeByPtr(OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,OpenCvSharp.CvGraphEdge,System.IntPtr)">
            <summary>
            グラフに辺を追加する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点</param>
            <param name="endVtx">辺の終点を示す頂点</param>
            <param name="edge">オプションの入力パラメータ，辺の初期化データ．</param>
            <param name="insertedEdge">辺の集合の中で入力された辺のアドレスを保存するための，オプションの出力パラメータ．</param>
            <returns>追加に成功すると1を返し，すでに二つの頂点を接続する辺が存在する場合は0を返し，頂点のどちらかが存在しない，始点と終点が同じとき，他の重大な問題があるときには-1を返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx">
            <summary>
            グラフに頂点を追加する
            </summary>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx(OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフに頂点を追加する
            </summary>
            <param name="vtx">追加される頂点の初期化に使用される，オプションの入力引数（sizeof(CvGraphVtx)の領域を超えたユーザー定義フィールドのみコピーされる）． </param>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphAddVtx(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx@)">
            <summary>
            グラフに頂点を追加する
            </summary>
            <param name="vtx">追加される頂点の初期化に使用される，オプションの入力引数（sizeof(CvGraphVtx)の領域を超えたユーザー定義フィールドのみコピーされる）． </param>
            <param name="insertedVtx">新しい頂点のアドレスがここに書かれる．</param>
            <returns>頂点のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphEdgeIdx(OpenCvSharp.CvGraphEdge)">
            <summary>
            グラフの辺のインデックスを返す
            </summary>
            <param name="edge">辺への参照</param>
            <returns>グラフの辺のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphGetEdgeCount">
            <summary>
            Returns count of edges
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphGetVtxCount">
            <summary>
            Returns count of vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveEdge(System.Int32,System.Int32)">
            <summary>
            グラフから辺を削除する（インデックス指定）
            </summary>
            <param name="startIdx">辺の始点を示す頂点のインデックス． </param>
            <param name="endIdx">辺の終点を示す頂点のインデックス．無向グラフの場合，順序はどちらでもよい． </param>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveEdgeByPtr(OpenCvSharp.CvGraphVtx,OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから辺を削除する（ポインタ指定）
            </summary>
            <param name="startVtx">辺の始点を示す頂点へのポインタ．</param>
            <param name="endVtx">辺の終点を示す頂点へのポインタ．無向グラフの場合，順序はどちらでもよい． </param>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveVtx(System.Int32)">
            <summary>
            グラフから頂点を削除する（インデックス指定）
            </summary>
            <param name="index">削除される頂点のインデックス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphRemoveVtxByPtr(OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフから頂点を削除する（ポインタ指定）
            </summary>
            <param name="vtx">削除される頂点へのポインタ</param>
            <returns>削除された辺の数，あるいは頂点がグラフに存在しない場合は-1</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxDegree(System.Int32)">
            <summary>
            頂点に接続している辺の数を数える（インデックス指定）
            </summary>
            <param name="vtxIdx">頂点のインデックス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxDegreeByPtr(OpenCvSharp.CvGraphVtx)">
            <summary>
            頂点に接続している辺の数を数える（ポインタ指定）
            </summary>
            <param name="vtx">頂点へのポインタ</param>
            <returns>指定した頂点に接続した（入る/出る両方向の）辺の数</returns>
        </member>
        <member name="M:OpenCvSharp.CvGraph.GraphVtxIdx(OpenCvSharp.CvGraphVtx)">
            <summary>
            グラフ頂点のインデックスを返す
            </summary>
            <param name="vtx">グラフ頂点への参照</param>
            <returns>グラフ頂点のインデックスを返す</returns>
        </member>
        <member name="P:OpenCvSharp.CvGraph.Edges">
            <summary>
            辺のセット
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvDistanceFunction">
            <summary>
            cvCalcEMD2で用いる, ユーザ定義距離関数．2点の座標を与えると，その点間の距離を返す． 
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvWin32WindowCallback">
            <summary>
            WndProc
            </summary>
            <param name="hwnd">メッセージのウィンドウ ハンドル</param>
            <param name="msg">メッセージの ID 番号</param>
            <param name="wParam">メッセージの WParam フィールド</param>
            <param name="lParam">メッセージの LParam フィールド</param>
            <param name="result">メッセージの処理に応答して Windows に返される値</param>
        </member>
        <member name="T:OpenCvSharp.AngleUnit">
            <summary>
            cvCartToPolarで用いる、角度を表すためにラジアン，または度のどちらを用いるかを示すフラグ． 
            </summary>
        </member>
        <member name="F:OpenCvSharp.AngleUnit.Radians">
            <summary>
            ラジアン単位の角度
            </summary>
        </member>
        <member name="F:OpenCvSharp.AngleUnit.Degrees">
            <summary>
            度数単位の角度
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourTreesMatchMethod">
            <summary>
            cvMatchContourTreesで用いる、類似度
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourTreesMatchMethod.I1">
            <summary>
            [CV_CONTOUR_TREES_MATCH_I1]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ConvexHullOrientation">
            <summary>
            凸包を構成するデータの並び
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvexHullOrientation.Clockwise">
            <summary>
            時計回り
            [CV_CLOCKWISE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvexHullOrientation.Counterclockwise">
            <summary>
            反時計回り
            [CV_COUNTER_CLOCKWISE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.GraphEdgeVtxFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphItemVisited">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphSearchTreeNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphEdgeVtxFlag.GraphForwardEdgeFlag">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.GraphScannerMask">
            <summary>
            cvCreateGraphScannerで用いるイベントマスク．どのイベントにユーザが着目したいのかを指定する.
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.Vertex">
            <summary>
            はじめてアクセスした頂点で停止する
            [CV_GRAPH_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.TreeEdge">
            <summary>
            tree edgeで停止する （tree edge は最後にアクセスした頂点と次にアクセスされる頂点を接続する辺のこと）
            [CV_GRAPH_TREE_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.BackEdge">
            <summary>
            back edgeで停止する （back edge は最後にアクセスした頂点と探索木内でのその親のいずれかを接続する辺のこと）
            [CV_GRAPH_BACK_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.ForwardEdge">
            <summary>
            forward edgeで停止する （forward edge は最後にアクセスした頂点と探索木内でのその子のいずれかを接続する辺のこと． forward edge は有向グラフの走査においてのみ有効）
            [CV_GRAPH_FORWARD_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.CrossEdge">
            <summary>
            cross edgeで停止する （cross edge は異なる探索木同士か同じ木の枝同士を接続する辺のこと． cross edges は有向グラフの走査においてのみ有効）
            [CV_GRAPH_CROSS_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.AnyEdge">
            <summary>
            任意の辺で停止する（tree, back, forward そしてcross edges）
            [CV_GRAPH_ANY_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.NewTree">
            <summary>
            すべての新しい探索木の先頭で停止する． 走査プロセスが，走査開始頂点（initial vertex）から到達可能なすべての頂点と辺にアクセスする場合 （アクセスされた頂点は辺とともに一つの木（tree）を構成する），
            グラフ中でまだアクセスされていない頂点を探索し， その頂点からの探索を再開する．新しい木の開始前（最初に cvNextGraphItem が呼ばれる，全く初めての場合も含む）に， 
            CV_GRAPH_NEW_TREE イベントを生成する．無向グラフにおいては，各探索木が，グラフの接続される一つの成分に対応する．
            [CV_GRAPH_NEW_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.BackTracking">
            <summary>
            逆探索（バックトラッキング，既にアクセスされた頂点を逆に戻っていく）中に，すべてのアクセス済みの頂点で停止する．
            [CV_GRAPH_BACKTRACKING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.Over">
            <summary>
            [CV_GRAPH_OVER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GraphScannerMask.AllItems">
            <summary>
            [CV_GRAPH_ALL_ITEMS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PCAFlag">
            <summary>
            cvCalcPCAの操作フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.DataAsRow">
            <summary>
            行としてベクトルが保存される（つまり，あるベクトルの全ての要素は連続的に保存される）
            [CV_PCA_DATA_AS_ROW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.DataAsCol">
            <summary>
            列としてベクトルが保存される（つまり，あるベクトル成分に属する値は連続的に保存される）
            [CV_PCA_DATA_AS_COL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.PCAFlag.UseAvg">
            <summary>
            事前に計算された平均ベクトルを用いる
            [CV_PCA_USE_AVG]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ConvertImageFlag">
            <summary>
            cvConvertImageの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvertImageFlag.Flip">
            <summary>
            画像を垂直方向に反転 [CV_CVTIMG_FLIP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ConvertImageFlag.SwapRB">
            <summary>
            赤と青のチャンネルを入れ替える [CV_CVTIMG_SWAP_RB]
            </summary>
        </member>
        <member name="T:OpenCvSharp.PixelConnectivity">
            <summary>
            CvLineIteratorにおける、走査した線分の接続性
            </summary>
        </member>
        <member name="F:OpenCvSharp.PixelConnectivity.Connectivity4">
            <summary>
            周囲4方向(上下左右)
            </summary>
        </member>
        <member name="F:OpenCvSharp.PixelConnectivity.Connectivity8">
            <summary>
            周囲8方向
            </summary>
        </member>
        <member name="T:OpenCvSharp.StereoRectificationFlag">
            <summary>
            輪郭の近似手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoRectificationFlag.Zero">
            <summary>
            フラグなし (=0).
            利用できる画像領域が最大になるように（エピポーラ線の傾きに従って）片方の画像を水平・垂直方向に移動する.
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoRectificationFlag.ZeroDisparity">
            <summary>
            平行化後のビューにおいて各カメラの主点（光学中心）が同じ座標になるようにする． 
            [CV_CALIB_ZERO_DISPARITY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ImageOrigin">
            <summary>
            IplImageの原点
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageOrigin.TopLeft">
            <summary>
            左上原点 [IPL_ORIGIN_TL (0)]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ImageOrigin.BottomLeft">
            <summary>
            左下原点 (Windowsのビットマップ形式) [IPL_ORIGIN_BL (1)]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCircleSegment">
            <summary>
            cvHoughCirclesで得られる、円のデータ(中心と半径)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCircleSegment.Center">
            <summary>
            円の中心
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCircleSegment.Radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.#ctor(OpenCvSharp.CvPoint2D32f,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="center">円の中心</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.Equals(OpenCvSharp.CvCircleSegment)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.op_Equality(OpenCvSharp.CvCircleSegment,OpenCvSharp.CvCircleSegment)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.op_Inequality(OpenCvSharp.CvCircleSegment,OpenCvSharp.CvCircleSegment)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvCircleSegment.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvConvexityDefect">
            <summary>
            輪郭の凸包の凹状欠損を表す構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvConvexityDefect.SizeOf">
            <summary>
            sizeof(CvConvexityDefect)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConvexityDefect.#ctor(System.IntPtr,System.IntPtr,System.IntPtr,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="start">輪郭の凹状欠損の始点</param>
            <param name="end">輪郭の凹状欠損の終点</param>
            <param name="depth_point">凹状欠損のうちで凸包から最も遠い点</param>
            <param name="depth">最も遠い点と凸包間の距離</param>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.Start">
            <summary>
            輪郭の凹状欠損の始点
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.End">
            <summary>
            輪郭の凹状欠損の終点
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.DepthPoint">
            <summary>
            凹状欠損のうちで凸包から最も遠い点
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConvexityDefect.Depth">
            <summary>
            最も遠い点と凸包間の距離
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvAvgComp">
            <summary>
            cvHaarDetectObjectsで得られる矩形データ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAvgComp.Rect">
            <summary>
            オブジェクトを内包する矩形（グループの平均矩形）
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvAvgComp.Neighbors">
            <summary>
            グループ内に存在する隣接矩形の数
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.#ctor(OpenCvSharp.CvRect,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="rect">オブジェクトを内包する矩形（グループの平均矩形）</param>
            <param name="neighbors">グループ内に存在する隣接矩形の数</param>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.Equals(OpenCvSharp.CvAvgComp)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Equality(OpenCvSharp.CvAvgComp,OpenCvSharp.CvAvgComp)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Inequality(OpenCvSharp.CvAvgComp,OpenCvSharp.CvAvgComp)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.op_Implicit(OpenCvSharp.CvAvgComp)~OpenCvSharp.CvRect">
            <summary>
            CvRectへの暗黙のキャスト (互換性のため)
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvAvgComp.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvString">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvString.Len">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvString.Ptr">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvString.#ctor(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="len"></param>
        </member>
        <member name="M:OpenCvSharp.CvString.op_Implicit(OpenCvSharp.CvString)~System.String">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvString.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMSERParams">
            <summary>
            MSERのパラメータ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMSERParams.Struct">
            <summary>
            Native structure field
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor">
            <summary>
            MSERのパラメータを生成する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            MSERのパラメータを生成する
            </summary>
            <param name="delta">delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}</param>
            <param name="minArea">prune the area which smaller than min_area</param>
            <param name="maxArea">prune the area which bigger than max_area</param>
            <param name="maxVariation">prune the area have simliar size to its children</param>
            <param name="minDiversity">trace back to cut off mser with diversity &lt; min_diversity</param>
            <param name="maxEvolution">for color image, the evolution steps</param>
            <param name="areaThreshold">the area threshold to cause re-initialize</param>
            <param name="minMargin">ignore too small margin</param>
            <param name="edgeBlurSize">the aperture size for edge blur</param>
        </member>
        <member name="M:OpenCvSharp.CvMSERParams.Clone">
            <summary>
            現在のインスタンスのコピーである新しいオブジェクトを作成します。    
            </summary>
            <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.Delta">
            <summary>
            delta, in the code, it compares (size_{i}-size_{i-delta})/size_{i-delta}
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxArea">
            <summary>
            prune the area which bigger than max_area
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinArea">
            <summary>
            prune the area which smaller than min_area
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxVariation">
            <summary>
            prune the area have simliar size to its children
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinDiversity">
            <summary>
            trace back to cut off mser with diversity &lt; min_diversity
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MaxEvolution">
            <summary>
            for color image, the evolution steps
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.AreaThreshold">
            <summary>
            the area threshold to cause re-initialize
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.MinMargin">
            <summary>
            ignore too small margin
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMSERParams.EdgeBlurSize">
            <summary>
            the aperture size for edge blur
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStarKeypoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Size">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStarKeypoint.Response">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.#ctor(OpenCvSharp.CvPoint,System.Int32,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <param name="response"></param>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.Equals(OpenCvSharp.CvStarKeypoint)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.op_Equality(OpenCvSharp.CvStarKeypoint,OpenCvSharp.CvStarKeypoint)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.op_Inequality(OpenCvSharp.CvStarKeypoint,OpenCvSharp.CvStarKeypoint)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvStarKeypoint.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvFaceData">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.MouthRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.LeftEyeRect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFaceData.RightEyeRect">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.#ctor(OpenCvSharp.CvRect,OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            
            </summary>
            <param name="mouthRect"></param>
            <param name="leftEyeRect"></param>
            <param name="rightEyeRect"></param>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.Equals(OpenCvSharp.CvFaceData)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Equality(OpenCvSharp.CvFaceData,OpenCvSharp.CvFaceData)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Inequality(OpenCvSharp.CvFaceData,OpenCvSharp.CvFaceData)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.op_Implicit(OpenCvSharp.CvFaceData)~OpenCvSharp.CvRect">
            <summary>
            CvRectへの暗黙のキャスト (互換性のため)
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvFaceData.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvLSVMFilterPosition">
            <summary>
            Structure describes the position of the filter in the feature pyramid
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.SizeOf">
            <summary>
            sizeof(CvLSVMFilterPosition)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLSVMFilterPosition.L">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="l"></param>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.Equals(OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.op_Equality(OpenCvSharp.CvLSVMFilterPosition,OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            == 演算子のオーバーロード。x,y座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.op_Inequality(OpenCvSharp.CvLSVMFilterPosition,OpenCvSharp.CvLSVMFilterPosition)">
            <summary>
            != 演算子のオーバーロード。x,y座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvLSVMFilterPosition.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvObjectDetection">
            <summary>
            structure contains the bounding box and confidence level for detected object 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObjectDetection.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvObjectDetection.Score">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.#ctor(OpenCvSharp.CvRect,System.Single)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="score"></param>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.Equals(OpenCvSharp.CvObjectDetection)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.op_Equality(OpenCvSharp.CvObjectDetection,OpenCvSharp.CvObjectDetection)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.op_Inequality(OpenCvSharp.CvObjectDetection,OpenCvSharp.CvObjectDetection)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvObjectDetection.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.StringArrayAddress">
            <summary>
            Class to get address of string array
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.ArrayAddress2`1">
            <summary>
            Class to get address of specified jagged array 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.#ctor(`0[][])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress2`1.op_Implicit(OpenCvSharp.Utilities.ArrayAddress2{`0})~System.IntPtr[]">
            <summary>
            ポインタへの暗黙のキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress2`1.Pointer">
            <summary>
            ポインタを得る
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress2`1.Dim1Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress2`1.Dim2Lengths">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StringArrayAddress.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="stringArray"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.StringArrayAddress.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="T:OpenCvSharp.Utilities.ArrayAddress1`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.#ctor(`0[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.#ctor(`0[0:,0:])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ArrayAddress1`1.op_Implicit(OpenCvSharp.Utilities.ArrayAddress1{`0})~System.IntPtr">
            <summary>
            
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ArrayAddress1`1.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvConnectedComp">
            <summary>
            連結成分
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.#ctor">
            <summary>
            メモリ領域を確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.FromPtr(System.IntPtr)">
            <summary>
            ポインタからオブジェクトを生成する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvConnectedComp.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvConnectedComp.SizeOf">
            <summary>
            sizeof(CvConnectedComp)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Area">
            <summary>
            セグメント化された連結成分の面積
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Value">
            <summary>
            セグメント化された連結成分のグレースケール値
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Rect">
            <summary>
            セグメント化された連結成分のROI
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvConnectedComp.Contour">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvContourScanner">
            <summary>
            輪郭スキャナ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvContourScanner.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize"></param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.#ctor(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <param name="offset">ROIのオフセット．cvFindContoursを参照． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Initialize(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            Initializes contour scanning process
            </summary>
            <param name="image">The source 8-bit single channel binary image. </param>
            <param name="storage">Container of the retrieved contours.</param>
            <param name="headerSize">Size of the sequence header, >=sizeof(CvChain) if method=CV_CHAIN_CODE, and >=sizeof(CvContour) otherwise. </param>
            <param name="mode">Retrieval mode; see cvFindContours. </param>
            <param name="method">Approximation method. It has the same meaning as in cvFindContours, but CV_LINK_RUNS can not be used here. </param>
            <param name="offset">ROI offset; see cvFindContours. </param>
            <returns>CvContourScanner</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Initialize">
            <summary>
            Initializes contour scanning process
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize"></param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.StartFindContours(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Int32,OpenCvSharp.ContourRetrieval,OpenCvSharp.ContourChain,OpenCvSharp.CvPoint)">
            <summary>
            輪郭走査処理の初期化を行う
            </summary>
            <param name="image">入力画像．8ビットシングルチャンネルの2値化画像． </param>
            <param name="storage">抽出された輪郭データの保存領域． </param>
            <param name="headerSize">シーケンスヘッダのサイズ． method=CV_CHAIN_CODEの時， >=sizeof(CvChain) ，それ以外の場合 >=sizeof(CvContour)． </param>
            <param name="mode">抽出モード．</param>
            <param name="method">近似手法．cvFindContoursと同様，但し CV_LINK_RUNS は使用不可． </param>
            <param name="offset">ROIのオフセット．cvFindContoursを参照． </param>
            <returns>輪郭スキャナのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.EndFindContours">
            <summary>
            輪郭走査処理を終了する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.FindNextContour">
            <summary>
            画像中の次の輪郭を検索する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.SubstituteContour(OpenCvSharp.CvSeq{OpenCvSharp.CvPoint})">
            <summary>
            抽出された輪郭を置き換える
            </summary>
            <param name="newContour">新しく置き換える輪郭</param>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OpenCvSharp.CvContourScanner.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvFileNode">
            <summary>
            ファイルストレージノード
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvFileNode*</param>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.FromPtr(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvFileNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvFileNode.SizeOf">
            <summary>
            sizeof(CvFileNode) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.GetFileNodeName">
            <summary>
            ファイルノードの名前を返す．ファイルノードが名前を持たないか，nodeがnullの場合にはnullを返す．
            </summary>
            <returns>ファイルノードの名前</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadInt">
            <summary>
            ファイルノードで表現された整数値を返す．
            </summary>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadInt(System.Int32)">
            <summary>
            ファイルノードで表現された整数値を返す．
            </summary>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadReal">
            <summary>
            ファイルノードで表現された浮動小数点型の値を返す．
            </summary>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadReal(System.Double)">
            <summary>
            ファイルノードで表現された浮動小数点型の値を返す．
            </summary>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadString">
            <summary>
            ファイルノードで表現された文字列を返す．
            </summary>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileNode.ReadString(System.String)">
            <summary>
            ファイルノードで表現された文字列を返す．
            </summary>
            <param name="defaultValue">nodeがnullの場合の戻り値</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.Tag">
            <summary>
            ファイルノードの型
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataHead">
            <summary>
            Dataの先頭8バイトを返す
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataF">
            <summary>
            浮動小数点のスカラー値
            CvFileNode->data->f
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataI">
            <summary>
            整数のスカラー値
            CvFileNode->data->i
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataStr">
            <summary>
            文字列
            CvFileNode->data->str
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataSeq">
            <summary>
            シーケンス（整列されたファイルノードのコレクション）
            CvFileNode->data->seq
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.DataMap">
            <summary>
            マップ（名前付けされたファイルノードのコレクション）
            CvFileNode->data->map
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvFileNode.Name">
            <summary>
            ファイルノードの名前
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFileStorage">
            <summary>
            ファイルストレージ.
            CXCoreは，XML(http://www.w3c.org/XML)や YAML (http://www.yaml.org)形式のデータの読み書きが可能である．
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFileStorage.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode)">
            <summary>
            データの読み書きのためのファイルを開く．
            書き込みの場合は，新しいファイルが作成されるか，ファイルが存在する場合には上書きされる．
            また，読み書きされるファイルの種類は拡張子で判別される． XMLの場合は.xml，YAMLの場合は.ymlまたは.yamlである．
            </summary>
            <param name="filename">ストレージに関連づけられたファイルの名前</param>
            <param name="memstorage">一時的なデータや，CvSeqや CvGraphなどの動的構造体の保存に使われるメモリストレージ．nullの場合，一時的なメモリが確保されて使用される．</param>
            <param name="flags">ファイルを開く方法または作成する方法</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.String,OpenCvSharp.CvMemStorage,OpenCvSharp.FileStorageMode,System.String)">
            <summary>
            データの読み書きのためのファイルを開く．
            書き込みの場合は，新しいファイルが作成されるか，ファイルが存在する場合には上書きされる．
            また，読み書きされるファイルの種類は拡張子で判別される． XMLの場合は.xml，YAMLの場合は.ymlまたは.yamlである．
            </summary>
            <param name="filename">ストレージに関連づけられたファイルの名前</param>
            <param name="memstorage">一時的なデータや，CvSeqや CvGraphなどの動的構造体の保存に使われるメモリストレージ．nullの場合，一時的なメモリが確保されて使用される．</param>
            <param name="flags">ファイルを開く方法または作成する方法</param>
            <param name="encoding"></param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvFileStorage*</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.EndWriteStruct">
            <summary>
            ファイルストレージへの構造体の書き込みを終了する．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNode(OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode)">
            <summary>
            マップまたはファイルストレージ内のノードを見つける
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探す．もしmapとkeyの両方がnullの場合には， この関数はトップレベルノードを持つマップであるルートファイルノードを返す．</param>
            <param name="key">cvGetHashedKeyで取得されるノード名ヘの唯一のポインタ</param>
            <returns>与えたmap,keyに対するファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNode(OpenCvSharp.CvFileNode,OpenCvSharp.CvStringHashNode,System.Boolean)">
            <summary>
            マップまたはファイルストレージ内のノードを見つける
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探す．もしmapとkeyの両方がnullの場合には， この関数はトップレベルノードを持つマップであるルートファイルノードを返す．</param>
            <param name="key">cvGetHashedKeyで取得されるノード名ヘの唯一のポインタ</param>
            <param name="createMissing">absent keyをハッシュテーブルに追加するかどうかを指定するフラグ</param>
            <returns>与えたmap,keyに対するファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetFileNodeByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            マップ内またはファイルストレージ内からノードを探索する
            </summary>
            <param name="map">親マップ．nullの場合，この関数は一番最初のものから開始して，全てのトップレベルノード(ストリーム)内を探索する．</param>
            <param name="name">ファイルノード名</param>
            <returns>名前がnameのファイルノード</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetRootFileNode">
            <summary>
            トップレベルファイルノードの一つを返す．
            </summary>
            <returns>トップレベルファイルノードの一つ</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetRootFileNode(System.Int32)">
            <summary>
            トップレベルファイルノードの一つを返す．
            </summary>
            <param name="streamIndex">0から始まるストリームのインデックス．多くの場合，ファイル中に存在するのは一つのストームであるが，複数にもなり得る．</param>
            <returns>トップレベルファイルノードの一つ</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetHashedKey(System.String)">
            <summary>
            与えた名前に対するユニークなポインタを返す 
            </summary>
            <param name="name">ファイルノード名</param>
            <returns>与えた名前に対するユニークなポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.GetHashedKey(System.String,System.Boolean)">
            <summary>
            与えた名前に対するユニークなポインタを返す 
            </summary>
            <param name="name">ファイルノード名</param>
            <param name="createMissing">absent keyをハッシュテーブルに追加するかどうかを指定するフラグ</param>
            <returns>与えた名前に対するユニークなポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Read``1(OpenCvSharp.CvFileNode)">
            <summary>
            オブジェクトをデコードし，その参照を返す.
            </summary>
            <typeparam name="T">返却値の型(CvArr派生型)</typeparam>
            <param name="node">ルートオブジェクトノード</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadByName``1(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            オブジェクトをデコードし，デコードする.
            cvGetFileNodeByName とcvReadの単純な合成である．
            </summary>
            <typeparam name="T">返却値の型(CvArr派生型)</typeparam>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する．</param>
            <param name="name">ノード名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadIntByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadIntの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadIntByName(OpenCvSharp.CvFileNode,System.String,System.Int32)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadIntの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された整数値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRawData``1(OpenCvSharp.CvFileNode,``0[]@,System.String)">
            <summary>
            複数の数値を読み込む
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">数値を読み込むファイルノード(シーケンス)</param>
            <param name="dst">書き込み先の配列へのポインタ．</param>
            <param name="dt">配列の個々の要素の仕様．</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRawDataSlice``1(OpenCvSharp.CvSeqReader,System.Int32,``0[]@,System.String)">
            <summary>
            複数の数値のシーケンスを読み込む
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">シーケンスリーダ</param>
            <param name="count">読み込む要素数</param>
            <param name="dst">出力配列</param>
            <param name="dt">各配列要素の仕様</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRealByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadRealの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadRealByName(OpenCvSharp.CvFileNode,System.String,System.Double)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadRealの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された浮動小数点型の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadStringByName(OpenCvSharp.CvFileNode,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadStringの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.ReadStringByName(OpenCvSharp.CvFileNode,System.String,System.String)">
            <summary>
            ファイルノードを探索し，その値を返す.
            cvGetFileNodeByName とcvReadStringの単純な合成である．
            </summary>
            <param name="map">親マップ．nullの場合，この関数はトップレベルノードを探索する.</param>
            <param name="name">ノード名</param>
            <param name="defaultValue">ファイルノードが見つからない場合の戻り値</param>
            <returns>ファイルノードで表現された文字列</returns>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartNextStream">
            <summary>
            ファイルストレージ内の次のストリームを開始する． 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartReadRawData(OpenCvSharp.CvFileNode,OpenCvSharp.CvSeqReader@)">
            <summary>
            ファイルノードのシーケンスリーダの初期化
            </summary>
            <param name="src">読み込むファイルノード(シーケンス)．</param>
            <param name="reader">シーケンスリーダへのポインタ．</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartWriteStruct(System.String,OpenCvSharp.NodeType)">
            <summary>
            新しい構造体の書き込みを開始する
            </summary>
            <param name="name">書き込む構造体の名前．読み込む場合は，この名前で構造体にアクセスできる．</param>
            <param name="structFlags">Seq, Map, Flowのフラグの組み合わせ. SeqとMapはどちらか1つを指定しなければならない.</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.StartWriteStruct(System.String,OpenCvSharp.NodeType,System.String)">
            <summary>
            新しい構造体の書き込みを開始する
            </summary>
            <param name="name">書き込む構造体の名前．読み込む場合は，この名前で構造体にアクセスできる．</param>
            <param name="structFlags">Seq, Map, Flowのフラグの組み合わせ. SeqとMapはどちらか1つを指定しなければならない.</param>
            <param name="typeName">オプションパラメータ - オブジェクトの型の名前． 
            XMLの場合，構造体開始タグのtype_id属性として書かれる． YAMLの場合，構造体名に続くコロンの後に書かれる． 
            主にユーザオブジェクトと共に使われる．ストレージが読まれたとき，エンコードされた型名がオブジェクトの型を決定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Write(System.String,OpenCvSharp.CvArr)">
            <summary>
            オブジェクトをファイルストレージに書き込む.
            </summary>
            <param name="name">書き込まれるオブジェクトの名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="arr">オブジェクトへの参照</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.Write(System.String,OpenCvSharp.CvArr,OpenCvSharp.CvAttrList)">
            <summary>
            オブジェクトをファイルストレージに書き込む.
            </summary>
            <param name="name">書き込まれるオブジェクトの名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="arr">オブジェクトへの参照.</param>
            <param name="attributes">オブジェクトの属性．これは特定の型に対して固有である.</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteComment(System.String)">
            <summary>
            ファイルストレージにコメントを書き込む (eol_comment = false)．
            このコメントはデバッグや説明を記述するために使われるもので，読み込み時には読み飛ばされる．
            </summary>
            <param name="comment">一行または複数行の，書き込まれるコメ文字列</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteComment(System.String,System.Boolean)">
            <summary>
            ファイルストレージにコメントを書き込む．
            このコメントはデバッグや説明を記述するために使われるもので，読み込み時には読み飛ばされる．
            </summary>
            <param name="comment">一行または複数行の，書き込まれるコメ文字列</param>
            <param name="eolComment">trueの場合，この関数は現在の行の最後にコメントを入れようと試みる．
            falseで，コメントが複数，または現在の行の最後に納まらない場合は，コメントは新しい行から始められる．</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteFileNode(System.String,OpenCvSharp.CvFileNode,System.Boolean)">
            <summary>
            ファイルノードを他のファイルストレージに書き込む
            </summary>
            <param name="newNodeName">書き込み先ファイルストレージ内のファイルノードの新しい名前．元の名前を維持するためには，cvGetFileNodeName(node)を用いる．</param>
            <param name="node">書き込まれるノード．</param>
            <param name="embed">書き込まれるノードがコレクションで，このパラメータがtrueの場合，階層の余分なレベルは生成されない．
            その代わりに，nodeの全ての要素は現在書き込まれている構造体に書き込まれる．
            当然，マップ要素はマップにのみ書き込まれ，シーケンス要素はシーケンスにのみ書き込まれる．</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteInt(System.String,System.Int32)">
            <summary>
            1つの整数値（名前あり，または無し）をファイルに書き込む.
            </summary>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="value">書き込まれる値</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteRawData``1(``0[],System.String)">
            <summary>
            複数の数値を書き込む
            </summary>
            <typeparam name="T">srcの要素の型</typeparam>
            <param name="src">書き込む配列</param>
            <param name="dt">フォーマット</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteReal(System.String,System.Double)">
            <summary>
            単精度浮動小数点型の値（名前あり，または無し）をファイルに書き込む．
            特別な値はエンコードされる：Not A NumberはNaN に，±Infinityは +.Inf (-.Inf) になる．
            </summary>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="value">書き込まれる値</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteString(System.String,System.String)">
            <summary>
            文字列をファイルストレージに書き込む.
            </summary>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="str">書き込まれる文字列</param>
        </member>
        <member name="M:OpenCvSharp.CvFileStorage.WriteString(System.String,System.String,System.Boolean)">
            <summary>
            文字列をファイルストレージに書き込む.
            </summary>
            <param name="name">書き込まれる文字列の名前．親の構造体がシーケンスの場合は，nullにしなければならない．</param>
            <param name="str">書き込まれる文字列</param>
            <param name="quote">trueの場合，書き込まれる文字列は必要かどうかに関わらず引用符で挟まれる．
            falseの場合，必要な場合にのみ引用符が使われる（例えば，文字列が数字で始まっていたり，スペースを含む場合）．</param>
        </member>
        <member name="T:OpenCvSharp.CvHaarClassifierCascade">
            <summary>
            段階分類器のカスケードまたは木
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifierCascade.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvHaarClassifierCascade*</param>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.FromFile(System.String)">
            <summary>
            ファイルからHaar分類機のカスケードを読み込んで返す (cvLoad相当).
            </summary>
            <param name="filename">読み込むファイル(xml/yaml)</param>
            <returns>CvHaarClassifierCascade</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.FromDirectory(System.String,OpenCvSharp.CvSize)">
            <summary>
            ファイルまたはOpenCV 内に組み込まれた分類器データベースから，学習されたカスケード分類器を読み込む (cvLoadHaarClassifierCascade) 
            </summary>
            <param name="directory">学習されたカスケード分類器の記述を含むディレクトリ名． </param>
            <param name="origWindowSize">オブジェクトのオリジナルサイズ（カスケード分類器はこのサイズに合わせて学習される）． これはカスケード分類器内に保存されないので，別に指定する必要がある事に注意． </param>
            <remarks>この関数は，もはやサポートされない．現在では，オブジェクト検出分類器はディレクトリではなく XML/YAML ファイルに保存される． カスケードをファイルから読み込むためには，関数 cvLoad を用いる．</remarks>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvHaarClassifierCascade.SizeOf">
            <summary>
            sizeof(CvHaarClassifierCascade) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.HaarDetectObjects(OpenCvSharp.CvArr,OpenCvSharp.CvMemStorage,System.Double,System.Int32,OpenCvSharp.HaarDetectionType,OpenCvSharp.CvSize)">
            <summary>
            与えられた画像からオブジェクトを含む様な矩形領域を検出し，それらの領域を矩形の列として返す．
            </summary>
            <param name="image">この画像の中からオブジェクトを検出する</param>
            <param name="storage">オブジェクト候補の矩形が得られた場合に，その矩形列を保存するメモリストレージ</param>
            <param name="scaleFactor">スキャン毎に探索ウィンドウがスケーリングされる際のスケールファクタ． 例えばこの値が 1.1 ならば，ウィンドウが 10% 大きくなる</param>
            <param name="minNeighbors">（これから 1 を引いた値が）オブジェクトを構成する近傍矩形の最小数となる． min_neighbors-1 よりも少ない矩形しか含まないようなグループは全て棄却される． もし min_neighbors が 0 である場合，この関数はグループを一つも生成せず，候補となる矩形を全て返す．これはユーザがカスタマイズしたグループ化処理を適用したい場合に有用である． </param>
            <param name="flags">処理モード</param>
            <param name="minSize">最小ウィンドウサイズ．デフォルトでは分類器の学習に用いられたサンプルのサイズが設定される（顔検出の場合は，~20×20）.</param>
            <returns>CvAvgCompを要素とするCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Run(OpenCvSharp.CvPoint)">
            <summary>
            ブーストされた分類器のカスケードを，与えられた画像位置で実行する
            </summary>
            <param name="pt">解析する領域の左上の角</param>
            <returns>分析対象の領域が全ての分類器ステージを通過した場合（これは候補の一つになる）はtrue，そうでなければfalse．</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.Run(OpenCvSharp.CvPoint,System.Boolean)">
            <summary>
            ブーストされた分類器のカスケードを，与えられた画像位置で実行する
            </summary>
            <param name="pt">解析する領域の左上の角</param>
            <param name="startStage">0から始まるインデックスで，カスケードステージをどこ から開始するかを決定する</param>
            <returns>分析対象の領域が全ての分類器ステージを通過した場合（これは候補の一つになる）はtrue，そうでなければfalse．</returns>
        </member>
        <member name="M:OpenCvSharp.CvHaarClassifierCascade.SetImages(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Double)">
            <summary>
            画像を隠れ分類器カスケードに割り当てる．
            </summary>
            <param name="sum">32 ビット整数シングルチャンネルのインテグラルイメージ</param>
            <param name="sqsum">64ビット浮動小数点型のシングルチャンネル画像の各ピクセルを二乗した値に対するインテグラルイメージ</param>
            <param name="tiltedSum">32 ビット整数型のシングルチャンネル画像を 45°傾けたものに対するインテグラルイメージ</param>
            <param name="scale">カスケードのウィンドウスケール</param>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Flags">
            <summary>
            シグネチャ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Count">
            <summary>
            段階数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.OrigWindowSize">
            <summary>
            オリジナルのオブジェクトサイズ（カスケードの学習対象）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.RealWindowSize">
            <summary>
            現在のオブジェクトサイズ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.Scale">
            <summary>
            現在のスケール
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.StageClassifier">
            <summary>
            段階分類器の配列
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHaarClassifierCascade.HidCascade">
            <summary>
            cvSetImagesForHaarClassifierCascade によって生成されるカスケードの，隠れ最適表現
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvHistogram">
            <summary>
            多次元ヒストグラムの構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvHistogram.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor">
            <summary>
            CvHistogram構造体の分のメモリ領域を確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat)">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][])">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
            <param name="ranges">ヒストグラムのビン（bin）（値域）を示す配列．このパラメータの意味はパラメータuniformに依存している．
            このレンジは，ヒストグラムを計算したり，またどのヒストグラムのビンが入力画像のどの値やどのデータ要素に対応するかを決めるためのバックプロジェクションで用いられる．
            null の場合は，後から関数 cvSetHistBinRanges を用いて決定される.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.#ctor(System.Int32[],OpenCvSharp.HistogramFormat,System.Single[][],System.Boolean)">
            <summary>
            指定サイズのヒストグラムを生成し，そのヒストグラムの参照を返す． 
            </summary>
            <param name="sizes">ヒストグラム各次元のサイズを示す配列</param>
            <param name="type">ヒストグラム表現フォーマット</param>
            <param name="ranges">ヒストグラムのビン（bin）（値域）を示す配列．このパラメータの意味はパラメータuniformに依存している．
            このレンジは，ヒストグラムを計算したり，またどのヒストグラムのビンが入力画像のどの値やどのデータ要素に対応するかを決めるためのバックプロジェクションで用いられる．
            null の場合は，後から関数 cvSetHistBinRanges を用いて決定される.</param>
            <param name="uniform">一様性に関するフラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvHistogram.SizeOf">
            <summary>
            sizeof(CvHistogram)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage)">
            <summary>
            1つの画像のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage,System.Boolean)">
            <summary>
            1つの画像のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            1つの画像のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[])">
            <summary>
            画像群のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[],System.Boolean)">
            <summary>
            画像群のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Calc(OpenCvSharp.IplImage[],System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            画像群のヒストグラムを計算する (cvCalcHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="image">入力画像群．全て同じサイズ・タイプ．</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr)">
            <summary>
            1つの配列のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            1つの配列のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr,System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            1つの配列のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない．</param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[])">
            <summary>
            配列群のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[],System.Boolean)">
            <summary>
            配列群のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArr(OpenCvSharp.CvArr[],System.Boolean,OpenCvSharp.CvArr)">
            <summary>
            配列群のヒストグラムを計算する (cvCalcArrHist相当).
            ヒストグラムのビンを増加（インクリメント）するために用いられるタプルの各要素は， 対応する入力画像群の同じ場所から取り出される.
            </summary>
            <param name="arr">入力配列群．全て同じサイズ・タイプ．</param>
            <param name="accumulate">計算フラグ．セットされている場合は，ヒストグラムは処理前には最初にクリアされない． </param>
            <param name="mask">処理マスク．入力画像中のどのピクセルをカウントするかを決定する.</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProject(OpenCvSharp.CvArr[],OpenCvSharp.CvArr)">
            <summary>
            バックプロジェクションの計算を行う
            </summary>
            <param name="image">入力画像群</param>
            <param name="backProject">出力のバックプロジェクション画像．入力画像群と同じタイプ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProject(OpenCvSharp.IplImage[],OpenCvSharp.CvArr)">
            <summary>
            バックプロジェクションの計算を行う
            </summary>
            <param name="image">入力画像群</param>
            <param name="backProject">出力のバックプロジェクション画像．入力画像群と同じタイプ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcArrBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <param name="factor">ヒストグラムの正規化係数．出力画像の正規化スケールに影響する．値に確信がない場合は，１にする．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBackProjectPatch(OpenCvSharp.CvArr[],OpenCvSharp.CvArr,OpenCvSharp.CvSize,OpenCvSharp.HistogramComparison,System.Single)">
            <summary>
            ヒストグラムの比較に基づき画像内部でのテンプレート位置を求める
            </summary>
            <param name="image">入力画像群（ CvMat** 形式でも構わない）．すべて同じサイズ．</param>
            <param name="dst">出力画像</param>
            <param name="patchSize">入力画像群上をスライドさせるテンプレートのサイズ</param>
            <param name="method">比較方法．値は関数 cvCompareHist に渡される（この関数に関する記述を参照）</param>
            <param name="factor">ヒストグラムの正規化係数．出力画像の正規化スケールに影響する．値に確信がない場合は，１にする．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcBayesianProb(OpenCvSharp.CvHistogram[],OpenCvSharp.CvHistogram[])">
            <summary>
            Calculates bayesian probabilistic histograms
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram)">
            <summary>
            一つのヒストグラムをもう一方のヒストグラムで割る (cvCalcProbDensity相当).
            </summary>
            <param name="hist1">一番目のヒストグラム（除数）</param>
            <param name="hist2">二番目のヒストグラム</param>
            <param name="dstHist">出力ヒストグラム</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.CalcProbDensity(OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,OpenCvSharp.CvHistogram,System.Double)">
            <summary>
            一つのヒストグラムをもう一方のヒストグラムで割る (cvCalcProbDensity相当).
            </summary>
            <param name="hist1">一番目のヒストグラム（除数）</param>
            <param name="hist2">二番目のヒストグラム</param>
            <param name="dstHist">出力ヒストグラム</param>
            <param name="scale">出力ヒストグラムのスケール係数</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Clear">
            <summary>
            ヒストグラムをクリアする (cvClearHist).
            密なヒストグラムの場合，全てのヒストグラムのビンを0にセットする， また疎なヒストグラムの場合は，すべてのヒストグラムのビンを削除する．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Compare(OpenCvSharp.CvHistogram,OpenCvSharp.HistogramComparison)">
            <summary>
            2つの密なヒストグラムを比較する (cvCompareHist相当).
            疎なヒストグラム，あるいは重み付けされた点が集まったような，より一般的な構造を比較するためには，関数cvCalcEMD2 を用いる方が良い場合もある.
            </summary>
            <param name="hist">比較対象の密なヒストグラム</param>
            <param name="method">比較手法</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Copy(OpenCvSharp.CvHistogram)">
            <summary>
            ヒストグラムのコピーを作成する (cvCopyHist相当)．
            コピー先のヒストグラムへのポインタdstがnullの場合は，srcと同じサイズの新しいヒストグラムが作成される．
            それ以外の場合は，二つのヒストグラムは同一タイプ，サイズでないといけない．
            この関数はコピー元のヒストグラムのビンの値を，コピー先にコピーし， src内に定義されているのと同じビンの値域をセットする．
            </summary>
            <param name="dst">コピー先のヒストグラムへのポインタ． </param>        
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue1D(System.Int32)">
            <summary>
            1次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue2D(System.Int32,System.Int32)">
            <summary>
            2次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValue3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            3次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetValueND(System.Int32[])">
            <summary>
            n次元ヒストグラムの指定されたビンへのポインタを返す． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素のポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetMinMaxValue(System.Single@,System.Single@)">
            <summary>
            ヒストグラムのビンの最小値/最大値を求める (cvGetMinMaxHistValue相当)． 
            同じ値の最大値や最小値が複数存在する場合，辞書順に並べたときに最も先頭になるインデックスが返される． 
            </summary>
            <param name="minValue">ヒストグラムの最小値の出力</param>
            <param name="maxValue">ヒストグラムの最大値の出力</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.GetMinMaxValue(System.Single@,System.Single@,System.Int32[]@,System.Int32[]@)">
            <summary>
            ヒストグラムのビンの最小値/最大値とそれらの場所を求める (cvGetMinMaxHistValue相当)． 
            同じ値の最大値や最小値が複数存在する場合，辞書順に並べたときに最も先頭になるインデックスが返される． 
            </summary>
            <param name="minValue">ヒストグラムの最小値の出力</param>
            <param name="maxValue">ヒストグラムの最大値の出力</param>
            <param name="minIdx">最小値の配列中のインデックスの出力</param>
            <param name="maxIdx">最大値の配列中のインデックスの出力</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Normalize(System.Double)">
            <summary>
            ヒストグラムの正規化を行う (cvNormalizeHist相当).
            ビンの値の合計が factor に等しくなるようにスケーリングする事で，ヒストグラムのビンを正規化する．
            </summary>
            <param name="factor">正規化係数</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue1D(System.Int32)">
            <summary>
            1次元ヒストグラムの指定されたビンの値を返す (cvQueryHistValue_1D相当)． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue2D(System.Int32,System.Int32)">
            <summary>
            2次元ヒストグラムの指定されたビンの値を返す (cvQueryHistValue_2D相当)． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValue3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            3次元ヒストグラムの指定されたビンの値を返す (cvQueryHistValue_3D相当)． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx0">要素インデックスの，0を基準とした第1成分．</param>
            <param name="idx1">要素インデックスの，0を基準とした第2成分．</param>
            <param name="idx2">要素インデックスの，0を基準とした第3成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.QueryValueND(System.Int32[])">
            <summary>
            n次元ヒストグラムの指定されたビンの値を返す (cvQueryHistValue_ND相当)． 
            疎なヒストグラムの場合で，既にビンが存在している場合以外は，この関数が新しいビンを作成し，0にセットする．
            </summary>
            <param name="idx">要素インデックスの配列(可変長引数)</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.SetBinRanges(System.Single[][])">
            <summary>
            ヒストグラムのビンのレンジをセットする (cvSetHistBinRanges相当).
            </summary>
            <param name="ranges">ビンのレンジの配列</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.SetBinRanges(System.Single[][],System.Boolean)">
            <summary>
            ヒストグラムのビンのレンジをセットする (cvSetHistBinRanges相当).
            </summary>
            <param name="ranges">ビンのレンジの配列</param>
            <param name="uniform">一様性フラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvHistogram.Thresh(System.Double)">
            <summary>
            ヒストグラムの閾値処理を行う (cvThreshHist相当).
            指定した閾値以下のヒストグラムのビンをクリアする.
            </summary>
            <param name="threshold">閾値レベル</param>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Type">
            <summary>
            ヒストグラム表現フォーマットを取得する.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Bins">
            <summary>
            ヒストグラムのビン(値域)を取得する.
            TypeがArrayならCvMatND, SparseならCvSparseMatが返される.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.BinsPtr">
            <summary>
            ヒストグラムのビン(値域)を取得する.
            TypeがArrayならCvMatND, SparseならCvSparseMatが返される.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Dim">
            <summary>
            ヒストグラムの次元
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Thresh1">
            <summary>
            For uniform histograms (thresh). 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvHistogram.Thresh2">
            <summary>
            For non-uniform histograms.. 
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvKalman">
            <summary>
            カルマンフィルタ状態
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvKalman.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.Int32,System.Int32)">
            <summary>
            カルマンフィルタ構造体の領域確保を行う.
            </summary>
            <param name="dynamParams">状態ベクトルの次元数</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            カルマンフィルタ構造体の領域確保を行う.
            </summary>
            <param name="dynamParams">状態ベクトルの次元数</param>
            <param name="measureParams">観測ベクトルの次元</param>
            <param name="controlParams">コントロールベクトルの次元</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvMemStorage*</param>
        </member>
        <member name="M:OpenCvSharp.CvKalman.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr">struct CvMemStorage*</param>
            <param name="isEnabledDispose">自動的にGCで解放してよいかどうか</param>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvKalman.SizeOf">
            <summary>
            sizeof(CvKalman)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Correct(OpenCvSharp.CvMat)">
            <summary>
            モデル状態を修正する (cvKalmanCorrect). 修正された状態を kalman->state_post に保存し，これを出力として返す.
            </summary>
            <param name="measurement">観測ベクトルを含むCvMat</param>
            <returns>修正された状態を kalman->state_post に保存し，これを出力として返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByMeasurement(OpenCvSharp.CvMat)">
            <summary>
            モデル状態を修正する. 修正された状態を kalman->state_post に保存し，これを出力として返す．cvKalmanCorrectのエイリアス.
            </summary>
            <param name="measurement">観測ベクトルを含むCvMat</param>
            <returns>修正された状態を kalman->state_post に保存し，これを出力として返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Predict">
            <summary>
            次のモデル状態を推定する (cvKalmanPredict).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.Predict(OpenCvSharp.CvMat)">
            <summary>
            次のモデル状態を推定する (cvKalmanPredict).
            </summary>
            <param name="control">コントロールベクトル (uk)．外部コントロールが存在しない場合（control_params=0）に限り，null である．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByTime">
            <summary>
            次のモデル状態を推定する. cvKalmanPredictのエイリアス.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvKalman.UpdateByTime(OpenCvSharp.CvMat)">
            <summary>
            次のモデル状態を推定する. cvKalmanPredictのエイリアス.
            </summary>
            <param name="control">コントロールベクトル (uk)．外部コントロールが存在しない場合（control_params=0）に限り，null である．</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MP">
            <summary>
            観測ベクトルの次元数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.DP">
            <summary>
            状態ベクトルの次元数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.CP">
            <summary>
            コントロールベクトルの次元数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.StatePre">
            <summary>
            予測状態 (x'(k)): x(k)=A*x(k-1)+B*u(k)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.StatePost">
            <summary>
            修正後の状態 (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k)) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.TransitionMatrix">
            <summary>
            状態遷移行列 (A)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ControlMatrix">
            <summary>
            コントロール行列 (B) （コントロールされない場合は，用いられない）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementMatrix">
            <summary>
            観測行列 (H)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ProcessNoiseCov">
            <summary>
            プロセスノイズ共分散行列 (Q)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementNoiseCov">
            <summary>
            観測ノイズ共分散行列 (R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ErrorCovPre">
            <summary>
            事前誤差推定共分散行列 (P'(k)): P'(k)=A*P(k-1)*At + Q)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Gain">
            <summary>
            カルマンゲイン行列 (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.ErrorCovPost">
            <summary>
            事後誤差推定共分散行列 (P(k)): P(k)=(I-K(k)*H)*P'(k)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp1">
            <summary>
            テンポラリ行列1
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp2">
            <summary>
            テンポラリ行列2
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp3">
            <summary>
            テンポラリ行列3
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp4">
            <summary>
            テンポラリ行列4
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp5">
            <summary>
            テンポラリ行列5
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PosterState">
            <summary>
            state_pre->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PriorState">
            <summary>
            state_post->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.DynamMatr">
            <summary>
            transition_matrix->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MeasurementMatr">
            <summary>
            measurement_matrix->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.MNCovariance">
            <summary>
            measurement_noise_cov->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PNCovariance">
            <summary>
            process_noise_cov->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.KalmGainMatr">
            <summary>
            gain->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PriorErrorCovariance">
            <summary>
            error_cov_pre->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.PosterErrorCovariance">
            <summary>
            error_cov_post->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp1Data">
            <summary>
            temp1->data.fl
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvKalman.Temp2Data">
            <summary>
            temp2->data.fl
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStereoBMState">
            <summary>
            ブロックマッチングによるステレオマッチングアルゴリズムのための構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStereoBMState.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor">
            <summary>
            ステレオブロックマッチング構造体を作成する (CreateStereoBMState)
            </summary>
            <returns>ステレオブロックマッチング構造体</returns>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(OpenCvSharp.StereoBMPreset)">
            <summary>
            ステレオブロックマッチング構造体を作成する (CreateStereoBMState)
            </summary>
            <param name="preset">あらかじめ定義されたパラメータのID．構造体を作成した後で，任意のパラメータをオーバーライドできる． </param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(OpenCvSharp.StereoBMPreset,System.Int32)">
            <summary>
            ステレオブロックマッチング構造体を作成する (CreateStereoBMState)
            </summary>
            <param name="preset">あらかじめ定義されたパラメータのID．構造体を作成した後で，任意のパラメータをオーバーライドできる． </param>
            <param name="numberOfDisparities">視差数（最大視差-最小視差）． このパラメータが 0 の場合，preset から選択される． そうでない場合は，与えられた値が preset の値をオーバーライドする．</param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvStereoBMState*</param>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvStereoBMState.SizeOf">
            <summary>
            sizeof(CvStereoBMState)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoBMState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            ブロックマッチングアルゴリズムを用いて視差画像を計算する (cvFindStereoCorrespondenceBM)
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="disparity">出力の視差配列．シングルチャンネル，16ビット，符号有り整数，入力画像と同サイズ．各要素は，計算された視差であり，16倍されて整数値にまるめられる．</param>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterType">
            <summary>
            事前フィルタのタイプ (現在のところ0)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterSize">
            <summary>
            事前フィルタのサイズ (おおよそ5x5から21x21)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.PreFilterCap">
            <summary>
            事前フィルタのキャップ (おおよそ31以下)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SADWindowSize">
            <summary>
            SAD(Sum of Absolute Difference)の窓の大きさ (5x5から21x21)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.MinDisparity">
            <summary>
            SAD(Sum of Absolute Difference)の最小視差 (=0)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.NumberOfDisparities">
            <summary>
            SAD(Sum of Absolute Difference)の 最大視差-最小視差
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.TextureThreshold">
            <summary>
            事後フィルタの、テクスチャの無い領域を無視する際の閾値
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.UniquenessRatio">
            <summary>
            事後フィルタの、異なる視差でのマッチが近辺にある場合にそのピクセルを除外する際の比率?
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SpeckleWindowSize">
            <summary>
            事後フィルタの視差変化ウィンドウ（利用されない）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoBMState.SpeckleRange">
            <summary>
            事後フィルタのウィンドウの変化範囲（利用されない）
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStringHashNode">
            <summary>
            ファイルストレージに含まれる要素の全てのキー（names）を記憶するハッシュ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStringHashNode.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvStringHashNode*</param>
        </member>
        <member name="F:OpenCvSharp.CvStringHashNode.SizeOf">
            <summary>
            sizeof(CvStringHashNode) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.HashVal">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.Str">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStringHashNode.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.IplConvKernel">
            <summary>
            膨張・収縮処理で用いる構造要素
            </summary>
        </member>
        <member name="F:OpenCvSharp.IplConvKernel.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape)">
            <summary>
            膨張・収縮処理に用いる構造要素を生成する
            </summary>
            <param name="cols">構造要素の列数</param>
            <param name="rows">構造要素の行数</param>
            <param name="anchorX">構造要素の原点のx座標</param>
            <param name="anchorY">構造要素の原点のy座標</param>
            <param name="shape">構造要素の形状</param>
            <returns>構造要素</returns>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.ElementShape,System.Int32[0:,0:])">
            <summary>
            膨張・収縮処理に用いる構造要素を生成する
            </summary>
            <param name="cols">構造要素の列数</param>
            <param name="rows">構造要素の行数</param>
            <param name="anchorX">構造要素の原点のx座標</param>
            <param name="anchorY">構造要素の原点のy座標</param>
            <param name="shape">構造要素の形状</param>
            <param name="values">構造要素データへのポインタ。このパラメータは形状がCV_SHAPE_CUSTOMのときのみ有効</param>
            <returns>構造要素</returns>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">IplConvKernel*</param>
        </member>
        <member name="M:OpenCvSharp.IplConvKernel.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.IplConvKernel.SizeOf">
            <summary>
            sizeof(IplConvKernel) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NCols">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NRows">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.AnchorX">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.AnchorY">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.Values">
            <summary>
            int*
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplConvKernel.NShiftR">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvStereoGCState">
            <summary>
            グラフカットに基づくステレオマッチングのための構造体
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvStereoGCState.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.#ctor(System.Int32,System.Int32)">
            <summary>
            グラフカットステレオマッチングアルゴリズムの構造体を作成する (cvCreateStereoGCState)
            </summary>
            <param name="numberOfDisparities">視差数．視差の探索範囲は， state-&gt;minDisparity &lt;= disparity &lt; state-&gt;minDisparity + state-&gt;numberOfDisparities となる．</param>
            <param name="maxIters">繰り返し計算の最大数． 各繰り返しにおいて，すべての（あるいは，適度な数の）α拡張を行う． このアルゴリズムは，コスト関数全体を減少させるα拡張が見つからなかった場合は，そこで終了する．</param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvStereoGCState*</param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvStereoGCState.SizeOf">
            <summary>
            sizeof(CvStereoGCState) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr)">
            <summary>
            グラフカットに基づくアルゴリズムにより視差画像を計算する (cvFindStereoCorrespondenceGC)
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="dispLeft">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの左視差画像． </param>
            <param name="dispRight">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの右視差画像． </param>
        </member>
        <member name="M:OpenCvSharp.CvStereoGCState.FindStereoCorrespondence(OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,OpenCvSharp.CvArr,System.Boolean)">
            <summary>
            グラフカットに基づくアルゴリズムにより視差画像を計算する (cvFindStereoCorrespondenceGC)
            </summary>
            <param name="left">左画像．シングルチャンネル，8ビット．</param>
            <param name="right">右画像．左画像と同じサイズ，同じ種類．</param>
            <param name="dispLeft">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの左視差画像． </param>
            <param name="dispRight">出力オプション：シングルチャンネル，16ビット，符号有り整数．入力画像と同じサイズの右視差画像． </param>
            <param name="useDisparityGuess">このパラメータが 0 でない場合， あらかじめ定義された視差画像を用いて計算が開始される．つまり， dispLeft と dispRight が共に，妥当な視差画像である必要がある． そうでない場合は，（すべてのピクセルがオクルージョンとなっている）空の視差画像から開始される．</param>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Ithreshold">
            <summary>
            データ項の閾値（デフォルトでは 5）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.InteractionRadius">
            <summary>
            平滑化項の範囲（デフォルトでは 1，Pottsモデル）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.K">
            <summary>
            コスト関数のパラメータ（通常は，入力データから適応的に求められる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda">
            <summary>
            コスト関数のパラメータ（通常は，入力データから適応的に求められる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda1">
            <summary>
            コスト関数のパラメータ（通常は，入力データから適応的に求められる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Lambda2">
            <summary>
            コスト関数のパラメータ（通常は，入力データから適応的に求められる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.OcclusionCost">
            <summary>
            オクルージョンのコスト? (デフォルトで1000)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.MinDisparity">
            <summary>
            SAD(Sum of Absolute Difference)の最小視差 (=0)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.NumberOfDisparities">
            <summary>
            SAD(Sum of Absolute Difference)の 最大視差-最小視差
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.MaxIters">
            <summary>
            繰り返し計算の回数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.DispLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.DispRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.PtrLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.PtrRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.VtxBuf">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvStereoGCState.EdgeBuf">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvQuadEdge2D">
            <summary>
            平面細分割のQuad-edge構造体
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvQuadEdge2D*</param>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.FromPtr(System.IntPtr)">
            <summary>
            ポインタからオブジェクトを生成する
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.op_Explicit(System.IntPtr)~OpenCvSharp.CvQuadEdge2D">
            <summary>
            ポインタからの明示的なキャスト
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.FromSeqReader(OpenCvSharp.CvSeqReader)">
            <summary>
            CvSeqReaderからCvQuadEdge2Dのインスタンスを読み込んで返す
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.op_Explicit(OpenCvSharp.CvQuadEdge2D)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            CvSubdiv2DEdgeへの明示的キャスト
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:OpenCvSharp.CvQuadEdge2D.ToCvSubdiv2DEdge">
            <summary>
            CvSubdiv2DEdgeへ変換して返す
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvQuadEdge2D.SizeOf">
            <summary>
            sizeof(CvQuadEdge2D)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvQuadEdge2D.Pt">
            <summary>
            CvSubdiv2DEdge pt[4];
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvQuadEdge2D.Next">
            <summary>
            CvSubdiv2DEdge next[4];
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvRNG">
            <summary>
            乱数生成機. 実体はUInt64.
            </summary>
            <remarks>typedef uint64 CvRNG</remarks>
        </member>
        <member name="F:OpenCvSharp.CvRNG.Seed">
            <summary>
            このインスタンスの示すUInt64値(乱数の種)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor">
            <summary>
            seed = -1 で初期化 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.UInt64)">
            <summary>
            seedを指定して初期化 
            </summary>
            <param name="seed">ランダムシーケンスを開始するために使用される64ビットの数値</param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.Int64)">
            <summary>
            seedを指定して初期化 
            </summary>
            <param name="seed">ランダムシーケンスを開始するために使用される64ビットの数値</param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.#ctor(System.DateTime)">
            <summary>
            時刻の値から初期化
            </summary>
            <param name="time">時刻データ。Tickプロパティの値が使われる。</param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.op_Explicit(OpenCvSharp.CvRNG)~System.UInt64">
            <summary>
            CvRNGからUInt64への明示的な変換
            </summary>
            <param name="self">CvRNG</param>
            <returns>UInt64</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.op_Explicit(System.UInt64)~OpenCvSharp.CvRNG">
            <summary>
            UInt64からCvRNGへの明示的な変換
            </summary>
            <param name="v">UInt64</param>
            <returns>CvRNG</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandArr(OpenCvSharp.CvArr,OpenCvSharp.DistributionType,OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            一様または正規分布の乱数で出力配列を埋める 
            </summary>
            <param name="arr">出力配列</param>
            <param name="dist_type">分布のタイプ</param>
            <param name="param1">分布の第一パラメータ．一様分布では，発生する乱数の下限値（この値を含む）である． 正規分布では，乱数の平均値である．</param>
            <param name="param2">分布の第二パラメータ．一様分布では，発生する乱数の上限値（この値は含まない）である． 正規分布では，乱数の標準偏差である．</param>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt">
            <summary>
            Returns 32-bit unsigned integer and updates RNG
            </summary>
            <returns>uniformly-distributed random 32-bit unsigned integer</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt(System.UInt32)">
            <summary>
            一様分布した32ビット符号なし整数型の乱数を返し，RNGの状態を更新する (cvRandInt相当)．
            </summary>
            <param name="max">生成される乱数の排他的上限値. すなわち0からこの値未満の乱数が返される.</param>
            <returns>32ビット符号なし整数</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandInt(System.UInt32,System.UInt32)">
            <summary>
            一様分布した32ビット符号なし整数型の乱数を返し，RNGの状態を更新する (cvRandInt相当)．
            </summary>
            <param name="min">生成される乱数の包括的下限値. すなわちこの値以上の乱数が返される.</param>
            <param name="max">生成される乱数の排他的上限値. すなわちこの値未満の乱数が返される.</param>
            <returns>32ビット符号なし整数</returns>
        </member>
        <member name="M:OpenCvSharp.CvRNG.RandReal">
            <summary>
            Returns floating-point random number and updates RNG
            </summary>
            <returns>uniformly-distributed random floating-point number from 0..1 range (1 is not included).</returns>
        </member>
        <member name="T:OpenCvSharp.CvSeqBlock">
            <summary>
            連続したシーケンスブロック
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqBlock.#ctor">
            <summary>
            メモリを確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeqBlock.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvSeqBlock*</param>
        </member>
        <member name="F:OpenCvSharp.CvSeqBlock.SizeOf">
            <summary>
            sizeof(CvSeqBlock)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Prev">
            <summary>
            前のシーケンスブロック
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Next">
            <summary>
            次のシーケンスブロック
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.StartIndex">
            <summary>
            ブロックの先頭要素のインデックス. 
            sequence->first->start_index 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Count">
            <summary>
            ブロック内の要素数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeqBlock.Data">
            <summary>
            ブロックの先頭要素へのポインタ
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSetElem">
            <summary>
            空きノードのリスト
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSetElem.#ctor">
            <summary>
            初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSetElem.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvSetElem*</param>
        </member>
        <member name="F:OpenCvSharp.CvSetElem.SizeOf">
            <summary>
            sizeof(CvSetElem) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSetElem.NextFree">
            <summary>
            空きノードのリスト 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSetElem.Flags">
            <summary>
            空きノードならtrue, その他の場合はfalse
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2D">
            <summary>
            平面細分割のためのクラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor">
            <summary>
            既定の初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor(OpenCvSharp.CvRect,OpenCvSharp.CvMemStorage)">
            <summary>
            cvCreateSubdivDelaunay2Dで初期化
            </summary>
            <param name="rect"></param>
            <param name="storage"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvSubdiv2D*</param>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2D.SizeOf">
            <summary>
            sizeof(CvSubdiv2D)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.CalcVoronoi2D">
            <summary>
            仮想点の座標を計算する．元の細分割面のある頂点に対応する仮想点全てを接続すると，その頂点を含むボロノイ領域の境界を構成する (CalcSubdivVoronoi2D) ． 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.ClearVoronoi2D">
            <summary>
            全ての仮想点を削除する (cvClearSubdivVoronoi2D)． 
            この関数の前回の呼出し後に細分割が変更された場合，この関数は cvCalcSubdivVoronoi2D の内部で呼ばれる． 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.FindNearestPoint2D(OpenCvSharp.CvPoint2D32f)">
            <summary>
            与えられた点に最も近い細分割の頂点を求める. 入力点を細分割内に配置するもう一つの関数である．
            この関数は入力された点に最も近い頂点を求める． 
            </summary>
            <param name="pt">入力点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Insert(OpenCvSharp.CvPoint2D32f)">
            <summary>
            ドロネー三角形に点を追加する (cvSubdivDelaunay2D).
            </summary>
            <param name="pt">追加する点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.InitSubdivDelaunay2D(OpenCvSharp.CvRect)">
            <summary>
            CvSubdiv2Dの初期化
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Locate(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@)">
            <summary>
            ドロネー三角形に点を追加する (cvSubdiv2DLocate).
            </summary>
            <param name="pt">配置する点</param>
            <param name="edge">出力される辺．配置した点は，その辺上または端に存在する.</param>
            <returns>配置する点</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2D.Locate(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvSubdiv2DEdge@,OpenCvSharp.CvSubdiv2DPoint@)">
            <summary>
            ドロネー三角形に点を追加する (cvSubdiv2DLocate).
            </summary>
            <param name="pt">配置する点</param>
            <param name="edge">出力される辺．配置した点は，その辺上または端に存在する.</param>
            <param name="vertex">オプション出力．入力点と一致する細分割の頂点へのポインタのポインタ</param>
            <returns>配置する点</returns>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.QuadEdges">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.IsGeometryValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.RecentEdge">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.TopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2D.BottomRight">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvChain">
            <summary>
            輪郭データ
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSeq`1">
            <summary>
            拡張可能な要素のシーケンス
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.SeqType,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する. header_size=sizeof(CvSeq)
            </summary>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.SeqType,System.Int32,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンスを生成する
            </summary>
            <param name="seqFlags">生成されたシーケンスのフラグ．生成されたシーケンスが，特定のシーケンスタイプを引数にとるような関数に一切渡されない場合は，この値に0を指定してもかまわない．そうでない場合は，定義済みのシーケンスタイプのリストから適切なタイプが選択されなければならない．</param>
            <param name="headerSize">シーケンスのヘッダサイズ．sizeof(CvSeq)以上でなければならない． また，特別なタイプかその拡張が指示されている場合，そのタイプは基本タイプのヘッダと合致していなければならない．</param>
            <param name="storage">シーケンスが保存される場所</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(OpenCvSharp.CvSeq)">
            <summary>
            CvSeq -> CvSeq&lt;t&gt;
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">struct CvSeq*</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.FromArray(System.Collections.Generic.IEnumerable{`0},OpenCvSharp.SeqType,OpenCvSharp.CvMemStorage)">
            <summary>
            配列からインスタンスを生成する
            </summary>
            <param name="array">IEnumerableインタフェースを実装するオブジェクト。ArrayやList&lt;t&gt;など。</param>
            <param name="seqFlags">生成されたシーケンスのフラグ</param>
            <param name="storage">シーケンスが保存される場所</param>
            <returns>CvSeq&lt;t&gt;</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Clone">
            <summary>
            入力行列のコピーを作成し返す (cvCloneSeq).
            </summary>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Clone(OpenCvSharp.CvMemStorage)">
            <summary>
            入力行列のコピーを作成し返す (cvCloneSeq).
            </summary>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，入力シーケンスに含まれるストレージを使用する．</param>
            <returns>コピーされたCvSeq</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ElemIdx(`0)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す (cvSeqElemIdx).
            </summary>
            <param name="element">シーケンス要素</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ElemIdx(`0,OpenCvSharp.CvSeqBlock@)">
            <summary>
            指定されたシーケンスの要素のインデックスを返す (cvSeqElemIdx).
            </summary>
            <param name="element">シーケンス要素</param>
            <param name="block">要素を含むシーケンスブロックのアドレスがこの場所に保存される．</param>
            <returns>指定されたシーケンス要素のインデックス</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.GetSeqElem(System.Int32)">
            <summary>
            与えられたインデックスを持つ要素をシーケンスの中から求め，その要素を返す．
            </summary>
            <param name="index">要素のインデックス. 負のインデックスの指定も可能で, 例えば，-1はシーケンスの最後の要素，-2は最後の一つ前を指す.</param>
            <returns>与えられたインデックスを持つ要素．要素が見つからない場合はnull．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Insert(System.Int32,`0)">
            <summary>
            シーケンスの中に要素を挿入する (cvSeqInsert).
            </summary>
            <param name="beforeIndex">要素が挿入されるインデックス（このインデックスの前に挿入される）</param>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Partition(OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,OpenCvSharp.CvCmpFunc{`0})">
            <summary>
            データシーケンスを同値類（同じクラスに属すると定義されたデータ群）に分割する
            </summary>
            <param name="storage">同値類として分割されたシーケンスの保存領域．nullの場合は，seq->storage を使用する．</param>
            <param name="labels">出力パラメータ．入力シーケンスの各要素に割り振られた（分割結果を表す）0から始まるラベルシーケンスへのポインタのポインタ．</param>
            <param name="isEqual">2つのシーケンス要素が同じクラスである場合，関係関数は 0以外を返す． そうでなければ0を返す．分割アルゴリズムは，同値基準として関係関数の推移閉包を用いる．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Pop">
            <summary>
            シーケンスの末尾から一つの要素を削除する (cvSeqPop).
            </summary>
            <returns>削除した要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PopFront">
            <summary>
            シーケンスの先頭から一つの要素を削除する (cvSeqPopFront).
            </summary>
            <returns>削除した要素をコピーする出力先</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PopMulti(System.Int32,OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）から削除する (cvSeqPopMulti).
            </summary>
            <param name="count">削除される要素数．</param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Push(`0)">
            <summary>
            シーケンスの末尾に要素を追加し，割り付けられた要素を返す (cvSeqPush)．
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PushFront(`0)">
            <summary>
            シーケンスの先頭に要素を追加し，割り付けられた要素へのポインタを返す (cvSeqPushFront).
            入力の element が null の場合，この関数は単に要素一つ分の領域を確保する．
            </summary>
            <param name="element">追加される要素. プリミティブ型か、OpenCVの構造体(CvPointなど).</param>
            <returns>追加された要素</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.PushMulti(`0[],OpenCvSharp.InsertPosition)">
            <summary>
            複数の要素をシーケンスのどちらかの端（先頭か末尾）に追加する (cvSeqPushMulti).
            </summary>
            <param name="elements">追加される要素群．</param>
            <param name="inFront">変更するシーケンスの端を指定するフラグ．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Search(`0,OpenCvSharp.CvCmpFunc{`0},System.Boolean,System.Int32@)">
            <summary>
            シーケンスの中から要素を検索する (cvSeqSearch).
            </summary>
            <param name="elem">検索する要素</param>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
            <param name="isSorted">シーケンスがソート済みか否かを示すフラグ</param>
            <param name="elemIdx">出力パラメータ．見つかった要素のインデックス．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Slice(OpenCvSharp.CvSlice,OpenCvSharp.CvMemStorage,System.Boolean)">
            <summary>
            シーケンススライスのための別のヘッダを作成する (cvSeqSlice).
            </summary>
            <param name="slice">抽出するシーケンスの一部分</param>
            <param name="storage">新しいシーケンスヘッダとコピーされたデータ（もしデータがあれば）を保存する出力ストレージ． nullの場合，この関数は入力シーケンスに含まれるストレージを使用する</param>
            <param name="copyData">抽出されたスライスの要素をコピーするかしないかを示すフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.Sort(OpenCvSharp.CvCmpFunc{`0})">
            <summary>
            シーケンスの要素を，指定した比較関数を用いてソートする (cvSeqSort).
            </summary>
            <param name="func">要素の関係に応じて，負・0・正の値を返す比較関数</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.StartRead(OpenCvSharp.CvSeqReader{`0})">
            <summary>
            シーケンスからの連続読み出し処理を初期化する (cvStartReadSeq).
            </summary>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.StartRead(OpenCvSharp.CvSeqReader{`0},System.Boolean)">
            <summary>
            シーケンスからの連続読み出し処理を初期化する (cvStartReadSeq).
            </summary>
            <param name="reader">リーダ（reader）の状態．この関数で初期化される．</param>
            <param name="reverse">シーケンス走査方向の指定．reverse が false の場合，リーダは先頭のシーケンス要素に位置する．それ以外は最後の要素に位置する．</param>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ToArray">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする (cvCvtSeqToArray).
            </summary>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ToArray(OpenCvSharp.CvSlice)">
            <summary>
            シーケンスをメモリ内の連続した一つのブロックにコピーする (cvCvtSeqToArray).
            </summary>
            <param name="slice">配列へコピーするシーケンス内の部分</param>
            <returns>出力される配列. outされる引数 element と同じ値.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ApproxPoly(System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double)">
            <summary>
            指定した精度でポリラインを近似する
            </summary>
            <param name="headerSize">近似されたポリラインのヘッダサイズ．</param>
            <param name="storage">近似された輪郭の保存場所．nullの場合，入力シーケンスのストレージが使われる． </param>
            <param name="method">近似方法</param>
            <param name="parameter">近似方法に依存するパラメータ．CV_POLY_APPROX_DPの場合には，要求する近似精度である．</param>
            <returns>単一もしくは複数の近似曲線を計算した結果</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.ApproxPoly(System.Int32,OpenCvSharp.CvMemStorage,OpenCvSharp.ApproxPolyMethod,System.Double,System.Boolean)">
            <summary>
            指定した精度でポリラインを近似する
            </summary>
            <param name="headerSize">近似されたポリラインのヘッダサイズ．</param>
            <param name="storage">近似された輪郭の保存場所．nullの場合，入力シーケンスのストレージが使われる． </param>
            <param name="method">近似方法</param>
            <param name="parameter">近似方法に依存するパラメータ．CV_POLY_APPROX_DPの場合には，要求する近似精度である．</param>
            <param name="parameter2">src_seqが点の配列（CvMat）の場合， このパラメータは輪郭が閉じている（parameter2=true）か，開いているか(parameter2=false)を指定する．</param>
            <returns>単一もしくは複数の近似曲線を計算した結果</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A IEnumerator&lt;CvSeq&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OpenCvSharp.CvSeq`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.HPrev">
            <summary>
            一つ前のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.HNext">
            <summary>
            一つ後のシーケンスへのポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.VPrev">
            <summary>
            一つ前のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.VNext">
            <summary>
            一つ後のシーケンスへのポインタ（セカンダリ，構造によって意味が異なる）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSeq`1.Item(System.Int32)">
            <summary>
            要素にアクセスするインデクサ
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvChain.SizeOf">
            <summary>
            sizeof(CvChain) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="storage">計算結果保存用のストレージ．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <param name="minimalPerimeter">minimal_perimeter以上の周囲長をもつ輪郭のみを計算する．その他のチェーンは結果の構造体から削除される．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvChain.ApproxChains(OpenCvSharp.CvMemStorage,OpenCvSharp.ContourChain,System.Double,System.Int32,System.Boolean)">
            <summary>
            フリーマンチェーン（Freeman chain）をポリラインで近似する
            </summary>
            <param name="storage">計算結果保存用のストレージ．</param>
            <param name="method">推定手法.</param>
            <param name="parameter">メソッドパラメータ（現在は使われていない）．</param>
            <param name="minimalPerimeter">minimal_perimeter以上の周囲長をもつ輪郭のみを計算する．その他のチェーンは結果の構造体から削除される．</param>
            <param name="recursive">trueの場合，src_seqからh_nextあるいはv_nextによって辿ることができる全てのチェーンを近似する．falseの場合，単一のチェーンを近似する． </param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvChain.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvContour">
            <summary>
            輪郭データ
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvContour.#ctor(System.IntPtr)">
            <summary>
            ネイティブのデータポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:OpenCvSharp.CvContour.SizeOf">
            <summary>
            sizeof(CvContour) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContour.Rect">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvContour.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMat">
            <summary>
            多重行列
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.dataArrayByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.dataArrayInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.dataArrayInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.dataArraySingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMat.dataArrayDouble">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保する
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Array)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保し、内部データに指定した配列を指定する (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <param name="elements">行列要素とする配列. blittableな型の配列でなければならない(intやCvPointなど)</param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.Array,System.Boolean)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保し、内部データに指定した配列を指定する (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <param name="elements">行列要素とする配列. blittableな型の配列でなければならない(intやCvPointなど)</param>
            <param name="copyData"></param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,System.IntPtr)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保し、内部データに指定した配列を指定する (cvCreateMatHeader + cvSetData)
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <param name="data">行列要素とするデータ</param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Int32,System.Int32,OpenCvSharp.MatrixType,OpenCvSharp.CvScalar)">
            <summary>
            新たな行列とその内部データのためのヘッダを確保し、初期値を設定する.
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <param name="value">行列要素の初期値</param>
            <returns>行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.String)">
            <summary>
            指定されたファイルから画像を読み込んで初期化
            </summary>
            <param name="filename">ファイル名</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.String,OpenCvSharp.LoadMode)">
            <summary>
            指定されたファイルから画像を読み込んで初期化
            </summary>
            <param name="filename">ファイル名</param>
            <param name="flags">読み込む画像がカラー/グレースケールのどちらか，とビット深度を指定する</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="p"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor">
            <summary>
            sizeof(CvMat)の分のメモリの割り当てだけ行って初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.#ctor(System.Boolean)">
            <summary>
            sizeof(CvMat)の分のメモリの割り当てだけ行って、GC禁止設定で初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.MemorySize">
            <summary>
            sizeof(CvMat) + mat.data.length 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Double[])">
            <summary>
            double[]からCvMatを初期化して返す. F64C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Single[])">
            <summary>
            float[]からCvMatを初期化して返す. F32C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int32[])">
            <summary>
            int[]からCvMatを初期化して返す. S32C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int16[])">
            <summary>
            short[]からCvMatを初期化して返す. S16C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Byte[])">
            <summary>
            byte[]からCvMatを初期化して返す. U8C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray``1(``0[],OpenCvSharp.MatrixType)">
            <summary>
            t[]からCvMatを初期化して返す
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Double[0:,0:])">
            <summary>
            double[,]からCvMatを初期化して返す. F64C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat (F64C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Single[0:,0:])">
            <summary>
            float[,]からCvMatを初期化して返す. F32C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat (F32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int32[0:,0:])">
            <summary>
            int[,]からCvMatを初期化して返す. S32C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat (S32C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Int16[0:,0:])">
            <summary>
            short[,]からCvMatを初期化して返す. S16C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat (S16C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray(System.Byte[0:,0:])">
            <summary>
            byte[,]からCvMatを初期化して返す. U8C1型として生成する。 
            </summary>
            <param name="data"></param>
            <returns>CvMat (U8C1)</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromArray``1(``0[0:,0:],OpenCvSharp.MatrixType)">
            <summary>
            t[,]からCvMatを初期化して返す.  
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns>CvMat</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToLinearArtay``1(``0[0:,0:])">
            <summary>
            2次元のRectangular Arrayを1次元配列に変換する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromFile(System.String)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照をCvMat形式で返す
            </summary>
            <param name="filename">ファイル名</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.LoadImageM(System.String,OpenCvSharp.LoadMode)">
            <summary>
            指定されたファイルから画像を読み込み，その画像の参照をCvMat形式で返す
            </summary>
            <param name="filename">ファイル名</param>
            <param name="flags">読み込む画像がカラー/グレースケールのどちらか，とビット深度を指定する</param>
            <returns>画像への参照</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromImageData(System.Byte[],OpenCvSharp.LoadMode)">
            <summary>
            画像データ(JPEG等の画像をメモリに展開したもの)からIplImageを生成する (cvDecodeImageM)
            </summary>
            <param name="bytes"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.FromStream(System.IO.Stream,OpenCvSharp.LoadMode)">
            <summary>
            System.IO.StreamのインスタンスからIplImageを生成する (cvDecodeImageM)
            </summary>
            <param name="stream"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.AffineTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            3点とそれぞれに対応する点からアフィン変換を計算する (2 x 3 のCV_32FC1型) [cvGetAffineTransform相当]. 
            </summary>
            <param name="src">入力（変換前）画像内に存在する三角形の3つの頂点座標を格納した配列</param>
            <param name="dst">出力（変換後）画像内に存在するsrcに対応した三角形の3つの頂点座標を格納した配列</param>
            <returns>求められた 2×3のアフィン変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.PerspectiveTransform(OpenCvSharp.CvPoint2D32f[],OpenCvSharp.CvPoint2D32f[])">
            <summary>
            4点とそれぞれに対応する点を用いて透視変換行列を求める (3 x 3 のCV_32FC1型) [cvGetPerspectiveTransform相当]. 
            </summary>
            <param name="src">入力画像中の矩形の４頂点の座標</param>
            <param name="dst">出力画像中の対応する矩形の４頂点の座標</param>
            <returns>求められた 3×3の射影変換行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Identity(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            単位行列を生成する
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Identity(System.Int32,System.Int32,OpenCvSharp.MatrixType,OpenCvSharp.CvScalar)">
            <summary>
            スカラー倍された単位行列を生成する
            </summary>
            <param name="rows">行列の行数</param>
            <param name="cols">行列の列数</param>
            <param name="type">行列要素の種類</param>
            <param name="value">対角成分の値</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RotationMatrix(OpenCvSharp.CvPoint2D32f,System.Double,System.Double)">
            <summary>
            2次元回転のアフィン行列を計算する (2 x 3 のCV_32FC1型) (cv2DRotationMatrix相当).
            </summary>
            <param name="center">入力画像内の回転中心 </param>
            <param name="angle">度（degree）単位の回転角度．正の値は反時計方向の回転を意味する（座標原点は左上にあると仮定）．</param>
            <param name="scale">等方性スケーリング係数（x,y方向とも同じ係数 scale を使う） </param>
            <returns>2x3の2次元回転のアフィン行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvMat.SizeOf">
            <summary>
            sizeof(CvMat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_UnaryPlus(OpenCvSharp.CvMat)">
            <summary>
            行列の単項+演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_UnaryNegation(OpenCvSharp.CvMat)">
            <summary>
            行列の単項-演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_OnesComplement(OpenCvSharp.CvMat)">
            <summary>
            行列の単項not演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Addition(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列の加算演算子。cvAddにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Addition(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの加算演算子。cvAddSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Subtraction(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列の減算演算子。cvSubにより減算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Subtraction(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの減算演算子。cvSubSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列の乗算演算子。cvMatMulにより乗算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(OpenCvSharp.CvMat,System.Double)">
            <summary>
            行列とスカラーの乗算演算子。aの要素ごとにbをかけた結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Multiply(System.Double,OpenCvSharp.CvMat)">
            <summary>
            行列とスカラーの乗算演算子。aの要素ごとにbをかけた結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">スカラー</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_Division(OpenCvSharp.CvMat,System.Double)">
            <summary>
            行列とスカラーの除算演算子。aの要素ごとにbで割った結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseAnd(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列のand演算子。cvAndにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseAnd(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのand演算子。cvAndSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseOr(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列のor演算子。cvOrにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_BitwiseOr(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのor演算子。cvOrSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_ExclusiveOr(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            行列と行列のxor演算子。cvXorにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.op_ExclusiveOr(OpenCvSharp.CvMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのxor演算子。cvXorSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
            <param name="principalPoint">主点（光学中心）実際の長さ単位.</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.CalibrationMatrixValues(OpenCvSharp.CvSize,System.Double,System.Double,System.Double@,System.Double@,System.Double@,OpenCvSharp.CvPoint2D64f@,System.Double@)">
            <summary>
            様々なカメラ特性を計算する
            </summary>
            <param name="imageSize">画像のサイズ．ピクセル単位.</param>
            <param name="apertureWidth">アパーチャ幅．実際の長さ単位．</param>
            <param name="apertureHeight">アパーチャ高さ．実際の長さ単位．</param>
            <param name="fovx">x-方向の画角．degree単位.</param>
            <param name="fovy">y-方向の画角．degree単位.</param>
            <param name="focalLength">焦点距離．実際の長さ単位.</param>
            <param name="principalPoint">主点（光学中心）実際の長さ単位.</param>
            <param name="pixelAspectRatio">ピクセルのアスペクト比 fy/fx</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Clone">
            <summary>
            行列のコピーを作成する (cvCloneMat)
            </summary>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.EmptyClone">
            <summary>
            このCvMatと同じサイズ・ビット深度・チャネル数を持つ
            CvMatオブジェクトを新たに作成し、返す
            </summary>
            <returns>コピーされた画像</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.CompleteSymm">
            <summary>
            行列を、その下三角行列を用いて対称行列として書き換える
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.CompleteSymm(System.Boolean)">
            <summary>
            行列を、その下三角行列 (LtoR=false) または上三角行列 (LtoR=true) を用いて対称行列として書き換える
            </summary>
            <param name="LtoR"></param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ComputeCorrespondEpilines(System.Int32,OpenCvSharp.CvMat,OpenCvSharp.CvMat@)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="whichImage">pointsを含む画像のインデックス（1 または 2）．</param>
            <param name="fundamentalMatrix">基礎行列</param>
            <param name="correspondentLines">計算されたエピポーラ線．大きさは3xN また Nx3 の配列．</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ConvertPointsHomogenious(OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="dst">出力点の配列．入力配列と同じ数の点が含まれる次元数は，同じ， あるいは入力より1少ないか1大きい．そして2..4の範囲内でなければならない． </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ConvertPointsHomogeneous(OpenCvSharp.CvMat)">
            <summary>
            2枚の画像間の点対応から基礎行列（F行列）を計算する
            </summary>
            <param name="dst">出力点の配列．入力配列と同じ数の点が含まれる次元数は，同じ， あるいは入力より1少ないか1大きい．そして2..4の範囲内でなければならない． </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecodeImage(OpenCvSharp.LoadMode)">
            <summary>
            指定したバッファメモリから画像を読み込む
            </summary>
            <param name="iscolor">出力の色を指定するフラグ</param>
            <returns></returns>        
        </member>
        <member name="M:OpenCvSharp.CvMat.DecodeImageM(OpenCvSharp.LoadMode)">
            <summary>
            指定したバッファメモリから画像をCvMatとして読み込む
            </summary>
            <param name="iscolor">出力の色を指定するフラグ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
            <param name="rotMatrX">オプション出力の3x3のx軸周りでの回転行列</param>
            <param name="rotMatrY">オプション出力の3x3のy軸周りでの回転行列</param>
            <param name="rotMatrZ">オプション出力の3x3のz軸周りでの回転行列</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.DecomposeProjectionMatrix(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            射影行列をキャリブレーション行列と回転行列とカメラの同次座標系での位置ベクトルに分解する
            </summary>
            <param name="calibMatr">出力の3x3の内部キャリブレーション行列 K</param>
            <param name="rotMatr">出力の3x3の外部回転行列 R</param>
            <param name="posVect">出力の4x1の同次座標系での外部位置ベクトル C</param>
            <param name="rotMatrX">オプション出力の3x3のx軸周りでの回転行列</param>
            <param name="rotMatrY">オプション出力の3x3のy軸周りでの回転行列</param>
            <param name="rotMatrZ">オプション出力の3x3のz軸周りでの回転行列</param>
            <param name="eulerAngles">オプション出力の回転のオイラー角</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.EncodeImage(System.String,System.Int32[])">
            <summary>
            画像をエンコードしてバイト列として出力する
            </summary>
            <param name="ext">出力形式として定義されているファイル拡張子</param>
            <param name="prms">画像フォーマット固有の各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.EncodeImage(System.String,OpenCvSharp.ImageEncodingParam[])">
            <summary>
            画像をエンコードしてバイト列として出力する
            </summary>
            <param name="ext">出力形式として定義されているファイル拡張子</param>
            <param name="prms">画像フォーマット固有の各種パラメータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.GetDataStream(System.String,System.Int32[])">
            <summary>
            dataポインタを指すStreamを取得する (返却値は要Close)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader(System.Int32,System.Int32,OpenCvSharp.MatrixType)">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[])">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <param name="data">行列のヘッダで指定されるデータ配列. 長さがrows*cols*channelsの1次元配列を指定する.</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.InitMatHeader``1(System.Int32,System.Int32,OpenCvSharp.MatrixType,``0[],System.Int32)">
            <summary>
            既に確保された CvMat を初期化する．
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows">画像の幅と高さ</param>
            <param name="cols">画像のカラーデプス</param>
            <param name="type">チャンネル数</param>
            <param name="data">行列のヘッダで指定されるデータ配列. 長さがrows*cols*channelsの1次元配列を指定する.</param>
            <param name="step">割り当てられたデータの行長をバイト単位で表す．デフォルトでは，stepには可能な限り小さい値が用いられる．つまり，行列の連続する行間にギャップが存在しない．</param>
            <returns>初期化された行列ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.mGet(System.Int32,System.Int32)">
            <summary>
            シングルチャンネル浮動小数点型行列の特定の要素を返す. cvGetReal2Dの高速化版関数である．
            </summary>
            <param name="row">行の0を基準としたインデックス</param>
            <param name="col">列の0を基準としたインデックス</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.mSet(System.Int32,System.Int32,System.Double)">
            <summary>
            シングルチャンネルの浮動小数点型行列の特定の要素の値を変更する.cvSetReal2Dの高速化版関数である．
            </summary>
            <param name="row">行の0を基準としたインデックス</param>
            <param name="col">列の0を基準としたインデックス</param>
            <param name="value">行列の要素の新しい値</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Rodrigues2(OpenCvSharp.CvMat)">
            <summary>
            回転ベクトルを回転行列に変換する．またはその逆も可能である．
            </summary>
            <param name="dst">各入力に対応した出力の回転行列（3x3），または回転ベクトル（3x1 あるいは 1x3）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.Rodrigues2(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            回転ベクトルを回転行列に変換する．またはその逆も可能である．
            </summary>
            <param name="dst">各入力に対応した出力の回転行列（3x3），または回転ベクトル（3x1 あるいは 1x3）</param>
            <param name="jacobian">オプション出力の3x9または9x3のヤコビアン - 出力配列の各要素の，入力配列の各要素に関する偏微分係数．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>        
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
            <param name="matrixQx">オプション出力の3x3のx軸を中心とする回転行列</param>
            <param name="matrixQy">オプション出力の3x3のy軸を中心とする回転行列</param>
            <param name="matrixQz">オプション出力の3x3のz軸を中心とする回転行列</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.RQDecomp3x3(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvPoint3D64f@)">
            <summary>
            3x3行列のRQ分解を求める
            </summary>
            <param name="matrixR">出力の3x3の上三角行列 R</param>
            <param name="matrixQ">出力の3x3の直交行列</param>
            <param name="matrixQx">オプション出力の3x3のx軸を中心とする回転行列</param>
            <param name="matrixQy">オプション出力の3x3のy軸を中心とする回転行列</param>
            <param name="matrixQz">オプション出力の3x3のz軸を中心とする回転行列</param>
            <param name="eulerAngles">オプション出力の回転のオイラー角</param>
        </member>
        <member name="M:OpenCvSharp.CvMat.Transpose">
            <summary>
            行列の転置を行う.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.T">
            <summary>
            行列の転置を行う.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMat.UndistortPoints(OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat,OpenCvSharp.CvMat)">
            <summary>
            観測された点座標から理想的な点座標を計算する
            </summary>
            <param name="dst">歪み補正後に逆透視投影を行った理想的な点座標.</param>
            <param name="cameraMatrix">カメラ行列 A=[fx 0 cx; 0 fy cy; 0 0 1] </param>
            <param name="distCoeffs">歪み係数のベクトル，4x1, 1x4, 5x1, 1x5．</param>
            <param name="r">オブジェクト空間での平行化変換（3x3 行列）． cvStereoRectify で計算された値， R1 あるいは R2 が渡される．このパラメータが null の場合，単位行列が用いられる．</param>
            <param name="p">新しいカメラ行列（3x3），あるいは，新しい投影行列（3x4）． cvStereoRectify  で計算された値， P1 あるいは P2  が渡される． このパラメータが null の場合，単位行列が用いられる． </param>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToArray">
            <summary>
            1次元配列に変換する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToRectangularArray">
            <summary>
            2次元配列に変換する
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.ToString">
            <summary>
            文字列形式を返す. 1チャンネルの場合のみに対応している.
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMat.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvMat.Type">
            <summary>
            CvMat シグネチャ (CV_MAT_MAGIC_VAL)．要素の型とフラグ 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Step">
            <summary>
            全行のバイト長
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Data">
            <summary>
            行列データへのポインタ.
            実際に格納しているデータ型に応じて適宜byte*やdouble*等にキャストして利用する。
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataByte">
            <summary>
            行列データへのByte型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataInt16">
            <summary>
            行列データへのInt16(short)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataInt32">
            <summary>
            行列データへのInt32(int)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataSingle">
            <summary>
            行列データへのSingle(float)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataDouble">
            <summary>
            行列データへのDouble型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayByte">
            <summary>
            行列データへのByte型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayInt16">
            <summary>
            行列データへのInt16(short)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayInt32">
            <summary>
            行列データへのInt32(int)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArraySingle">
            <summary>
            行列データへのSingle(float)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.DataArrayDouble">
            <summary>
            行列データへのDouble型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Cols">
            <summary>
            行列の列数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Height">
            <summary>
            行列の列数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Rows">
            <summary>
            行列の行数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Width">
            <summary>
            行列の行数
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.RefCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Dims">
            <summary>
            配列の次元数を取得する (2固定)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMat.Item(System.Int32,System.Int32)">
            <summary>
            特定の配列要素を取得・設定する (cvmGet, cvmSet相当). 
            </summary>
            <param name="row">要素インデックスの，0を基準とした第1成分．</param>
            <param name="col">要素インデックスの，0を基準とした第2成分．</param>
            <returns>指定した要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.CvMemStorage">
            <summary>
            動的に拡張可能なメモリストレージ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMemStorage.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor">
            <summary>
            メモリストレージを生成し，その参照を返す [block_size=0 (≈64K)]．初期状態ではストレージは空である．
            block_sizeを除くヘッダのフィールドは全て0に設定されている.
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.Int32)">
            <summary>
            メモリストレージを生成し，その参照を返す．初期状態ではストレージは空である．
            block_sizeを除くヘッダのフィールドは全て0に設定されている.
            </summary>
            <param name="blockSize">ストレージブロックのバイト単位のサイズ．0の場合，デフォルト値（現在は≈64K）が使われる．</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.IntPtr)">
            <summary>
            ポインタで初期化
            </summary>
            <param name="ptr">struct CvMemStorage*</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="F:OpenCvSharp.CvMemStorage.SizeOf">
            <summary>
            sizeof(CvMemStorage) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Alloc(System.UInt32)">
            <summary>
            ストレージ内にメモリバッファを確保する (cvMemStorageAlloc).
            </summary>
            <param name="size">バッファサイズ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.AllocString(System.String)">
            <summary>
            ストレージ内にテキスト文字列を確保する (cvMemStorageAllocString).
            </summary>
            <param name="str">文字列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.Clear">
            <summary>
            メモリストレージをクリアする (cvClearMemStorage)．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.CreateChild">
            <summary>
            子メモリストレージを生成する (cvCreateChildMemStorage).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.RestorePos(OpenCvSharp.CvMemStoragePos)">
            <summary>
            メモリストレージの位置を復元する (cvRestoreMemStoragePos).
            </summary>
            <param name="pos">新しいストレージの先頭位置</param>
        </member>
        <member name="M:OpenCvSharp.CvMemStorage.SavePos">
            <summary>
            メモリストレージの位置を保存する (cvSaveMemStoragePos).
            </summary>
            <returns>ストレージ先頭の位置．</returns>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Signature">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Bottom">
            <summary>
            最初に確保されたブロック
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Top">
            <summary>
            新たなブロックを確保する場所
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.Parent">
            <summary>
            現在のメモリブロック − スタックの先頭
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.BlockSize">
            <summary>
            ブロックの大きさ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMemStorage.FreeSpace">
            <summary>
            topブロック内の自由領域（バイト単位）
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMatND">
            <summary>
            多次元，多チャンネルの密な行列
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArraySingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND._dataArrayDouble">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            多次元の密な配列のヘッダとその内部データを確保する．
            </summary>
            <param name="dims">配列の次元数．CV_MAX_DIM（デフォルトでは32．ビルド時に変更される可能性もある）を超えてはいけない．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類．</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType,System.Array)">
            <summary>
            多次元の密な配列のヘッダとその内部データを確保する．
            </summary>
            <param name="dims">配列の次元数．CV_MAX_DIM（デフォルトでは32．ビルド時に変更される可能性もある）を超えてはいけない．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類．</param>
            <param name="data">行列のヘッダで指定されるデータ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor">
            <summary>
            sizeof(CvMat)の分のメモリの割り当てだけ行って初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.#ctor(System.Boolean)">
            <summary>
            sizeof(CvMatND)の分のメモリの割り当てだけ行って、GC禁止設定で初期化
            </summary>
            <param name="isEnabledDispose">trueならGC有効</param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_UnaryPlus(OpenCvSharp.CvMatND)">
            <summary>
            行列の単項+演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_UnaryNegation(OpenCvSharp.CvMatND)">
            <summary>
            行列の単項-演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_OnesComplement(OpenCvSharp.CvMatND)">
            <summary>
            行列の単項not演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Addition(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列の加算演算子。cvAddにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Addition(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの加算演算子。cvAddSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Subtraction(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列の減算演算子。cvSubにより減算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Subtraction(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの減算演算子。cvSubSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Multiply(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列の乗算演算子。cvMatMulにより乗算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Multiply(OpenCvSharp.CvMatND,System.Double)">
            <summary>
            行列とスカラーの乗算演算子。aの要素ごとにbをかけた結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_Division(OpenCvSharp.CvMatND,System.Double)">
            <summary>
            行列とスカラーの除算演算子。aの要素ごとにbで割った結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseAnd(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列のand演算子。cvAndにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseAnd(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのand演算子。cvAndSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseOr(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列のor演算子。cvOrにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_BitwiseOr(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのor演算子。cvOrSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_ExclusiveOr(OpenCvSharp.CvMatND,OpenCvSharp.CvMatND)">
            <summary>
            行列と行列のxor演算子。cvXorにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.op_ExclusiveOr(OpenCvSharp.CvMatND,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのxor演算子。cvXorSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvMatND.SizeOf">
            <summary>
            sizeof(CvMatND)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvMatND.Clone">
            <summary>
            多次元配列の完全なコピーを作成する
            </summary>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.InitMatNDHeader(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            多次元配列のヘッダを初期化する
            </summary>
            <param name="dims">配列の次元数</param>
            <param name="sizes">次元サイズの配列</param>
            <param name="type">配列要素の種類</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvMatND.InitMatNDHeader``1(System.Int32,System.Int32[],OpenCvSharp.MatrixType,``0[])">
            <summary>
            多次元配列のヘッダを初期化する
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dims">配列の次元数</param>
            <param name="sizes">次元サイズの配列</param>
            <param name="type">配列要素の種類</param>
            <param name="data">行列のヘッダで指定されるデータ</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Dims">
            <summary>
            配列の次元数を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Type">
            <summary>
            CvMatND シグネチャ (CV_MAT_MAGIC_VAL)．要素の型とフラグ 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.RefCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Dim">
            <summary>
            各次元での（要素数，要素間のバイト距離）の組
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.Data">
            <summary>
            行列データへのポインタ.
            実際に格納しているデータ型に応じて適宜byte*やdouble*等にキャストして利用する。
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataByte">
            <summary>
            行列データへのByte型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataInt16">
            <summary>
            行列データへのInt16(short)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataInt32">
            <summary>
            行列データへのInt32(int)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataSingle">
            <summary>
            行列データへのSingle(float)型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataDouble">
            <summary>
            行列データへのDouble型ポインタ.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayByte">
            <summary>
            行列データへのByte型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayInt16">
            <summary>
            行列データへのInt16(short)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayInt32">
            <summary>
            行列データへのInt32(int)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArraySingle">
            <summary>
            行列データへのSingle(float)型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvMatND.DataArrayDouble">
            <summary>
            行列データへのDouble型ポインタ. 配列のようにアクセス可能.
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvMatND.Dimension">
            <summary>
            各次元での（要素数，要素間のバイト距離）の組
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND.Dimension.Size">
            <summary></summary>
        </member>
        <member name="F:OpenCvSharp.CvMatND.Dimension.Step">
            <summary></summary>
        </member>
        <member name="T:OpenCvSharp.CvSparseMat">
            <summary>
            多次元，多チャンネルの疎な行列
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSparseMat.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvSparseMat*</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.#ctor(System.Int32,System.Int32[],OpenCvSharp.MatrixType)">
            <summary>
            疎な配列を作成する (cvCreateSparseMat).
            </summary>
            <param name="dims">配列の次元数．密な行列とは逆に，次元数は実質的には無制限である（2^16 まで）．</param>
            <param name="sizes">次元サイズの配列．</param>
            <param name="type">配列要素の種類.</param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_UnaryPlus(OpenCvSharp.CvSparseMat)">
            <summary>
            行列の単項+演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_UnaryNegation(OpenCvSharp.CvSparseMat)">
            <summary>
            行列の単項-演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_OnesComplement(OpenCvSharp.CvSparseMat)">
            <summary>
            行列の単項not演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Addition(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列の加算演算子。cvAddにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Addition(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの加算演算子。cvAddSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Subtraction(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列の減算演算子。cvSubにより減算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Subtraction(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの減算演算子。cvSubSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Multiply(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列の乗算演算子。cvMatMulにより乗算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Multiply(OpenCvSharp.CvSparseMat,System.Double)">
            <summary>
            行列とスカラーの乗算演算子。aの要素ごとにbをかけた結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_Division(OpenCvSharp.CvSparseMat,System.Double)">
            <summary>
            行列とスカラーの除算演算子。aの要素ごとにbで割った結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseAnd(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列のand演算子。cvAndにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseAnd(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのand演算子。cvAndSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列のor演算子。cvOrにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_BitwiseOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのor演算子。cvOrSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_ExclusiveOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvSparseMat)">
            <summary>
            行列と行列のxor演算子。cvXorにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.op_ExclusiveOr(OpenCvSharp.CvSparseMat,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのxor演算子。cvXorSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvSparseMat.SizeOf">
            <summary>
            sizeof(CvSparseMat)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.Clone">
            <summary>
            疎な配列の完全なコピーを作成する
            </summary>
            <returns>コピーされた行列</returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.NodeIdx(OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_IDX
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSparseMat.NodeVal``1(OpenCvSharp.CvSparseNode)">
            <summary>
            CV_NODE_VAL
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Dims">
            <summary>
            配列の次元数を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Type">
            <summary>
            CvMat シグネチャ (CV_MAT_MAGIC_VAL)．要素の型とフラグ 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.HashSize">
            <summary>
            ハッシュテーブルのサイズを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.HashTable">
            <summary>
            ハッシュテーブル
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Heap">
            <summary>
            ハッシュテーブルノードの保存領域（プール）を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.IdxOffset">
            <summary>
            配列ノードのインデックスのオフセット（バイト単位）を取得する 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.ValOffset">
            <summary>
            配列ノードの値のオフセット（バイト単位）を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSparseMat.Size">
            <summary>
            配列ノードの値のオフセット（バイト単位）を取得する
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCmpFunc">
            <summary>
            cvSeqSort, cvSeqSearch等のメソッドで指定する, 比較関数をあらわすデリゲート.
            aがbより小さければ負の値を, aとbが等しければ0を, aがbより大きければ正の値を返す.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>aがbより小さければ負の値を, aとbが等しければ0を, aがbより大きければ正の値を返す.</returns>
        </member>
        <member name="T:OpenCvSharp.CvCmpFunc`1">
            <summary>
            cvSeqSort, cvSeqSearch等のメソッドで指定する, 比較関数をあらわすデリゲート.
            aがbより小さければ負の値を, aとbが等しければ0を, aがbより大きければ正の値を返す.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>aがbより小さければ負の値を, aとbが等しければ0を, aがbより大きければ正の値を返す.</returns>
        </member>
        <member name="T:OpenCvSharp.CvMouseCallback">
            <summary>
            cvSetMouseCallbackで指定する、HighGUIウィンドウでマウスイベントが発生したときのイベント処理を行うデリゲート
            </summary>
            <param name="event">CV_EVENT_ であらわされるフラグのうちのひとつ</param>
            <param name="x">画像内でのマウスポインタのx座標</param>
            <param name="y">画像内でのマウスポインタのy座標</param>
            <param name="flags">CV_EVENT_FLAGであらわされるフラグの論理和</param>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback">
            <summary>
            CvTrackbarが操作されたときのイベント処理を行うデリゲート
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback2">
            <summary>
            CvTrackbarが操作されたときのイベント処理を行うデリゲート
            </summary>
            <param name="pos"></param>
            <param name="userdata"></param>
        </member>
        <member name="T:OpenCvSharp.CvTrackbarCallback2Native">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="userdata"></param>
        </member>
        <member name="T:OpenCvSharp.Utilities.DynamicInvoker`1">
            <summary>
            動的にアンマネージのアセンブリにある関数を呼び出すためのクラス
            </summary>
            <typeparam name="T">実行させたい関数の定義に合わせたデリゲート</typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.DynamicInvoker`1.#ctor(System.String,System.String)">
            <summary>
            初期化
            </summary>
            <param name="dllName">ライブラリの名前</param>
            <param name="functionName">関数の名前</param>
        </member>
        <member name="M:OpenCvSharp.Utilities.DynamicInvoker`1.Dispose(System.Boolean)">
            <summary>
            リソースの解放
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.DllName">
            <summary>
            読み込むライブラリの名前
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.FunctionName">
            <summary>
            呼び出す関数の名前
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.PtrLib">
            <summary>
            LoadLibraryで得られたポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.PtrProc">
            <summary>
            GetProcAddressで得られたポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.DynamicInvoker`1.Call">
            <summary>
            呼び出す関数ポインタをデリゲートに変換したものを取得する
            </summary>
        </member>
        <member name="T:OpenCvSharp.AdaptiveThresholdType">
            <summary>
            適応的閾値処理で使用するアルゴリズムの種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.AdaptiveThresholdType.MeanC">
            <summary>
            注目ピクセルの block_size × block_size 隣接領域の平均から，param1 を引いた値を閾値とする.
            [CV_ADAPTIVE_THRESH_MEAN_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.AdaptiveThresholdType.GaussianC">
            <summary>
            注目ピクセルの block_size × block_size 隣接領域の重み付き総和（ガウシアン）から param1 を引いた値を閾値とする. 
            [CV_ADAPTIVE_THRESH_GAUSSIAN_C]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ApertureSize">
            <summary>
            拡張Sobelカーネルのサイズ
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size1">
            <summary>
            サイズ 1
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size3">
            <summary>
            サイズ 3
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size5">
            <summary>
            サイズ 5
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Size7">
            <summary>
            サイズ 7
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApertureSize.Scharr">
            <summary>
            3x3 Sobelよりも精度の良い結果が得られる3x3 のSharr のフィルタ.
            [CV_SCHARR]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ApproxPolyMethod">
            <summary>
            ポリラインの近似方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.ApproxPolyMethod.DP">
            <summary>
            Douglas-Peuckerアルゴリズム
            [CV_POLY_APPROX_DP]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ArrComparison">
            <summary>
            cvCmp, cvCmpS等のメソッドで用いる, CvArrの比較方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.EQ">
            <summary>
            src1(I) と value は等しい 
            [CV_CMP_EQ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.GT">
            <summary>
            src1(I) は value より大きい 
            [CV_CMP_GT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.GE">
            <summary>
            src1(I) は value より大きいか等しい 
            [CV_CMP_GE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.LT">
            <summary>
            src1(I) は value より小さい 
            [CV_CMP_LT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.LE">
            <summary>
            src1(I) は value より小さいか等しい 
            [CV_CMP_LE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ArrComparison.NE">
            <summary>
            src1(I) と value は等しくない 
            [CV_CMP_NE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.BitDepth">
            <summary>
            画像要素のビットデプス.
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U1">
            <summary>
            符号無し 1 ビット整数 [IPL_DEPTH_1U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U8">
            <summary>
            符号無し 8 ビット整数 [IPL_DEPTH_8U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S8">
            <summary>
            符号あり 8 ビット整数 [IPL_DEPTH_8S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.U16">
            <summary>
            符号無し 16 ビット整数 [IPL_DEPTH_16U]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S16">
            <summary>
            符号あり 16 ビット整数 [IPL_DEPTH_16S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.S32">
            <summary>
            符号あり 32 ビット整数 [IPL_DEPTH_32S]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.F32">
            <summary>
            単精度浮動小数点数 [IPL_DEPTH_32F]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BitDepth.F64">
            <summary>
            倍精度浮動小数点数 [IPL_DEPTH_64F]
            </summary>
        </member>
        <member name="T:OpenCvSharp.BorderType">
            <summary>
            cvCopyMakeBorderで指定する, 境界線のタイプ
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Constant">
            <summary>
            境界はこの関数の最後のパラメータとして渡された定数 value で埋められる. 
            [IPL_BORDER_CONSTANT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Replicate">
            <summary>
            画像の最も上/下の行と最も左/右の列（画像領域の一番外側の値）を用いて境界線を生成する．
            [IPL_BORDER_REPLICATE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Reflict">
            <summary>
            [IPL_BORDER_REFLECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Reflict101">
            <summary>
            [IPL_BORDER_REFLECT_101]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Wrap">
            <summary>
            [IPL_BORDER_WRAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Default">
            <summary>
            [BORDER_DEFAULT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Isolated">
            <summary>
            [cv::BORDER_ISOLATED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.BorderType.Auto">
            <summary>
            -1
            </summary>
        </member>
        <member name="T:OpenCvSharp.CalibrationFlag">
            <summary>
            cvCalibrateCamera2やcvStereoCalibrateの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.Zero">
            <summary>
            オプション無し (=0)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.Default">
            <summary>
            オプション無し (=0)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixIntrinsic">
            <summary>
            これがセットされた場合，外部パラメータのみが最適化されるように， camera_matrix1,2 と dist_coeffs1,2 が固定される．
            [CV_CALIB_FIX_INTRINSIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.UseIntrinsicGuess">
            <summary>
            intrinsic_matrixは最適化が行われた正しい初 期値 fx, fy, cx, cyを含む．このパラメータがセッ トされていない場合，(cx, cy) は最初に画像中心にセットされ（image_size はこの計算に用いられ る），焦点距離は最小二乗法で計算される．
            [CV_CALIB_USE_INTRINSIC_GUESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixPrincipalPoint">
            <summary>
            主点（光学中心） は最適化中には変化せず，中心または別の指定された場所（このパラメータと同時 に UseIntrinsicGuess がセットされ ている場合）に固定される 
            [CV_CALIB_FIX_PRINCIPAL_POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixFocalLength">
            <summary>
            fxk および fyk が固定される．
            [CV_CALIB_FIX_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixAspectRatio">
            <summary>
            fx  と fy のうちのどちらか一方だけが独立変数であるとし，アスペクト比 fx/fy が intrinsic_matrix の初期値として与えられた値か ら変わらないように最適化処理を行う．
            この場合，実際に用いられる(fx, fy)の初期値は，行列から与えられる （CV_CALIB_USE_INTRINSIC_GUESSがセットされている場合）か，何らかの方法で推定される（後者の場合は， fx, fy は任意の値にセットされ，それらの比率だけが用いられる）．
            [CV_CALIB_FIX_ASPECT_RATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.SameFocalLength">
            <summary>
            強制的に，fx0=fx1， fy0=fy1 とする．
            [CV_CALIB_SAME_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.ZeroTangentDist">
            <summary>
            円周方向の歪み係数は0にセットされ，最適化中は変化しない 
            [CV_CALIB_ZERO_TANGENT_DIST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK1">
            <summary>
            0 番目の歪み係数（k1）が固定される．
            [CV_CALIB_FIX_K1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK2">
            <summary>
            1 番目の歪み係数（k2）が固定される．
            [CV_CALIB_FIX_K2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK3">
            <summary>
            4 番目の歪み係数（k3）が固定される．
            [CV_CALIB_FIX_K3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK4">
            <summary>
            最適化中に，指定した半径方向の歪み係数を変更しません．
            CV_CALIB_USE_INTRINSIC_GUESS が指定されている場合は，与えられた distCoeffs 行列の係数が利用されます．そうでない場合は，0が利用されます．
            [CV_CALIB_FIX_K4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK5">
            <summary>
            最適化中に，指定した半径方向の歪み係数を変更しません．
            CV_CALIB_USE_INTRINSIC_GUESS が指定されている場合は，与えられた distCoeffs 行列の係数が利用されます．そうでない場合は，0が利用されます．
            [CV_CALIB_FIX_K5]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.FixK6">
            <summary>
            最適化中に，指定した半径方向の歪み係数を変更しません．
            CV_CALIB_USE_INTRINSIC_GUESS が指定されている場合は，与えられた distCoeffs 行列の係数が利用されます．そうでない場合は，0が利用されます．
            [CV_CALIB_FIX_K6]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CalibrationFlag.RationalModel">
            <summary>
            係数 k4, k5, k6 を有効にします．
            後方互換性を保つためには，このフラグを明示的に指定して，キャリブレーション関数が rational モデルを利用して8個の係数を返すようにします．
            このフラグが指定されない場合，関数は5つの歪み係数のみを計算し ます．
            [CV_CALIB_RATIONAL_MODEL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ChessboardFlag">
            <summary>
            cvFindChessboardCornersの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.Zero">
            <summary>
            オプション無し
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.AdaptiveThresh">
            <summary>
            画像を二値化する際に，固定の閾値を使うのではなく，（画像の平均輝度値から計算される）適応的な閾値を用いる 
            [CV_CALIB_CB_ADAPTIVE_THRESH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.NormalizeImage">
            <summary>
            固定閾値処理または適応的閾値処理を行う前に，cvNormalizeHistを用いて画像を正規化する 
            [CV_CALIB_CB_NORMALIZE_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ChessboardFlag.FilterQuads">
            <summary>
            輪郭の探索 段階で抽出される間違った四角形を無視するために，追加基準(輪郭面積，周囲長，形は正方形など）を使用する 
            [CV_CALIB_CB_FILTER_QUADS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureDevice">
            <summary>
            カメラキャプチャの初期化に用いるカメラのデバイス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Any">
            <summary>
            autodetect
            [CV_CAP_ANY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.MIL">
            <summary>
            MIL proprietary drivers
            [CV_CAP_MIL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.VFW">
            <summary>
            platform native
            [CV_CAP_VFW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.V4L">
            <summary>
            platform native
            [CV_CAP_V4L]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.V4L2">
            <summary>
            platform native
            [CV_CAP_V4L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Firewire">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_FIREWIRE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.IEEE1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_IEEE1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Fireware">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_FIREWARE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.DC1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_DC1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.CMU1394">
            <summary>
            IEEE 1394 drivers
            [CV_CAP_CMU1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Stereo">
            <summary>
            TYZX proprietary drivers
            [CV_CAP_STEREO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX">
            <summary>
            TYZX proprietary drivers
            [CV_CAP_TYZX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Left">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Right">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_RIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Color">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_COLOR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.TYZX_Z">
            <summary>
            TYZX proprietary drivers
            [CV_TYZX_Z]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.QuickTime">
            <summary>
            QuickTime
            [CV_CAP_QT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Unicap">
            <summary>
            Unicap drivers
            [CV_CAP_UNICAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.DShow">
            <summary>
            DirectShow (via videoInput)
            [CV_CAP_DSHOW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.PvAPI">
            <summary>
            PvAPI, Prosilica GigE SDK
            [CV_CAP_PVAPI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.OpenNI">
            <summary>
            OpenNI (for Kinect)
            [CV_CAP_OPENNI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.Android">
            <summary>
            Android
            [CV_CAP_ANDROID]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureDevice.XIAPI">
            <summary>
            XIMEA Camera API
            [CV_CAP_XIAPI]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureProperty">
            <summary>
            CvCaptureのプロパティID
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosMsec">
            <summary>
            ファイル中の現在の位置（ミリ秒単位），あるいはビデオキャプチャのタイムスタンプ値
            [CV_CAP_PROP_POS_MSEC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosFrames">
            <summary>
            次にデコード/キャプチャされるフレームのインデックス．0 から始まる
            [CV_CAP_PROP_POS_FRAMES]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PosAviRatio">
            <summary>
            ビデオファイル内の相対的な位置 (0 - ファイルの最初，1 - ファイルの最後）
            [CV_CAP_PROP_POS_AVI_RATIO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameWidth">
            <summary>
            ビデオストリーム中のフレームの幅
            [CV_CAP_PROP_FRAME_WIDTH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameHeight">
            <summary>
            ビデオストリーム中のフレームの高さ
            [CV_CAP_PROP_FRAME_HEIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Fps">
            <summary>
            フレームレート
            [CV_CAP_PROP_FPS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FourCC">
            <summary>
            コーデックを表す 4 文字
            [CV_CAP_PROP_FOURCC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.FrameCount">
            <summary>
            ビデオファイル中のフレーム数 
            [CV_CAP_PROP_FRAME_COUNT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Format">
            <summary>
            retrieve() によって返されるMat オブジェクトのフォーマット．
            [CV_CAP_PROP_FORMAT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Mode">
            <summary>
            現在のキャプチャモードを表す，バックエンド固有の値．
            [CV_CAP_PROP_MODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Brightness">
            <summary>
            明度
            [CV_CAP_PROP_BRIGHTNESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Contrast">
            <summary>
            コントラスト
            [CV_CAP_PROP_CONTRAST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Saturation">
            <summary>
            彩度
            [CV_CAP_PROP_SATURATION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Hue">
            <summary>
            色相
            [CV_CAP_PROP_HUE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Gain">
            <summary>
            画像のゲイン（カメラの場合のみ）．
            [CV_CAP_PROP_GAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Exposure">
            <summary>
            露出（カメラの場合のみ）．
            [CV_CAP_PROP_EXPOSURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.ConvertRgb">
            <summary>
            画像がRGBに変換されるか否かを表す，ブール値のフラグ．
            [CV_CAP_PROP_CONVERT_RGB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.WhiteBalance">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Rectification">
            <summary>
            TOWRITE（注意：現在のところ，DC1394 v 2.x バックエンドでのみサポートされます）．
            [CV_CAP_PROP_RECTIFICATION]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Monocrome">
            <summary>
            
            [CV_CAP_PROP_MONOCROME]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Sharpness">
            <summary>
            
            [CV_CAP_PROP_SHARPNESS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.AutoExposure">
            <summary>
            exposure control done by camera,
            user can adjust refernce level using this feature
            [CV_CAP_PROP_AUTO_EXPOSURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Gamma">
            <summary>
            
            [CV_CAP_PROP_GAMMA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Temperature">
            <summary>
            
            [CV_CAP_PROP_TEMPERATURE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.Trigger">
            <summary>
            
            [CV_CAP_PROP_TRIGGER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.TriggerDelay">
            <summary>
            
            [CV_CAP_PROP_TRIGGER_DELAY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.WhiteBalanceRedV">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE_RED_V]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.MaxDC1394">
            <summary>
            
            [CV_CAP_PROP_MAX_DC1394]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.AutoGrab">
            <summary>
            property for highgui class CvCapture_Android only
            [CV_CAP_PROP_AUTOGRAB]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.SupportedPreviewSizesString">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PreviewFormat">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_PREVIEW_FORMAT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_OutputMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_FrameMaxDepth">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_Baseline">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_FocalLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_RegistrationON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_Registratiob">
            <summary>
            flag that synchronizes the remapping depth map to image map
            by changing depth generator's view point (if the flag is "on") or
            sets this view point to its normal one (if the flag is "off").
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_ImageGeneratorOutputMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorBaseline">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorFocalLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.OpenNI_DepthGeneratorRegistrationON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.GStreamerQueueLength">
            <summary>
            default is 1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.PvAPIMulticastIP">
            <summary>
            ip for anable multicast master mode. 0 for disable multicast
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_Downsampling">
            <summary>
            Change image resolution by binning or skipping. 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_DataFormat">
            <summary>
            Output data format.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_OffsetX">
            <summary>
            Horizontal offset from the origin to the area of interest (in pixels).
            </summary>        
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_OffsetY">
            <summary>
            Vertical offset from the origin to the area of interest (in pixels).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_TrgSource">
            <summary>
            Defines source of trigger.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_TrgSoftware">
            <summary>
            Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiSelector">
            <summary>
            Selects general purpose input 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiMode">
            <summary>
            Set general purpose input mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpiLevel">
            <summary>
            Get general purpose level
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpoSelector">
            <summary>
            Selects general purpose output 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_GpoMode">
            <summary>
            Set general purpose output mode
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_LedSelector">
            <summary>
            Selects camera signalling LED 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_LedMode">
            <summary>
            Define camera signalling LED functionality
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_ManualWB">
            <summary>
            Calculates White Balance(must be called during acquisition)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AutoWB">
            <summary>
            Automatic white balance
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEAG">
            <summary>
            Automatic exposure/gain
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_ExpPriority">
            <summary>
            Exposure priority (0.5 - exposure 50%, gain 50%).
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEMaxLimit">
            <summary>
            Maximum limit of exposure in AEAG procedure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AGMaxLimit">
            <summary>
            Maximum limit of gain in AEAG procedure
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_AEAGLevel">
            <summary>
            Average intensity of output signal AEAG should achieve(in %)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureProperty.XI_Timeout">
            <summary>
            Image capture timeout in milliseconds
            </summary>
        </member>
        <member name="T:OpenCvSharp.CaptureType">
            <summary>
            CvCaptureのキャプチャタイプ(カメラorファイル)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureType.File">
            <summary>
            AVIファイルからのキャプチャ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureType.Camera">
            <summary>
            カメラからのキャプチャ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CaptureType.NotSpecified">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CheckArrFlag">
            <summary>
            cvCheckArrの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.NanOrInfinity">
            <summary>
            すべての要素が NaN か ±(Infinity) でないかだけをチェックする
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.Range">
            <summary>
            配列のすべての要素について [minVal,maxVal) の範囲内であるかどうかをチェックする
            [CV_CHECK_RANGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CheckArrFlag.Quiet">
            <summary>
            要素に無効な値や範囲外のものがあっても，エラーを発生させない
            [CV_CHECK_QUIET]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ColorConversion">
            <summary>
            色空間の変換の方法
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourChain">
            <summary>
            輪郭の近似手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.Code">
            <summary>
            すべての輪郭点を完全に格納します．つまり，この手法により格納された任意の隣り合う2点は，互いに8近傍に存在します． [CV_CHAIN_CODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxNone">
            <summary>
            最も外側の輪郭のみ抽出 [CV_CHAIN_APPROX_NONE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxSimple">
            <summary>
            水平・垂直・斜めの線分を圧縮し，それらの端点のみを残します．例えば，まっすぐな矩形の輪郭線は，4つの点にエンコードされます． [CV_CHAIN_APPROX_SIMPLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxTC89L1">
            <summary>
            Teh-Chinチェーン近似アルゴリズムの1つを適用します． TehChin89 を参照してください． [CV_CHAIN_APPROX_TC89_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.ApproxTC89KCOS">
            <summary>
            Teh-Chinチェーン近似アルゴリズムの1つを適用します． TehChin89 を参照してください． [CV_CHAIN_APPROX_TC89_KCOS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourChain.LinkRuns">
            <summary>
            use completely different contour retrieval algorithm via linking of horizontal segments of 1’s. Only CV_RETR_LIST retrieval mode can be used with this method. [CV_LINK_RUNS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ContourRetrieval">
            <summary>
            輪郭の抽出モード 
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.External">
            <summary>
            最も外側の輪郭のみ抽出 
            [CV_RETR_EXTERNAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.List">
            <summary>
            全ての輪郭を抽出し，リストに追加 
            [CV_RETR_LIST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.CComp">
            <summary>
            全ての輪郭を抽出し，二つのレベルを持つ階層構造を構成する．1番目のレベルは連結成分の外側の境界線，2番目のレベルは穴（連結成分の内側に存在する）の境界線 
            [CV_RETR_CCOMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.Tree">
            <summary>
            全ての輪郭を抽出し，枝分かれした輪郭を完全に表現する階層構造を構成する 
            [CV_RETR_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ContourRetrieval.FloodFill">
            <summary>
            
            [CV_RETR_FLOODFILL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CovarMatrixFlag">
            <summary>
            cvCovarMatrixの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Scrambled">
            <summary>
            scale * [vects[0]-avg,vects[1]-avg,...]^T * [vects[0]-avg,vects[1]-avg,...]   
            すなわち，共変動行列はcount×countである． そのような一般的でない共変動行列は，
            非常に大きなベクトル集合に対する高速な主成分分析のために使用される（例えば，顔認識のための固有顔）．
            この「スクランブルされた」行列の固有値は，真共変動行列の固有値と一致し， 
            そして「真の」固有ベクトルは「スクランブルされた」共変動行列の固有ベクトルから容易に計算できる．
            [CV_COVAR_SCRAMBLED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Normal">
            <summary>
            scale * [vects[0]-avg,vects[1]-avg,...]*[vects[0]-avg,vects[1]-avg,...]^T   
            つまり，cov_matはすべての入力ベクトルの要素の合計と同じサイズの一般的な共変動行列となる． 
            CV_COVAR_SCRAMBLEDとCV_COVAR_NORMALのどちらか一つは必ず指定されなくてはならない．
            [CV_COVAR_NORMAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.UseAvg">
            <summary>
            このフラグが指定された場合，関数は入力ベクトルから平均を計算せず，引数で指定された平均ベクトルを使用する． 
            平均が何らかの方法で既に計算されている場合，または共変動行列が部分的に計算されている場合 （この場合，avgは入力ベクトルの一部の平均ではなく，全ての平均ベクトルである）に有用である． 
            [CV_COVAR_USE_AVG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Scale">
            <summary>
            このフラグが指定された場合， 共変動行列は入力ベクトルの数によってスケーリングされる．
            [CV_COVAR_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Rows">
            <summary>
            全ての入力ベクトルは単一の行列（vects[0]）の行として保存されることを意味する．
            そしてavgは適切な大きさの1行のベクトルでなければならない． 
            [CV_COVAR_ROWS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CovarMatrixFlag.Cols">
            <summary>
            全ての入力ベクトルは単一の行列（vects[0]）の列として保存されることを意味する．そしてavgは適切な大きさの1列のベクトルでなければならない． 
            [CV_COVAR_COLS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CriteriaType">
            <summary>
            終了条件の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Iteration">
            <summary>
            繰り返し回数による条件
            [CV_TERMCRIT_ITER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Number">
            <summary>
            繰り返し回数による条件
            [CV_TERMCRIT_NUMBER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CriteriaType.Epsilon">
            <summary>
            目標精度(ε)による条件
            [CV_TERMCRIT_EPS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvFilter">
            <summary>
            畳み込みに使うフィルタ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvFilter.Gaussian5x5">
            <summary>
            [CV_GAUSSIAN_5x5]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DCTFlag">
            <summary>
            cvDCTの変換フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Forward">
            <summary>
            1次元または2次元の順変換を行う．結果のスケーリングは行わない. 
            [CV_DXT_FORWARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Inverse">
            <summary>
            1次元または2次元の逆変換を行う．結果のスケーリングは行わない． 
            Forward と Inverse は，もちろん同時には指定できない．
            [CV_DXT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DCTFlag.Rows">
            <summary>
            入力配列のそれぞれの行に対して独立に，順変換あるいは逆変換を行う． 
            このフラグは複数のベクトルの同時変換を許可し，
            オーバーヘッド（一つの計算の何倍も大きくなることもある）を減らすためや，
            3次元以上の高次元に対して変換を行うために使用される．
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DFTFlag">
            <summary>
            cvDFTの変換フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.None">
            <summary>
            Zero
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Forward">
            <summary>
            1次元または2次元の順変換を行う．結果のスケーリングは行わない. 
            [CV_DXT_FORWARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Inverse">
            <summary>
            1次元または2次元の逆変換を行う．結果のスケーリングは行わない． 
            Forward と Inverse は，もちろん同時には指定できない．
            [CV_DXT_INVERSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Scale">
            <summary>
            結果を配列要素数で割り，スケーリングする．通常は Inverse と同時に用いる．
            ショートカットとして InvScale を用いても良い．
            [CV_DXT_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.InverseScale">
            <summary>
            Inverse | Scale のショートカット. 
            [CV_DXT_INVERSE_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DFTFlag.Rows">
            <summary>
            入力配列のそれぞれの行に対して独立に，順変換あるいは逆変換を行う． 
            このフラグは複数のベクトルの同時変換を許可し，
            オーバーヘッド（一つの計算の何倍も大きくなることもある）を減らすためや，
            3次元以上の高次元に対して変換を行うために使用される．
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DiagType">
            <summary>
            cvGetDiagメソッドにて、どの対角列を取得するかのフラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Main">
            <summary>
            メインの対角列
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Above">
            <summary>
            メインの対角列の一つ上の斜め列
            </summary>
        </member>
        <member name="F:OpenCvSharp.DiagType.Below">
            <summary>
            メインの対角列の一つ下の斜め列
            </summary>
        </member>
        <member name="T:OpenCvSharp.DisparityMode">
            <summary>
            視差を計算するためのアルゴリズム
            </summary>
        </member>
        <member name="F:OpenCvSharp.DisparityMode.Birchfield">
            <summary>
            [CV_DISPARITY_BIRCHFIELD]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DistanceType">
            <summary>
            cvDistTransformで指定する距離の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.User">
            <summary>
            User defined distance  [CV_DIST_USER]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L1">
            <summary>
            distance = |x1-x2| + |y1-y2|  [CV_DIST_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L2">
            <summary>
            the simple euclidean distance  [CV_DIST_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.C">
            <summary>
            distance = max(|x1-x2|,|y1-y2|)  [CV_DIST_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.L12">
            <summary>
            L1-L2 metric: distance = 2(sqrt(1+x*x/2) - 1))  [CV_DIST_L12]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Fair">
            <summary>
            distance = c^2(|x|/c-log(1+|x|/c)), c = 1.3998  [CV_DIST_FAIR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Welsch">
            <summary>
            distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846  [CV_DIST_WELSCH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistanceType.Huber">
            <summary>
            distance = |x|&lt;c ? x^2/2 : c(|x|-c/2), c=1.345  [CV_DIST_HUBER]
            </summary>
        </member>
        <member name="T:OpenCvSharp.DistributionType">
            <summary>
            cvRandArrメソッド等で用いる, 分布のタイプ
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistributionType.Uniform">
            <summary>
            一様分布 
            [CV_RAND_UNI]
            </summary>
        </member>
        <member name="F:OpenCvSharp.DistributionType.Normal">
            <summary>
            正規分布（ガウス分布） 
            [CV_RAND_NORMAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ElementShape">
            <summary>
            構造要素の形状
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Rect">
            <summary>
            矩形 
            [CV_SHAPE_RECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Cross">
            <summary>
            十字型 
            [CV_SHAPE_CROSS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Ellipse">
            <summary>
            楕円 
            [CV_SHAPE_ELLIPSE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ElementShape.Custom">
            <summary>
            ユーザ定義の形状 
            [CV_SHAPE_CUSTOM]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FileStorageMode">
            <summary>
            CvFileStorageのモード
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Read">
            <summary>
            データ読み込みのためのファイルオープン 
            [CV_STORAGE_READ]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Write">
            <summary>
            データ書き込みのためのファイルオープン 
            [CV_STORAGE_WRITE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.WriteText">
            <summary>
            テキストデータ書き込みのためのファイルオープン 
            [CV_STORAGE_WRITE_TEXT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.WriteBinary">
            <summary>
            バイナリデータ書き込みのためのファイルオープン 
            [CV_STORAGE_WRITE_BINARY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Append">
            <summary>
            データ追加書き込みのためのファイルオープン 
            [CV_STORAGE_APPEND]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.Memory">
            <summary>
            
            [CV_STORAGE_MEMORY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.FotmatMask">
            <summary>
            
            [CV_STORAGE_FORMAT_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.FormatAuto">
            <summary>
            
            [CV_STORAGE_FORMAT_AUTO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.FormatXml">
            <summary>
            
            [CV_STORAGE_FORMAT_XML]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FileStorageMode.FormatYaml">
            <summary>
            
            [CV_STORAGE_FORMAT_YAML]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FlipMode">
            <summary>
            配列の反転方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.X">
            <summary>
            x軸周りでの反転
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.Y">
            <summary>
            y軸周りでの反転
            </summary>
        </member>
        <member name="F:OpenCvSharp.FlipMode.XY">
            <summary>
            両軸周りでの反転
            </summary>
        </member>
        <member name="T:OpenCvSharp.FontFace">
            <summary>
            フォント名の識別子．現在はHershey fontsの一部のみサポートされている. 
            フォント名のフラグにはイタリックフラグ(Italic)を合成することができる.
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheySimplex">
            <summary>
            普通サイズのsans-serifフォント 
            [CV_FONT_HERSHEY_SIMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyPlain">
            <summary>
            小さいサイズのsans-serifフォント
            [CV_FONT_HERSHEY_PLAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyDuplex">
            <summary>
            普通サイズのsans-serif フォント（HersheySimplexよりも複雑）
            [CV_FONT_HERSHEY_DUPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyComplex">
            <summary>
            普通サイズのserif フォント 
            [CV_FONT_HERSHEY_COMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyTriplex">
            <summary>
            普通サイズのserif フォント（HersheyComplexよりも複雑）
            [CV_FONT_HERSHEY_TRIPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyComplexSmall">
            <summary>
            HersheyComplexの小さいバージョン 
            [CV_FONT_HERSHEY_COMPLEX_SMALL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyScriptSimplex">
            <summary>
            手書きスタイルのフォント 
            [CV_FONT_HERSHEY_SCRIPT_SIMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.HersheyScriptComplex">
            <summary>
            HersheyScriptSimplexの複雑なバージョン 
            [CV_FONT_HERSHEY_SCRIPT_COMPLEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.Italic">
            <summary>
            イタリックフラグ 
            [CV_FONT_ITALIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FontFace.Vector0">
            <summary>
            
            [CV_FONT_VECTOR0]
            </summary>
        </member>
        <member name="T:OpenCvSharp.FundamentalMatMethod">
            <summary>
            基礎行列の計算手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Point7">
            <summary>
            7-pointアルゴリズム． N == 7 
            [CV_FM_7POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Point8">
            <summary>
            8-pointアルゴリズム． N > 8 
            [CV_FM_8POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.LMedSOnly">
            <summary>
            LMedSアルゴリズム． N >= 8 
            [CV_FM_LMEDS_ONLY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.RansacOnly">
            <summary>
            RANSAC アルゴリズム． N > 8 
            [CV_FM_RANSAC_ONLY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.LMedS">
            <summary>
            LMedSアルゴリズム． N >= 8 
            [CV_FM_LMEDS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.FundamentalMatMethod.Ransac">
            <summary>
            RANSAC アルゴリズム． N > 8 
            [CV_FM_RANSAC]
            </summary>
        </member>
        <member name="T:OpenCvSharp.GemmOperation">
            <summary>
            cvGEMMメソッドの操作フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.Zero">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.None">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.A_T">
            <summary>
            src1を転置 
            [CV_GEMM_A_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.B_T">
            <summary>
            src2を転置 
            [CV_GEMM_B_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.GemmOperation.C_T">
            <summary>
            src3を転置 
            [CV_GEMM_C_T]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HaarDetectionType">
            <summary>
            cvHaarDetectObjectsの処理モード
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.Zero">
            <summary>
            = 0
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.DoCannyPruning">
            <summary>
            これがセットされると，関数は Canny エッジ検出器を 非常に多くのエッジを含む（あるいは非常に少ないエッジしか含まない） 画像領域を，
            探索オブジェクトを含まない領域と見なして棄却する． 顔検出用には特別な閾値が調整されており，この場合，枝刈りにより処理が 高速化される．
            [CV_HAAR_DO_CANNY_PRUNING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.ScaleImage">
            <summary>
            スケーリングされる度に，関数は， 分類カスケード中の特徴の座標系を 「拡大」するのではなく，逆に画像を縮小する． 
            現在は，単体でのみ用いることができるオプションである． つまり，このフラグは他のものと併用はできない．
            [CV_HAAR_SCALE_IMAGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.FindBiggestObject">
            <summary>
            これがセットされると，関数は，（もし存在すれば）画像中の最大のオブジェクトを検出する． つまり，出力シーケンスは一つ（あるいは 0）のエレメントを持つ．
            [CV_HAAR_FIND_BIGGEST_OBJECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HaarDetectionType.DoRoughSearch">
            <summary>
            FindBiggestObject がセットされており，min_neighbors > 0 である場合にのみ利用されるべきである．
            このフラグがセットされると，関数は，現在のスケールにおいて， オブジェクトが検出（かつ，その近傍に充分に候補が検出）された後に，
            それより小さいサイズの候補を探索しなくなる． min_neighbors が固定されていると， 大抵の場合，このモードは通常のシングルオブジェクトモード
            （flags=FindBiggestObject）よりも不正確な（少しだけ大きい）オブジェクト矩形を返す． しかし，このモードはずっと高速であり，最大で10倍程度の速度差になる．
            正確さを増すために，min_neighbors に大き な値を指定することができる． 
            [CV_HAAR_DO_ROUGH_SEARCH]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HistogramComparison">
            <summary>
            cvCompareHistで用いる、CvHistogramの比較方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Correl">
            <summary>
            相関 [CV_COMP_CORREL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Chisqr">
            <summary>
            カイ二乗 [CV_COMP_CHISQR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Intersect">
            <summary>
            交差 [CV_COMP_INTERSECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramComparison.Bhattacharyya">
            <summary>
            Bhattacharyya距離 [CV_COMP_BHATTACHARYYA]. 正規化されたヒストグラムでのみ実行可能である．
            </summary>
        </member>
        <member name="T:OpenCvSharp.HistogramFormat">
            <summary>
            ヒストグラム表現フォーマット
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramFormat.Array">
            <summary>
            ヒストグラムデータが多次元で密な配列CvMatNDで表現されている 
            [CV_HIST_ARRAY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HistogramFormat.Sparse">
            <summary>
            ヒストグラムデータが多次元で疎な配列 CvSparseMat で表現されている 
            [CV_HIST_SPARSE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HomographyMethod">
            <summary>
            ホモグラフィ行列を計算するための手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.Zero">
            <summary>
            全ての点のペアを利用する標準的な手法
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.LMedS">
            <summary>
            LMedS推定によるロバストな手法
            [CV_LMEDS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HomographyMethod.Ransac">
            <summary>
            RANSACアルゴリズムに基づくロバストな手法
            [CV_RANSAC]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HoughCirclesMethod">
            <summary>
            cvHoughCirclesで用いる、ハフ変換(円検出)の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughCirclesMethod.Gradient">
            <summary>
            基本的な2段階のハフ変換 
            [CV_HOUGH_GRADIENT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.HoughLinesMethod">
            <summary>
            cvHoughLines2で用いる、ハフ変換(直線検出)の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.Standard">
            <summary>
            標準的ハフ変換．
            全ての線分は2つの浮動小数点値 (ρ, θ)で表される．ここでρ は点(0,0) から線分までの距離，θ はx軸と線分の法線が成す角度． 
            そのため，行列（作成されるシーケンス）は，CV_32FC2 タイプとなる．
            [CV_HOUGH_STANDARD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.Probabilistic">
            <summary>
            確率的ハフ変換（画像に長い線が少ない場合に有効）．
            全ての線を返すのではなく，線分を返す． 全ての線分は始点と終点で表され，行列（作成されるシーケンス）は，CV_32SC4 タイプとなる．
            [CV_HOUGH_PROBABILISTIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.HoughLinesMethod.MultiScale">
            <summary>
            マルチスケール型の古典的ハフ変換． 線は CV_HOUGH_STANDARD と同様の方法でエンコードされる． 
            [CV_HOUGH_MULTI_SCALE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.InpaintMethod">
            <summary>
            cvInpaintの修復方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.InpaintMethod.NS">
            <summary>
            ナビエ・ストークス(Navier-Stokes)ベースの手法
            [CV_INPAINT_NS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InpaintMethod.Telea">
            <summary>
            Alexandru Teleaによる手法 
            [CV_INPAINT_TELEA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.InsertPosition">
            <summary>
            cvSeqPushMulti / cvSeqPopMulti で要素を追加する位置
            </summary>
        </member>
        <member name="F:OpenCvSharp.InsertPosition.Back">
            <summary>
            要素をシーケンスの末尾に追加/削除する
            </summary>
        </member>
        <member name="F:OpenCvSharp.InsertPosition.Front">
            <summary>
            要素をシーケンスの先頭に追加/削除する
            </summary>
        </member>
        <member name="T:OpenCvSharp.InvertMethod">
            <summary>
            逆行列を求める手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.LU">
            <summary>
            最適なピボット選択によるガウスの消去法 
            [CV_LU]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Svd">
            <summary>
            特異値分解 
            [CV_SVD]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Eig">
            <summary>
            
            [DECOMP_EIG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.SvdSymmetric">
            <summary>
            対称正定値行列のための特異値分解
            [CV_SVD_SYM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Cholesky">
            <summary>
            
            [CV_CHOLESKY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.QR">
            <summary>
            
            [CV_QR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.InvertMethod.Normal">
            <summary>
            
            [CV_NORMAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.LineType">
            <summary>
            線分の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.Link8">
            <summary>
            8連結による線分
            [= 8]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.Link4">
            <summary>
            4連結による線分
            [= 4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LineType.AntiAlias">
            <summary>
            アンチエイリアスされた線分. ガウシアン（Gaussian）フィルタを用いて描かれる．
            [CV_AA]
            </summary>
        </member>
        <member name="T:OpenCvSharp.LKFlowFlag">
            <summary>
            cvCalcOpticalFlowPyrLKの処理フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.PyrAReady">
            <summary>
            1番目のフレームに対するピラミッドが事前に計算される
            [CV_LKFLOW_PYR_A_READY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.PyrBReady">
            <summary>
            2番目のフレームに対するピラミッドが事前に計算される
            [CV_LKFLOW_PYR_B_READY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.InitialGuesses">
            <summary>
            この関数呼び出し以前に，配列 curr_featuresは特徴の初期座標を持つ
            [CV_LKFLOW_INITIAL_GUESSES]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.InitialFlow">
            <summary>
            この関数呼び出し以前に，配列 curr_featuresは特徴の初期座標を持つ
            [cv::OPTFLOW_USE_INITIAL_FLOW]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LKFlowFlag.GetMinEigenVals">
            <summary>
            
            [CV_LKFLOW_GET_MIN_EIGENVALS]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MatchShapesMethod">
            <summary>
            cvMatchShapesで用いる比較手法
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I1">
            <summary>
            [CV_CONTOURS_MATCH_I1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I2">
            <summary>
            [CV_CONTOURS_MATCH_I2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchShapesMethod.I3">
            <summary>
            [CV_CONTOURS_MATCH_I3]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MatchTemplateMethod">
            <summary>
            テンプレートマッチングの方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.SqDiff">
            <summary>
            [CV_TM_SQDIFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.SqDiffNormed">
            <summary>
            [CV_TM_SQDIFF_NORMED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCorr">
            <summary>
            [CV_TM_CCORR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCorrNormed">
            <summary>
            [CV_TM_CCORR_NORMED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCoeff">
            <summary>
            [CV_TM_CCOEFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatchTemplateMethod.CCoeffNormed">
            <summary>
            [CV_TM_CCOEFF_NORMED]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MatrixType">
            <summary>
            行列要素の種類.
            形式は (S|U|F)&lt;bit_depth&gt;C&lt;number_of_channels&gt; ．
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C1">
            <summary>
            符号なし8ビット整数1チャンネル [CV_8UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C2">
            <summary>
            符号なし8ビット整数2チャンネル [CV_8UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C3">
            <summary>
            符号なし8ビット整数3チャンネル [CV_8UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U8C4">
            <summary>
            符号なし8ビット整数4チャンネル [CV_8UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C1">
            <summary>
            符号あり8ビット整数1チャンネル [CV_8SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C2">
            <summary>
            符号あり8ビット整数2チャンネル [CV_8SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C3">
            <summary>
            符号あり8ビット整数3チャンネル [CV_8SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S8C4">
            <summary>
            符号あり8ビット整数4チャンネル [CV_8SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C1">
            <summary>
            符号なし16ビット整数1チャンネル [CV_16UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C2">
            <summary>
            符号なし16ビット整数2チャンネル [CV_16UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C3">
            <summary>
            符号なし16ビット整数3チャンネル [CV_16UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.U16C4">
            <summary>
            符号なし16ビット整数4チャンネル [CV_16UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C1">
            <summary>
            符号あり16ビット整数1チャンネル [CV_16SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C2">
            <summary>
            符号あり16ビット整数2チャンネル [CV_16SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C3">
            <summary>
            符号あり16ビット整数3チャンネル [CV_16SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S16C4">
            <summary>
            符号あり16ビット整数4チャンネル [CV_16SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C1">
            <summary>
            符号あり32ビット整数1チャンネル [CV_32SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C2">
            <summary>
            符号あり32ビット整数2チャンネル [CV_32SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C3">
            <summary>
            符号あり32ビット整数3チャンネル [CV_32SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.S32C4">
            <summary>
            符号あり32ビット整数4チャンネル [CV_32SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C1">
            <summary>
            32ビット浮動小数点数1チャンネル [CV_32FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C2">
            <summary>
            32ビット浮動小数点数2チャンネル [CV_32FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C3">
            <summary>
            32ビット浮動小数点数3チャンネル [CV_32FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F32C4">
            <summary>
            32ビット浮動小数点数4チャンネル [CV_32FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C1">
            <summary>
            64ビット浮動小数点数1チャンネル [CV_64FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C2">
            <summary>
            64ビット浮動小数点数2チャンネル [CV_64FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C3">
            <summary>
            64ビット浮動小数点数3チャンネル [CV_64FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MatrixType.F64C4">
            <summary>
            64ビット浮動小数点数4チャンネル [CV_64FC4]
            </summary>
        </member>
        <member name="T:OpenCvSharp.MorphologyOperation">
            <summary>
            モルフォロジー演算の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Open">
            <summary>
            オープニング [CV_MOP_OPEN].
            dst=open(src,element)=dilate(erode(src,element),element)
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Close">
            <summary>
            クロージング [CV_MOP_CLOSE].
            dst=close(src,element)=erode(dilate(src,element),element)
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.Gradient">
            <summary>
            モルフォロジー勾配（エッジ検出） [CV_MOP_GRADIENT].
            dst=morph_grad(src,element)=dilate(src,element)-erode(src,element)
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.TopHat">
            <summary>
            トップハット変換(top hat) [CV_MOP_TOPHAT].
            dst=tophat(src,element)=src-open(src,element)
            </summary>
        </member>
        <member name="F:OpenCvSharp.MorphologyOperation.BlackHat">
            <summary>
            ブラックハット変換(black hat) [CV_MOP_BLACKHAT]
            dst=blackhat(src,element)=close(src,element)-src
            </summary>
        </member>
        <member name="T:OpenCvSharp.MulSpectrumsFlag">
            <summary>
            cvMulSpectrumsの変換フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.MulSpectrumsFlag.Rows">
            <summary>
            配列の各行を個別のスペクトラムとして扱う.
            [CV_DXT_ROWS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MulSpectrumsFlag.MulConj">
            <summary>
            乗算の前に2番目の入力配列の共役を計算する.
            [CV_DXT_MUL_CONJ]
            </summary>
        </member>
        <member name="T:OpenCvSharp.NodeType">
            <summary>
            ノードの種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Integer">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Float">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Red">
            <summary>
            not used
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Seq">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Map">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Flow">
            <summary>
            used only for writing structures to YAML format
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.User">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NodeType.Named">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.NormType">
            <summary>
            正規化のタイプ
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.C">
            <summary>
            配列のC-norm（絶対値の最大値）を正規化 
            [CV_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.L1">
            <summary>
            配列のL1-norm（絶対値の合計）を正規化 
            [CV_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.L2">
            <summary>
            配列のL2-norm（ユークリッド距離）を正規化  
            [CV_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.L2SQR">
            <summary>
            [NORM_L2SQR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Hamming">
            <summary>
            [NORM_HAMMING]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Hamming2">
            <summary>
            [NORM_HAMMING2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.NormMask">
            <summary>
            [CV_NORM_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Relative">
            <summary> 
            [CV_RELATIVE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.Diff">
            <summary>
            [CV_DIFF]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.MinMax">
            <summary>
            配列の値が指定の範囲に収まるようにスケーリングとシフトを行う 
            [CV_MINMAX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffC">
            <summary>
            [CV_DIFF_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffL1">
            <summary>
            [CV_DIFF_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.DiffL2">
            <summary>
            [CV_DIFF_L2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeC">
            <summary>
            [CV_RELATIVE_C]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeL1">
            <summary>
            [CV_RELATIVE_L1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.NormType.RelativeL2">
            <summary>
            [CV_RELATIVE_L2]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ReduceDimension">
            <summary>
            cvReduceで、配列をどのように縮小するかを示すインデックス
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Row">
            <summary>
            行列を1行ベクトルに縮小する
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Column">
            <summary>
            行列を1列ベクトルに縮小する
            [= 1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceDimension.Auto">
            <summary>
            出力行列のサイズから次元を解析し，自動的に選択する
            [= -1]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ReduceOperation">
            <summary>
            cvReduceで用いる縮小処理の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Sum">
            <summary>
            出力は各行（または各列）の総和
            [CV_REDUCE_SUM]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Avg">
            <summary>
            出力は各行（または各列）の平均ベクトル
            [CV_REDUCE_AVG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Max">
            <summary>
            出力は各行（または各列）における最大値
            [CV_REDUCE_MAX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ReduceOperation.Min">
            <summary>
            出力は各行（または各列）における最小値
            [CV_REDUCE_MIN]
            </summary>
        </member>
        <member name="T:OpenCvSharp.RotateEdgeFlag">
            <summary>
            cvSubdiv2DRotateEdgeにおける辺の関係の指定（入力された辺と同じquad-edgeのどの辺を返すかを指定）
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Input">
            <summary>
            入力の辺（eが入力された場合, 上図の e 自身） 
            [= 0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Rotate">
            <summary>
            回転された辺（eRot）
            [= 1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.Reverse">
            <summary>
            反転された辺（eの反転（緑で表示））
            [= 2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.RotateEdgeFlag.ReverseRotate">
            <summary>
            反転と回転された辺（eRotの反転（緑で表示））
            [= 3] 
            </summary>
        </member>
        <member name="T:OpenCvSharp.SeqType">
            <summary>
            CvSeqのさまざまな特性. EltypeXXX | KindXXXというようにして指定する.
            上位16ビットで個々の動的特性と，シーケンスに関するその他の雑多な情報を持つ．
            下位CV_SEQ_ELTYPE_BITS ビットは，要素タイプのIDを示す．
            </summary>    
        </member>
        <member name="F:OpenCvSharp.SeqType.Zero">
            <summary>
            特定のシーケンスタイプを引数にとるような関数に一切渡されない場合はこの値を指定してもかまわない
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePoint">
            <summary>
            (x,y) [CV_SEQ_ELTYPE_POINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeCode">
            <summary>
            フリーマンコード: 0..7 [CV_SEQ_ELTYPE_CODE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGeneric">
            <summary>
            一般的なシーケンス要素タイプ [CV_SEQ_ELTYPE_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePtr">
            <summary>
            =6 [CV_SEQ_ELTYPE_PTR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePPoint">
            <summary>
            &amp;elem: 他のシーケンス要素へのポインタ [CV_SEQ_ELTYPE_PPOINT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeIndex">
            <summary>
            #elem: 他のシーケンス要素のインデックス [CV_SEQ_ELTYPE_INDEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGraphEdge">
            <summary>
            &amp;next_o, &amp;next_d, &amp;vtx_o, &amp;vtx_d [CV_SEQ_ELTYPE_GRAPH_EDGE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeGraphVertex">
            <summary>
            先頭の辺, &amp;(x,y) [CV_SEQ_ELTYPE_GRAPH_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeTrianAtr">
            <summary>
            二分木の頂点（ノード） [CV_SEQ_ELTYPE_TRIAN_ATR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeConnectedComp">
            <summary>
            接続成分 [CV_SEQ_ELTYPE_CONNECTED_COMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypePoint3D">
            <summary>
            (x,y,z) [CV_SEQ_ELTYPE_POINT3D]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C1">
            <summary>
            符号なし8ビット整数1チャンネル [CV_8UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C2">
            <summary>
            符号なし8ビット整数2チャンネル [CV_8UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C3">
            <summary>
            符号なし8ビット整数3チャンネル [CV_8UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU8C4">
            <summary>
            符号なし8ビット整数4チャンネル [CV_8UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C1">
            <summary>
            符号あり8ビット整数1チャンネル [CV_8SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C2">
            <summary>
            符号あり8ビット整数2チャンネル [CV_8SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C3">
            <summary>
            符号あり8ビット整数3チャンネル [CV_8SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS8C4">
            <summary>
            符号あり8ビット整数4チャンネル [CV_8SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C1">
            <summary>
            符号なし16ビット整数1チャンネル [CV_16UC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C2">
            <summary>
            符号なし16ビット整数2チャンネル [CV_16UC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C3">
            <summary>
            符号なし16ビット整数3チャンネル [CV_16UC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeU16C4">
            <summary>
            符号なし16ビット整数4チャンネル [CV_16UC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C1">
            <summary>
            符号あり16ビット整数1チャンネル [CV_16SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C2">
            <summary>
            符号あり16ビット整数2チャンネル [CV_16SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C3">
            <summary>
            符号あり16ビット整数3チャンネル [CV_16SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS16C4">
            <summary>
            符号あり16ビット整数4チャンネル [CV_16SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C1">
            <summary>
            符号あり32ビット整数1チャンネル [CV_32SC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C2">
            <summary>
            符号あり32ビット整数2チャンネル [CV_32SC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C3">
            <summary>
            符号あり32ビット整数3チャンネル [CV_32SC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeS32C4">
            <summary>
            符号あり32ビット整数4チャンネル [CV_32SC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C1">
            <summary>
            32ビット浮動小数点数1チャンネル [CV_32FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C2">
            <summary>
            32ビット浮動小数点数2チャンネル [CV_32FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C3">
            <summary>
            32ビット浮動小数点数3チャンネル [CV_32FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF32C4">
            <summary>
            32ビット浮動小数点数4チャンネル [CV_32FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C1">
            <summary>
            64ビット浮動小数点数1チャンネル [CV_64FC1]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C2">
            <summary>
            64ビット浮動小数点数2チャンネル [CV_64FC2]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C3">
            <summary>
            64ビット浮動小数点数3チャンネル [CV_64FC3]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.EltypeF64C4">
            <summary>
            64ビット浮動小数点数4チャンネル [CV_64FC4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindGeneric">
            <summary>
            [CV_SEQ_KIND_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindCurve">
            <summary>
            [CV_SEQ_KIND_GENERIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindBinaryTree">
            <summary>
            [CV_SEQ_KIND_BIN_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindGraph">
            <summary>
            [CV_SEQ_KIND_GRAPH]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.KindSubdiv2D">
            <summary>
            [CV_SEQ_KIND_SUBDIV2D]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagClosed">
            <summary>
            flags for curves [CV_SEQ_FLAG_CLOSED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagSimple">
            <summary>
            flags for curves [CV_SEQ_FLAG_SIMPLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagConvex">
            <summary>
            flags for curves [CV_SEQ_FLAG_CONVEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.FlagHole">
            <summary>
            flags for curves [CV_SEQ_FLAG_HOLE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Oriented">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Graph">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.OrientedGraph">
            <summary>
            flags for graphs [CV_GRAPH_FLAG_ORIENTED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PointSet">
            <summary>
            point sets [CV_SEQ_POINT_SET]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Point3DSet">
            <summary>
            point sets [CV_SEQ_POINT3D_SET]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PolyLine">
            <summary>
            point sets [CV_SEQ_POLYLINE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Polygon">
            <summary>
            point sets [CV_SEQ_POLYGON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Contour">
            <summary>
            point sets [CV_SEQ_CONTOUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.SimplePolygon">
            <summary>
            point sets [CV_SEQ_SIMPLE_POLYGON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Chain">
            <summary>
            chain-coded curves [CV_SEQ_CHAIN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.ChainContour">
            <summary>
            chain-coded curves [CV_SEQ_CHAIN_CONTOUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.PolygonTree">
            <summary>
            binary tree for the contour [CV_SEQ_POLYGON_TREE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.ConnextedComp">
            <summary>
            sequence of the connected components [CV_SEQ_CONNECTED_COMP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SeqType.Index">
             <summary>
            sequence of the integer numbers [CV_SEQ_INDEX]
             </summary>
        </member>
        <member name="T:OpenCvSharp.SmoothType">
            <summary>
            平滑化の方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.BlurNoScale">
            <summary>
            スケーリングなしの単純平滑化。ピクセルのparam1*param2隣接の総和。
            [CV_BLUR_NO_SCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Blur">
            <summary>
            単純平滑化。ピクセルのparam1*param2隣接の総和を計算した後、1/(param1*param2)によってスケーリングする。
            [CV_BLUR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Gaussian">
            <summary>
            ガウシアン平滑化。画像とサイズparam1*param2のガウシアンカーネルの畳み込み。
            [CV_GAUSSIAN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Median">
            <summary>
            中央値平滑化。param1*param1隣接の中央値の取得。
            [CV_MEDIAN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SmoothType.Bilateral">
            <summary>
            エッジ保持平滑化フィルタ。色(輝度値)についてsigma=param1と領域(距離)についてsigma=param2を持つ3*3のバイラテラルフィルタを適用する。
            [CV_BILATERAL]
            </summary>
        </member>
        <member name="T:OpenCvSharp.SortFlag">
            <summary>
            cvSortで用いる、配列の並び順指定
            </summary>
        </member>
        <member name="T:OpenCvSharp.StereoBMPreset">
            <summary>
            あらかじめ定義された, CreateStereoBMStateのパラメータのID．
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.Basic">
            <summary>
            [CV_STEREO_BM_BASIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.FishEye">
            <summary>
            [CV_STEREO_BM_FISH_EYE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.StereoBMPreset.Narrow">
            <summary>
            [CV_STEREO_BM_NARROW]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DPointLocation">
            <summary>
            cvSubdiv2DLocateによる点の配置の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Error">
            <summary>
            入力の引数が正しくない 
            [CV_PTLOC_ERROR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.OutsideRect">
            <summary>
            点は細分割平面の参照矩形の外にある 
            [CV_PTLOC_OUTSIDE_RECT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Inside">
            <summary>
            点は小平面内に存在する 
            [CV_PTLOC_INSIDE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.Vertex">
            <summary>
            点は細分割平面内の頂点と一致する 
            [CV_PTLOC_VERTEX]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPointLocation.OnEdge">
            <summary>
            点は辺上に存在する 
            [CV_PTLOC_ON_EDGE]
            </summary>
        </member>
        <member name="T:OpenCvSharp.SVDFlag">
            <summary>
            cvSVDの操作フラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.Zero">
            <summary>
            フラグ指定なし 
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.None">
            <summary>
            フラグ指定なし 
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.ModifyA">
            <summary>
            計算中に行列Aの変更を行うことができる．このフラグの指定は処理速度を向上させる．
            [CV_SVD_MODIFY_A]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.U_T">
            <summary>
            Uの転置行列を返すことを意味する．このフラグの指定は処理速度を向上させる．
            [CV_SVD_U_T]
            </summary>
        </member>
        <member name="F:OpenCvSharp.SVDFlag.V_T">
            <summary>
            Vの転置行列を返すことを意味する．このフラグの指定は処理速度を向上させる．
            [CV_SVD_V_T]
            </summary>
        </member>
        <member name="T:OpenCvSharp.ThresholdType">
            <summary>
            閾値処理の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Binary">
            <summary>
            [CV_THRESH_BINARY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.BinaryInv">
            <summary>
            [CV_THRESH_BINARY_INV]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Truncate">
            <summary>
            [CV_THRESH_TRUNC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.ToZero">
            <summary>
            [CV_THRESH_TOZERO]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.ToZeroInv">
            <summary>
            [CV_THRESH_TOZERO_INV]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Mask">
            <summary>
            [CV_THRESH_MASK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.ThresholdType.Otsu">
            <summary>
            大津の手法
            [CV_THRESH_OTSU]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCapture">
            <summary>
            ビデオキャプチャ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCapture.captureType">
            <summary>
            キャプチャの種類 (File or Camera)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvCapture.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.Int32)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="index">使われるカメラのインデックス．使用するカメラが1台のとき，あるいは，何台のカメラを使うかが重要でないときは，-1 でも問題ない場合もある.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(OpenCvSharp.CaptureDevice)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="device">使われるカメラの種類</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="device">使われるカメラの種類</param>
            <param name="index">使われるカメラのインデックス．使用するカメラが1台のとき，あるいは，何台のカメラを使うかが重要でないときは，-1 でも問題ない場合もある.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(System.Int32)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="index">使われるカメラのインデックス．使用するカメラが１台のとき，あるいは，何台のカメラを使うかが重要でないときは，-1 でも問題ない場合もある.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(OpenCvSharp.CaptureDevice)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="device">使われるカメラの種類</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromCamera(OpenCvSharp.CaptureDevice,System.Int32)">
            <summary>
            カメラからのビデオキャプチャを初期化する.
            Windows では，次の二つのカメラインタフェースが利用できる：Video for Windows（VFW），Matrox Imaging Library（MIL）． 
            Linux では，次の二つカメラインタフェースが利用できる：Video for Linux（V4L），FireWire（IEEE1394）． 
            </summary>
            <param name="device">使われるカメラの種類</param>
            <param name="index">使われるカメラのインデックス．使用するカメラが1台のとき，あるいは，何台のカメラを使うかが重要でないときは，-1 でも問題ない場合もある.</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.String)">
            <summary>
            ファイルからのビデオキャプチャを初期化する
            </summary>
            <param name="fileName">ビデオファイル名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.FromFile(System.String)">
            <summary>
            ファイルからのビデオキャプチャを初期化する
            </summary>
            <param name="filename">ビデオファイル名</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvCapture*</param>
        </member>
        <member name="M:OpenCvSharp.CvCapture.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GetCaptureProperty(OpenCvSharp.CaptureProperty)">
            <summary>
            ビデオキャプチャのプロパティを取得する
            </summary>
            <param name="propertyId">プロパティID</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GetCaptureProperty(System.Int32)">
            <summary>
            ビデオキャプチャのプロパティを取得する
            </summary>
            <param name="propertyId">プロパティID</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.GrabFrame">
            <summary>
            カメラやファイルからフレームを取り出す．取り出されたフレームは内部的に保存される．
            取り出されたフレームをユーザ側で利用するためには，cvRetrieveFrame を用いるべきである．
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.QueryFrame">
            <summary>
            カメラやビデオファイルから一つのフレームを取り出し，それを展開して返す．
            この関数は，単純にcvGrabFrame とcvRetrieveFrame をまとめて呼び出しているだけである．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame(System.Int32)">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.RetrieveFrame(OpenCvSharp.CameraChannels)">
            <summary>
            GrabFrame 関数によって取り出された画像への参照を返す．
            返された画像は，ユーザが解放したり，変更したりするべきではない．
            </summary>
            <param name="streamIdx">non-zero streamIdx is only valid for multi-head camera live streams</param>
            <returns>1フレームの画像 (GC禁止フラグが立っている). キャプチャできなかった場合はnull.</returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.SetCaptureProperty(OpenCvSharp.CaptureProperty,System.Double)">
            <summary>
            ビデオキャプチャのプロパティをセットする
            </summary>
            <param name="propertyId">プロパティID</param>
            <param name="value">プロパティの値</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvCapture.SetCaptureProperty(System.Int32,System.Double)">
            <summary>
            ビデオキャプチャのプロパティをセットする
            </summary>
            <param name="propertyId">プロパティID</param>
            <param name="value">プロパティの値</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvCapture.CaptureType">
            <summary>
            キャプチャの種類 (File or Camera)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosMsec">
            <summary>
            ファイル中の現在の位置（ミリ秒単位），あるいはビデオキャプチャのタイムスタンプ値を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosFrames">
            <summary>
            次にデコード/キャプチャされるフレームのインデックス(0からはじまる)を取得・設定する（設定はビデオファイルのみ）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PosAviRatio">
            <summary>
            ビデオファイル内の相対的な位置を取得・設定する（設定はビデオファイルのみ）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameWidth">
            <summary>
            ビデオストリーム中のフレームの幅を取得・設定する（設定はカメラのみ）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameHeight">
            <summary>
            ビデオストリーム中のフレームの高さを取得・設定する（設定はカメラのみ）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Fps">
            <summary>
            フレームレートを取得・設定する（設定はカメラのみ）
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FourCC">
            <summary>
            コーデックを表す4文字を取得・設定する（設定はカメラのみ）.
            例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.FrameCount">
            <summary>
            ビデオファイル中のフレーム数を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Brightness">
            <summary>
            明度を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Contrast">
            <summary>
            コンストラストを取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Saturation">
            <summary>
            彩度を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Hue">
            <summary>
            色相を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Format">
            <summary>
            retrieve() によって返されるMat オブジェクトのフォーマット．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Mode">
            <summary>
            現在のキャプチャモードを表す，バックエンド固有の値．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Gain">
            <summary>
            画像のゲイン（カメラの場合のみ）．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Exposure">
            <summary>
            露出（カメラの場合のみ）．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.ConvertRgb">
            <summary>
            画像がRGBに変換されるか否かを表す，ブール値のフラグ．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.WhiteBalance">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Rectification">
            <summary>
            TOWRITE（注意：現在のところ，DC1394 v 2.x バックエンドでのみサポートされます）．
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Monocrome">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Sharpness">
            <summary>
            
            [CV_CAP_PROP_SHARPNESS]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.AutoExposure">
            <summary>
            exposure control done by camera,
            user can adjust refernce level using this feature
            [CV_CAP_PROP_AUTO_EXPOSURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Gamma">
            <summary>
            
            [CV_CAP_PROP_GAMMA]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Temperature">
            <summary>
            
            [CV_CAP_PROP_TEMPERATURE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.Trigger">
            <summary>
            
            [CV_CAP_PROP_TRIGGER]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.TriggerDelay">
            <summary>
            
            [CV_CAP_PROP_TRIGGER_DELAY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.WhiteBalanceRedV">
            <summary>
            
            [CV_CAP_PROP_WHITE_BALANCE_RED_V]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.MaxDC1394">
            <summary>
            
            [CV_CAP_PROP_MAX_DC1394]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.AutoGrab">
            <summary>
            property for highgui class CvCapture_Android only
            [CV_CAP_PROP_AUTOGRAB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.SupportedPreviewSizesString">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PreviewFormat">
            <summary>
            readonly, tricky property, returns cpnst char* indeed
            [CV_CAP_PROP_PREVIEW_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_OutputMode">
            <summary>
            
            [CV_CAP_PROP_OPENNI_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_FrameMaxDepth">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_Baseline">
            <summary>
            in mm
            [CV_CAP_PROP_OPENNI_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_FocalLength">
            <summary>
            in pixels
            [CV_CAP_PROP_OPENNI_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_RegistrationON">
            <summary>
            flag
            [CV_CAP_PROP_OPENNI_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_Registratiob">
            <summary>
            flag that synchronizes the remapping depth map to image map
            by changing depth generator's view point (if the flag is "on") or
            sets this view point to its normal one (if the flag is "off").
            [CV_CAP_PROP_OPENNI_REGISTRATION]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_ImageGeneratorOutputMode">
            <summary>
            
            [CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorBaseline">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorFocalLength">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.OpenNI_DepthGeneratorRegistrationON">
            <summary>
            
            [CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.GStreamerQueueLength">
            <summary>
            default is 1
            [CV_CAP_GSTREAMER_QUEUE_LENGTH]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.PvAPIMulticastIP">
            <summary>
            ip for anable multicast master mode. 0 for disable multicast
            [CV_CAP_PROP_PVAPI_MULTICASTIP]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_Downsampling">
            <summary>
            Change image resolution by binning or skipping.  
            [CV_CAP_PROP_XI_DOWNSAMPLING]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_DataFormat">
            <summary>
            Output data format.
            [CV_CAP_PROP_XI_DATA_FORMAT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_OffsetX">
            <summary>
            Horizontal offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_X]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_OffsetY">
            <summary>
            Vertical offset from the origin to the area of interest (in pixels).
            [CV_CAP_PROP_XI_OFFSET_Y]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_TrgSource">
            <summary>
            Defines source of trigger.
            [CV_CAP_PROP_XI_TRG_SOURCE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_TrgSoftware">
            <summary>
            Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.
            [CV_CAP_PROP_XI_TRG_SOFTWARE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiSelector">
            <summary>
            Selects general purpose input
            [CV_CAP_PROP_XI_GPI_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiMode">
            <summary>
            Set general purpose input mode
            [CV_CAP_PROP_XI_GPI_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpiLevel">
            <summary>
            Get general purpose level
            [CV_CAP_PROP_XI_GPI_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpoSelector">
            <summary>
            Selects general purpose output 
            [CV_CAP_PROP_XI_GPO_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_GpoMode">
            <summary>
            Set general purpose output mode
            [CV_CAP_PROP_XI_GPO_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_LedSelector">
            <summary>
            Selects camera signalling LED 
            [CV_CAP_PROP_XI_LED_SELECTOR]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_LedMode">
            <summary>
            Define camera signalling LED functionality
            [CV_CAP_PROP_XI_LED_MODE]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_ManualWB">
            <summary>
            Calculates White Balance(must be called during acquisition)
            [CV_CAP_PROP_XI_MANUAL_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AutoWB">
            <summary>
            Automatic white balance
            [CV_CAP_PROP_XI_AUTO_WB]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEAG">
            <summary>
            Automatic exposure/gain
            [CV_CAP_PROP_XI_AEAG]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_ExpPriority">
            <summary>
            Exposure priority (0.5 - exposure 50%, gain 50%).
            [CV_CAP_PROP_XI_EXP_PRIORITY]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEMaxLimit">
            <summary>
            Maximum limit of exposure in AEAG procedure
            [CV_CAP_PROP_XI_AE_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AGMaxLimit">
            <summary>
            Maximum limit of gain in AEAG procedure
            [CV_CAP_PROP_XI_AG_MAX_LIMIT]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_AEAGLevel">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_AEAG_LEVEL]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvCapture.XI_Timeout">
            <summary>
            default is 1
            [CV_CAP_PROP_XI_TIMEOUT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvCapture.IntBytes">
            <summary>
            Int32の各バイトにアクセスしやすくするための共用体
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvVideoWriter">
            <summary>
            AVIビデオを出力するためのライタ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvVideoWriter.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.String,System.Double,OpenCvSharp.CvSize)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.String,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <param name="isColor">trueの場合，エンコーダはカラーフレームとしてエンコードする． falseの場合，グレースケールフレームとして動作する（現在のところ，このフラグは Windows でのみ利用できる）．</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CvSize)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,OpenCvSharp.FourCC,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <param name="isColor">trueの場合，エンコーダはカラーフレームとしてエンコードする． falseの場合，グレースケールフレームとして動作する（現在のところ，このフラグは Windows でのみ利用できる）．</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCvSharp.CvSize)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.String,System.Int32,System.Double,OpenCvSharp.CvSize,System.Boolean)">
            <summary>
            ビデオライタを作成し、返す.
            </summary>
            <param name="filename">出力するビデオファイルの名前</param>
            <param name="fourcc">
            フレームを圧縮するためのコーデックを表す 4 文字．例えば，"PIM1" は，MPEG-1 コーデック， "MJPG" は，motion-jpeg コーデックである． 
            Win32 環境下では，null を渡すとダイアログから圧縮方法と圧縮のパラメータを選択できるようになる. 
            </param>
            <param name="fps">作成されたビデオストリームのフレームレート</param>
            <param name="frameSize">ビデオフレームのサイズ</param>
            <param name="isColor">trueの場合，エンコーダはカラーフレームとしてエンコードする． falseの場合，グレースケールフレームとして動作する（現在のところ，このフラグは Windows でのみ利用できる）．</param>
            <returns>CvVideoWriter</returns>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">CvVideoWriter*</param>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvVideoWriter.WriteFrame(OpenCvSharp.IplImage)">
            <summary>
            一つのフレームをビデオファイルに書き込む/追加する
            </summary>
            <param name="image">書き込まれるフレーム</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.FileName">
            <summary>
            出力するビデオファイルの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.Fps">
            <summary>
            作成されたビデオストリームのフレームレートを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.FrameSize">
            <summary>
            ビデオフレームのサイズを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvVideoWriter.IsColor">
            <summary>
            カラーフレームかどうかの値を取得する
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvLineSegmentPolar">
            <summary>
            cvHoughLines2で得られる、極座標系で表現される線分
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPolar.Rho">
            <summary>
            線分の長さ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPolar.Theta">
            <summary>
            線分の角度(ラジアン)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.#ctor(System.Single,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="rho">線分の長さ</param>
            <param name="theta">線分の角度(ラジアン)</param>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.Equals(OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.op_Equality(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.op_Inequality(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.LineIntersection(OpenCvSharp.CvLineSegmentPolar,OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            2直線の交点を求める
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.LineIntersection(OpenCvSharp.CvLineSegmentPolar)">
            <summary>
            2直線の交点を求める (線分としてではなく直線として)
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPoint(System.Double)">
            <summary>
            CvLineSegmentPointに変換する
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPointX(System.Int32,System.Int32)">
            <summary>
            指定したx座標を両端とするような線分に変換する
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.ToSegmentPointY(System.Int32,System.Int32)">
            <summary>
            指定したy座標を両端とするような線分に変換する
            </summary>
            <param name="y1"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.XPosOfLine(System.Int32)">
            <summary>
            指定したy座標を通るときのx座標を求める
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPolar.YPosOfLine(System.Int32)">
            <summary>
            指定したx座標を通るときのy座標を求める
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvSlice">
            <summary>
            シーケンスのスライス
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.SizeOf">
            <summary>
            sizeof(CvSlice)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.WholeSeqEndIndex">
            <summary>
            シーケンス全体をあらわすスライスのスライス長を取得する
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.StartIndex">
            <summary>
            スライスの先頭値
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.EndIndex">
            <summary>
            スライスの終端値
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSlice.WholeSeq">
            <summary>
            シーケンス全体をあらわすスライスを取得する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSlice.#ctor(System.Int32,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:OpenCvSharp.CvSlice.SliceLength(OpenCvSharp.CvSeq)">
            <summary>
            シーケンスのスライス長を計算する
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.op_Equality(OpenCvSharp.CvSlice,OpenCvSharp.CvSlice)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.op_Inequality(OpenCvSharp.CvSlice,OpenCvSharp.CvSlice)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.Equals(OpenCvSharp.CvSlice)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvSlice.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            4辺の内の一つ．実体はUInt32であり、暗黙のキャストが定義されている.
            下位2ビットはインデックス（0...3）で, 上位ビットは4辺へのポインタ．
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DEdge.Value">
            <summary>
            実体データ (size_t型)
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.UInt32)">
            <summary>
            初期化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.UInt64)">
            <summary>
            初期化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.#ctor(System.IntPtr)">
            <summary>
            初期化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.UInt32">
            <summary>
            CvSubdiv2DEdgeからuintへの暗黙のキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.UInt64">
            <summary>
            CvSubdiv2DEdgeからulongへの暗黙のキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(OpenCvSharp.CvSubdiv2DEdge)~System.IntPtr">
            <summary>
            CvSubdiv2DEdgeからIntPtrへの暗黙のキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.UInt32)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            uintからCvSubdiv2DEdgeへの暗黙のキャスト
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.UInt64)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            ulongからCvSubdiv2DEdgeへの暗黙のキャスト
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.op_Implicit(System.IntPtr)~OpenCvSharp.CvSubdiv2DEdge">
            <summary>
            IntPtrからCvSubdiv2DEdgeへの暗黙のキャスト
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.GetEdge(OpenCvSharp.CvNextEdgeType)">
            <summary>
            入力された辺に関連する辺の一つを返す (cvSubdiv2DGetEdge).
            </summary>
            <param name="type">戻り値とする辺の条件</param>
            <returns>与えられた辺に関連する辺の一つ</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.Dst">
            <summary>
            辺の終点を返す (cvSubdiv2DEdgeDst)．
            仮想点は関数 cvCalcSubdivVoronoi2D を用いて計算される.
            </summary>
            <returns>辺の終点. 辺が双対細分割のものであり，仮想点の座標がまだ計算されていない場合は，nullを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.Org">
            <summary>
            辺の始点を返す (cvSubdiv2DEdgeOrg)． 
            仮想点は関数 cvCalcSubdivVoronoi2D を用いて計算される.
            </summary>
            <returns>辺の始点. 辺が双対細分割のものであり，仮想点の座標がまだ計算されていない場合は，nullを返す．</returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.RotateEdge(OpenCvSharp.RotateEdgeFlag)">
            <summary>
            入力された辺を含むquad-edge中の辺の一つを返す (cvSubdiv2DRotateEdge)．
            </summary>
            <param name="rotate">関係の指定（入力された辺と同じquad-edgeのどの辺を返すかを指定）</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DEdge.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvSubdiv2DPoint">
            <summary>
            オリジナルの細分割と双対細分割の点を表すクラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.#ctor(System.Void*)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.FromPtr(System.IntPtr)">
            <summary>
            ポインタからオブジェクトを生成して返す
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSubdiv2DPoint.op_Explicit(System.IntPtr)~OpenCvSharp.CvSubdiv2DPoint">
            <summary>
            ポインタからの明示的なキャスト
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.CvSubdiv2DPoint.SizeOf">
            <summary>
            sizeof(CvSubdiv2DPoint) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.Flags">
            <summary>
            様々なフラグ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.First">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.Pt">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvSubdiv2DPoint.ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvNextEdgeType">
            <summary>
            cvSubdiv2DGetEdgeの戻り値とする辺の条件
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundOrg">
            <summary>
            入力された辺の始点の近傍にある次の辺（eが入力のとき，上図のeOnext）
            [CV_NEXT_AROUND_ORG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundDst">
            <summary>
            入力された辺の終点の近傍にある次の辺（eDnext） 
            [CV_NEXT_AROUND_DST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundOrg">
            <summary>
            入力された辺の始点の近傍にある一つ前の辺（eRnext の反転）
            [CV_PREV_AROUND_ORG]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundDst">
            <summary>
            入力された辺の終点の近傍にある一つ前の辺（eLnext の反転）
            [CV_PREV_AROUND_DST]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundLeft">
            <summary>
            入力された辺を含む左面の次の辺 （eLnext）
            [CV_NEXT_AROUND_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.NextAroundRight">
            <summary>
            入力された辺を含む右面の次の辺（eRnext） 
            [CV_NEXT_AROUND_RIGHT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundLeft">
            <summary>
            入力された辺を含む左面の一つ前の辺（eOnext の反転）
            [CV_PREV_AROUND_LEFT]
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvNextEdgeType.PrevAroundRight">
            <summary>
            入力された辺を含む右面の一つ前の辺（eDnext の反転）
            [CV_PREV_AROUND_RIGHT]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSURFPoint">
            <summary>
            cvExtractSURFで出力されるキーポイント
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Pt">
            <summary>
            画像中の特徴点の位置
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Laplacian">
             <summary>
            -1，0，+1．その点におけるラプラシアンの符号．
             特徴点の比較を高速化するために用いられる
             （通常，ラプラシアンの符号が異なる特徴同士は一致しない）
             </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Size">
            <summary>
            特徴のサイズ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Dir">
            <summary>
            特徴の方向：0~360度
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSURFPoint.Hessian">
            <summary>
            ヘッシアン：ヘッセ行列の行列式
            （特徴の強さのおおよその推定に用いられる．params.hessianThreshold を参照）
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.#ctor(OpenCvSharp.CvPoint2D32f,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            初期化
            </summary>
            <param name="pt">画像中の特徴点の位置</param>
            <param name="laplacian">-1，0，+1．その点におけるラプラシアンの符号．
            特徴点の比較を高速化するために用いられる
            （通常，ラプラシアンの符号が異なる特徴同士は一致しない）</param>
            <param name="size">特徴のサイズ</param>
            <param name="dir">特徴の方向：0~360度</param>
            <param name="hessian">ヘッシアン：ヘッセ行列の行列式（特徴の強さのおおよその推定に用いられる．params.hessianThreshold を参照）</param>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.#ctor(System.IntPtr)">
            <summary>
            CvSURFPoint*から初期化
            </summary>
            <param name="ptr">CvSURFPoint*</param>
        </member>
        <member name="M:OpenCvSharp.CvSURFPoint.FromPtr(System.IntPtr)">
            <summary>
            IntPtrからCvSURFPointへ変換して返す. 引数のポインタの実体がCvSURFPoint*でなければならない.
            </summary>
            <param name="ptr">IntPtr</param>
            <returns>CvSURFPoint</returns>
        </member>
        <member name="T:OpenCvSharp.CvTermCriteria">
            <summary>
            反復アルゴリズムのための終了条件
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.SizeOf">
            <summary>
            sizeof(CvTermCriteria)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.Type">
            <summary>
            終了条件の種類
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.MaxIter">
            <summary>
            反復回数
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTermCriteria.Epsilon">
            <summary>
            目標精度
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Int32)">
            <summary>
            反復回数による終了条件を設定して初期化
            </summary>
            <param name="maxIter">反復数の最大値</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Double)">
            <summary>
            目標精度による終了条件を設定して初期化
            </summary>
            <param name="epsilon">目標精度</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(System.Int32,System.Double)">
            <summary>
            繰り返し回数と目標精度による終了条件を設定して初期化
            </summary>yy
            <param name="maxIter">反復数の最大値</param>
            <param name="epsilon">目標精度</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.#ctor(OpenCvSharp.CriteriaType,System.Int32,System.Double)">
            <summary>
            すべて指定して初期化
            </summary>
            <param name="type">終了条件</param>
            <param name="maxIter">反復数の最大値</param>
            <param name="epsilon">目標精度</param>
        </member>
        <member name="M:OpenCvSharp.CvTermCriteria.Check(System.Double,System.Int32)">
            <summary>
            終了条件をチェックし，type= Iteration|Epsilon に設定し，反復数の max_iterとeprilon の両方が有効になるように変換する
            </summary>
            <param name="defaultEps"></param>
            <param name="defaultMaxIters"></param>
            <returns>変換結果</returns>
        </member>
        <member name="T:OpenCvSharp.CvSize2D32f">
            <summary>
            矩形のサブピクセル精度でのサイズ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.SizeOf">
            <summary>
            sizeof(CvSize2D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Width">
            <summary>
            矩形の幅
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Height">
            <summary>
            矩形の高さ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize2D32f.Empty">
            <summary>
            プロパティを初期化しない状態の CvSize2D32f 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.#ctor(System.Single,System.Single)">
            <summary>
            初期化 
            </summary>
            <param name="width">矩形の幅</param>
            <param name="height">矩形の高さ</param>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Implicit(OpenCvSharp.CvSize2D32f)~OpenCvSharp.CvSize">
            <summary>
            CvSize への暗黙のキャスト
            </summary>
            <param name="self">新しい CvSize の値を指定する CvSize2D32f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Implicit(OpenCvSharp.CvSize)~OpenCvSharp.CvSize2D32f">
            <summary>
            CvSize からの明示的なキャスト
            </summary>
            <param name="obj">新しい CvSize2D32f の値を指定する CvSize</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.Equals(OpenCvSharp.CvSize2D32f)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Equality(OpenCvSharp.CvSize2D32f,OpenCvSharp.CvSize2D32f)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.op_Inequality(OpenCvSharp.CvSize2D32f,OpenCvSharp.CvSize2D32f)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize2D32f.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint2D64f">
            <summary>
            浮動小数点型（倍精度）座標系による2次元の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.SizeOf">
            <summary>
            sizeof(CvPoint2D64f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D64f.Empty">
            <summary>
            プロパティを初期化しない状態の CvPoint2D64f 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.#ctor(System.Double,System.Double)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D64f)~OpenCvSharp.CvPoint">
            <summary>
            CvPointへの暗黙のキャスト
            </summary>
            <param name="self">新しい CvPoint の値を指定する CvPoint2D64f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint)~OpenCvSharp.CvPoint2D64f">
            <summary>
            CvPointからの明示的なキャスト
            </summary>
            <param name="p">新しい CvPoint2D64f の値を指定する CvPoint</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D64f)~OpenCvSharp.CvPoint2D32f">
            <summary>
            CvPoint2D32fへの暗黙のキャスト
            </summary>
            <param name="self">新しい CvPoint2D32f の値を指定する CvPoint2D64f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Implicit(OpenCvSharp.CvPoint2D32f)~OpenCvSharp.CvPoint2D64f">
            <summary>
            CvPoint2D32fからの明示的なキャスト
            </summary>
            <param name="p">新しい CvPoint2D64f の値を指定する CvPoint2D32f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.Equals(OpenCvSharp.CvPoint2D64f)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Equality(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            == 演算子のオーバーロード。x,y座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Inequality(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            != 演算子のオーバーロード。x,y座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_UnaryPlus(OpenCvSharp.CvPoint2D64f)">
            <summary>
            単項プラス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_UnaryNegation(OpenCvSharp.CvPoint2D64f)">
            <summary>
            単項マイナス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Addition(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Subtraction(OpenCvSharp.CvPoint2D64f,OpenCvSharp.CvPoint2D64f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.op_Multiply(OpenCvSharp.CvPoint2D64f,System.Double)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D64f.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint3D32f">
            <summary>
            浮動小数点型（単精度）座標系による3次元の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.SizeOf">
            <summary>
            sizeof(CvPoint3D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Z">
            <summary>
            z座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D32f.Empty">
            <summary>
            プロパティを初期化しない状態の CvPoint3D32f 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="z">z座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="z">z座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.Equals(OpenCvSharp.CvPoint3D32f)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Equality(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            == 演算子のオーバーロード。x, y, z座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Inequality(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            != 演算子のオーバーロード。x, y, z座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_UnaryPlus(OpenCvSharp.CvPoint3D32f)">
            <summary>
            単項プラス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_UnaryNegation(OpenCvSharp.CvPoint3D32f)">
            <summary>
            単項マイナス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Addition(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Subtraction(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.op_Multiply(OpenCvSharp.CvPoint3D32f,System.Double)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.Distance(OpenCvSharp.CvPoint3D32f,OpenCvSharp.CvPoint3D32f)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D32f.DistanceTo(OpenCvSharp.CvPoint3D32f)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint3D64f">
            <summary>
            浮動小数点型（倍精度）座標系による3次元の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.SizeOf">
            <summary>
            sizeof(CvPoint3D64f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Z">
            <summary>
            z座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint3D64f.Empty">
            <summary>
            プロパティを初期化しない状態の CvPoint3D64f 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="z">z座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Implicit(OpenCvSharp.CvPoint3D64f)~OpenCvSharp.CvPoint3D32f">
            <summary>
            CvPoint3D32fへの暗黙のキャスト
            </summary>
            <param name="self">新しい CvPoint3D32f の値を指定する CvPoint3D64f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Implicit(OpenCvSharp.CvPoint3D32f)~OpenCvSharp.CvPoint3D64f">
            <summary>
            CvPoint3D32fからの明示的なキャスト
            </summary>
            <param name="p">新しい CvPoint3D64f の値を指定する CvPoint3D32f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.Equals(OpenCvSharp.CvPoint3D64f)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Equality(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            == 演算子のオーバーロード。x, y, z座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Inequality(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            != 演算子のオーバーロード。x, y, z座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_UnaryPlus(OpenCvSharp.CvPoint3D64f)">
            <summary>
            単項プラス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_UnaryNegation(OpenCvSharp.CvPoint3D64f)">
            <summary>
            単項マイナス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Addition(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Subtraction(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.op_Multiply(OpenCvSharp.CvPoint3D64f,System.Double)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.Distance(OpenCvSharp.CvPoint3D64f,OpenCvSharp.CvPoint3D64f)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint3D64f.DistanceTo(OpenCvSharp.CvPoint3D64f)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvLineSegmentPoint">
            <summary>
            cvHoughLines2で得られる、両端の点で表現される線分
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPoint.P1">
            <summary>
            1つ目の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvLineSegmentPoint.P2">
            <summary>
            2つ目の点
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.#ctor(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            初期化
            </summary>
            <param name="p1">1つ目の点</param>
            <param name="p2">2つ目の点</param>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Equals(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.op_Equality(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.op_Inequality(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            2直線の交点を求める (線分としてではなく直線として)
            </summary>
            <param name="line1"></param>
            <param name="line2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineIntersection(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            2直線の交点を求める (線分としてではなく直線として)
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.SegmentIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            線分同士の交点を求める
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.SegmentIntersection(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            線分同士の交点を求める
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedSegments(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            2つの線分が交差しているかどうかを返す
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedSegments(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            2つの線分が交差しているかどうかを返す
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.IntersectedLineAndSegment(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            直線と線分が交差しているかを調べる
            </summary>
            <param name="line">線分</param>
            <param name="seg">直線</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.LineAndSegmentIntersection(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            直線と線分の交点を求める
            </summary>
            <param name="line"></param>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Length(OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Offset(System.Int32,System.Int32)">
            <summary>
            この CvLineSegmentPoint を指定の量だけ平行移動する 
            </summary>
            <param name="x">x 座標のオフセット量</param>
            <param name="y">y 座標のオフセット量</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint.Offset(OpenCvSharp.CvPoint)">
            <summary>
            この CvLineSegmentPoint を指定の量だけ平行移動する 
            </summary>
            <param name="p">オフセットに使用する CvPoint</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvLineSegmentPoint._IntersectedSegments_(OpenCvSharp.CvLineSegmentPoint,OpenCvSharp.CvLineSegmentPoint)">
            <summary>
            線分が交差しているかどうか 
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.Platform">
            <summary>
            Provides information for the platform which the user is using 
            </summary>
        </member>
        <member name="F:OpenCvSharp.Utilities.Platform.OS">
            <summary>
            OS type
            </summary>
        </member>
        <member name="F:OpenCvSharp.Utilities.Platform.Runtime">
            <summary>
            Runtime type
            </summary>
        </member>
        <member name="T:OpenCvSharp.Pointer`1">
            <summary>
            構造体のポインタ (t*) 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OpenCvSharp.Pointer`1.address">
            <summary>
            IntPtr
            </summary>
        </member>
        <member name="F:OpenCvSharp.Pointer`1.Zero">
            <summary>
            Null pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.#ctor(System.IntPtr)">
            <summary>
            初期化
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.op_Implicit(OpenCvSharp.Pointer{`0})~System.IntPtr">
            <summary>
            IntPtrへの暗黙のキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Pointer`1.op_Explicit(OpenCvSharp.Pointer{`0})~`0">
            <summary>
            Tへの明示的なキャスト
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Pointer`1.Address">
            <summary>
            アドレス
            </summary>
        </member>
        <member name="P:OpenCvSharp.Pointer`1.Entity">
            <summary>
            ポインタの実体 (*t)
            </summary>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D`1">
            <summary>
            構造体のポインタに対して配列のようにアクセスするためのクラス
            </summary>
        </member>
        <member name="T:OpenCvSharp.IPointerAccessor1D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor1D`1.Get(System.Int32)">
            <summary>
            ptr[index]
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor1D`1.Set(System.Int32,`0)">
            <summary>
            ptr[index] = value;
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor1D`1.Ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor1D`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D`1.ptr">
            <summary>
            pointer
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D`1.size">
            <summary>
            sizeof(T)
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.#ctor(System.Void*)">
            <summary>
            void*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D`1.Set(System.Int32,`0)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D`1.Ptr">
            <summary>
            内部で保持しているポインタ (T*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D`1.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.IPointerAccessor2D`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor2D`1.Get(System.Int32,System.Int32)">
            <summary>
            ptr[index]
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IPointerAccessor2D`1.Set(System.Int32,System.Int32,`0)">
            <summary>
            ptr[index] = value;
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor2D`1.Ptr">
            <summary>
            Data pointer
            </summary>
        </member>
        <member name="P:OpenCvSharp.IPointerAccessor2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor2D_Single">
            <summary>
            Single** を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor2D_Single.ptr">
            <summary>
            pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.#ctor(System.Single**)">
            <summary>
            Single**で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.Get(System.Int32,System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index1">配列の1次元目のインデックス</param>
            <param name="index2">配列の2次元目のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor2D_Single.Set(System.Int32,System.Int32,System.Single)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index1">配列の1次元目のインデックス</param>
            <param name="index2">配列の2次元目のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor2D_Single.Ptr">
            <summary>
            内部で保持しているポインタ (Single**)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor2D_Single.Item(System.Int32,System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index1">配列の1次元目のインデックス</param>
            <param name="index2">配列の2次元目のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.Action">
            <summary>
            Substitute of System.Action
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.TimeMeasurer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.TimeMeasurer.Measure(OpenCvSharp.Utilities.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.StructurePointer">
            <summary>
            構造体とポインタの変換やメモリの解放を自動的にやってくれるクラス
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.#ctor(System.Object)">
            <summary>
            構造体からポインタを作って初期化
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.#ctor">
            <summary>
            デフォルトの初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.op_Implicit(OpenCvSharp.Utilities.StructurePointer)~System.IntPtr">
            <summary>
            IntPtrへの暗黙の変換
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.ToStructure">
            <summary>
            ポインタから構造体に変換して返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer.Dispose">
            <summary>
            後始末
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.Ptr">
            <summary>
            実体ポインタ
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.SrcObj">
            <summary>
            初期化の際に渡された構造体オブジェクト
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.StructurePointer.Size">
            <summary>
            確保したメモリのバイトサイズ
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.StructurePointer`1">
            <summary>
            構造体とポインタの変換やメモリの解放を自動的にやってくれるクラス (ジェネリック版)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.#ctor(`0)">
            <summary>
            指定した構造体オブジェクトをポインタに変換して初期化
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.#ctor">
            <summary>
            T型のバイトサイズのポインタを生成して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.op_Implicit(OpenCvSharp.Utilities.StructurePointer{`0})~System.IntPtr">
            <summary>
            IntPtrへの暗黙の変換
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.StructurePointer`1.ToStructure">
            <summary>
            ポインタから構造体に変換して返す
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvColor">
            <summary>
            色をあらわす構造体.
            OpenCVのCvScalarや、System.Drawing.Colorとの暗黙の変換が定義されている.
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.R">
            <summary>
            R成分
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.G">
            <summary>
            G成分
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.B">
            <summary>
            B成分
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            初期化 
            </summary>
            <param name="r">R成分</param>
            <param name="g">G成分</param>
            <param name="b">B成分</param>
        </member>
        <member name="M:OpenCvSharp.CvColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="r">R成分</param>
            <param name="g">G成分</param>
            <param name="b">B成分</param>
        </member>
        <member name="M:OpenCvSharp.CvColor.#ctor(System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="argb">32 ビットの ARGB 値を指定する値 (Aは無視される)</param>
        </member>
        <member name="M:OpenCvSharp.CvColor.Random">
            <summary>
            ランダムな色を生成して返す
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Implicit(OpenCvSharp.CvColor)~OpenCvSharp.CvScalar">
            <summary>
            CvColorからCvScalarに変換する暗黙のキャスト 
            </summary>
            <param name="self">新しい CvScalar の値を指定する CvColor</param>
            <returns>CvScalar</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Implicit(OpenCvSharp.CvScalar)~OpenCvSharp.CvColor">
            <summary>
            CvScalarからCvColorに変換する暗黙のキャスト 
            </summary>
            <param name="obj">新しい CvColor の値を指定する CvScalar</param>
            <returns>CvColor</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Equality(OpenCvSharp.CvColor,OpenCvSharp.CvColor)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.op_Inequality(OpenCvSharp.CvColor,OpenCvSharp.CvColor)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.Equals(OpenCvSharp.CvColor)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvColor.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="F:OpenCvSharp.CvColor.AliceBlue">
            <summary>
            #F0F8FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.AntiqueWhite">
            <summary>
            #FAEBD7 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Aqua">
            <summary>
            #00FFFF 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Aquamarine">
            <summary>
            #7FFFD4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Azure">
            <summary>
            #F0FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Beige">
            <summary>
            #F5F5DC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Bisque">
            <summary>
            #FFE4C4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Black">
            <summary>
            #000000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.BlanchedAlmond">
            <summary>
            #FFEBCD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Blue">
            <summary>
            #0000FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.BlueViolet">
            <summary>
            #8A2BE2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Brown">
            <summary>
            #A52A2A 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.BurlyWood">
            <summary>
            #DEB887
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.CadetBlue">
            <summary>
            #5F9EA0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Chartreuse">
            <summary>
            #7FFF00 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Chocolate">
            <summary>
            #D2691E
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Coral">
            <summary>
            #FF7F50
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.CornflowerBlue">
            <summary>
            #6495ED
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Cornsilk">
            <summary>
            #FFF8DC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Crimson">
            <summary>
            #DC143C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Cyan">
            <summary>
            #00FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkBlue">
            <summary>
            #00008B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkCyan">
            <summary>
            #008B8B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkGoldenrod">
            <summary>
            #B8860B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkGray">
            <summary>
            #A9A9A9
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkGreen">
            <summary>
            #006400
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkKhaki">
            <summary>
            #BDB76B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkMagenta">
            <summary>
            #8B008B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkOliveGreen">
            <summary>
            #556B2F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkOrange">
            <summary>
            #FF8C00 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkOrchid">
            <summary>
            #9932CC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkRed">
            <summary>
            #8B0000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkSalmon">
            <summary>
            #E9967A
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkSeaGreen">
            <summary>
            #8FBC8F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkSlateBlue">
            <summary>
            #483D8B
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkSlateGray">
            <summary>
            #2F4F4F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkTurquoise">
            <summary>
            #00CED1 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DarkViolet">
            <summary>
            #9400D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DeepPink">
            <summary>
            #FF1493
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DeepSkyBlue">
            <summary>
            #00BFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DimGray">
            <summary>
            #696969
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.DodgerBlue">
            <summary>
            #1E90FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Firebrick">
            <summary>
            #B22222
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.FloralWhite">
            <summary>
            #FFFAF0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.ForestGreen">
            <summary>
            #228B22
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Fuchsia">
            <summary>
            #FF00FF 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Gainsboro">
            <summary>
            #DCDCDC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.GhostWhite">
            <summary>
            #F8F8FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Gold">
            <summary>
            #FFD700
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Goldenrod">
            <summary>
            #DAA520
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Gray">
            <summary>
            #808080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Green">
            <summary>
            #008000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.GreenYellow">
            <summary>
            #ADFF2F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Honeydew">
            <summary>
            #F0FFF0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.HotPink">
            <summary>
            #FF69B4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.IndianRed">
            <summary>
            #CD5C5C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Indigo">
            <summary>
            #4B0082
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Ivory">
            <summary>
            #FFFFF0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Khaki">
            <summary>
            #F0E68C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Lavender">
            <summary>
            #E6E6FA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LavenderBlush">
            <summary>
            #FFF0F5 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LawnGreen">
            <summary>
            #7CFC00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LemonChiffon">
            <summary>
            #FFFACD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightBlue">
            <summary>
            #ADD8E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightCoral">
            <summary>
            #F08080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightCyan">
            <summary>
            #E0FFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightGoldenrodYellow">
            <summary>
            #FAFAD2
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightGray">
            <summary>
            #D3D3D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightGreen">
            <summary>
            #90EE90 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightPink">
            <summary>
            #FFB6C1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightSalmon">
            <summary>
            #FFA07A
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightSeaGreen">
            <summary>
            #20B2AA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightSkyBlue">
            <summary>
            #87CEFA 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightSlateGray">
            <summary>
            #778899
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightSteelBlue">
            <summary>
            #B0C4DE 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LightYellow">
            <summary>
            #FFFFE0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Lime">
            <summary>
            #00FF00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.LimeGreen">
            <summary>
            #32CD32
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Linen">
            <summary>
            #FAF0E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Magenta">
            <summary>
            #FF00FF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Maroon">
            <summary>
            #800000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumAquamarine">
            <summary>
            #66CDAA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumBlue">
            <summary>
            #0000CD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumOrchid">
            <summary>
            #BA55D3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumPurple">
            <summary>
            #9370DB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumSeaGreen">
            <summary>
            #3CB371
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumSlateBlue">
            <summary>
            #7B68EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumSpringGreen">
            <summary>
            #00FA9A 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumTurquoise">
            <summary>
            #48D1CC
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MediumVioletRed">
            <summary>
            #C71585
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MidnightBlue">
            <summary>
            #191970
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MintCream">
            <summary>
            #F5FFFA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.MistyRose">
            <summary>
            #FFE4E1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Moccasin">
            <summary>
            #FFE4B5
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.NavajoWhite">
            <summary>
            #FFDEAD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Navy">
            <summary>
            #000080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.OldLace">
            <summary>
            #FDF5E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Olive">
            <summary>
            #808000 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.OliveDrab">
            <summary>
            #6B8E23
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Orange">
            <summary>
            #FFA500
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.OrangeRed">
            <summary>
            #FF4500
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Orchid">
            <summary>
            #DA70D6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PaleGoldenrod">
            <summary>
            #EEE8AA 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PaleGreen">
            <summary>
            #98FB98
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PaleTurquoise">
            <summary>
            #AFEEEE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PaleVioletRed">
            <summary>
            #DB7093
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PapayaWhip">
            <summary>
            #FFEFD5 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PeachPuff">
            <summary>
            #FFDAB9
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Peru">
            <summary>
            #CD853F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Pink">
            <summary>
            #FFC0CB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Plum">
            <summary>
            #DDA0DD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.PowderBlue">
            <summary>
            #B0E0E6
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Purple">
            <summary>
            #800080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Red">
            <summary>
            #FF0000
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.RosyBrown">
            <summary>
            #BC8F8F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.RoyalBlue">
            <summary>
            #4169E1
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SaddleBrown">
            <summary>
            #8B4513
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Salmon">
            <summary>
            #FA8072
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SandyBrown">
            <summary>
            #F4A460
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SeaGreen">
            <summary>
            #2E8B57
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SeaShell">
            <summary>
            #FFF5EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Sienna">
            <summary>
            #A0522D
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Silver">
            <summary>
            #C0C0C0 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SkyBlue">
            <summary>
            #87CEEB
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SlateBlue">
            <summary>
            #6A5ACD
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SlateGray">
            <summary>
            #708090
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Snow">
            <summary>
            #FFFAFA
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SpringGreen">
            <summary>
            #00FF7F
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.SteelBlue">
            <summary>
            #4682B4
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Tan">
            <summary>
            #D2B48C
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Teal">
            <summary>
            #008080
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Thistle">
            <summary>
            #D8BFD8
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Tomato">
            <summary>
            #FF6347
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Turquoise">
            <summary>
            #40E0D0
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Violet">
            <summary>
            #EE82EE
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Wheat">
            <summary>
            #F5DEB3
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.White">
            <summary>
            #FFFFFF
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.WhiteSmoke">
            <summary>
            #F5F5F5
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.Yellow">
            <summary>
            #FFFF00
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvColor.YellowGreen">
            <summary>
            #9ACD32
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvPoint">
            <summary>
            整数座標系による2次元の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.SizeOf">
            <summary>
            sizeof(CvPoint)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint.Empty">
            <summary>
            プロパティを初期化しない状態の CvPoint 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Equals(OpenCvSharp.CvPoint)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Equality(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            == 演算子のオーバーロード。x,y座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Inequality(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            != 演算子のオーバーロード。x,y座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_UnaryPlus(OpenCvSharp.CvPoint)">
            <summary>
            単項プラス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_UnaryNegation(OpenCvSharp.CvPoint)">
            <summary>
            単項マイナス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Addition(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Subtraction(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.op_Multiply(OpenCvSharp.CvPoint,System.Double)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.Distance(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DistanceTo(OpenCvSharp.CvPoint)">
            <summary>
            2点間の距離を求める
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DotProduct(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            ベクトルの内積を求める
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.DotProduct(OpenCvSharp.CvPoint)">
            <summary>
            ベクトルの内積を求める
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.CrossProduct(OpenCvSharp.CvPoint,OpenCvSharp.CvPoint)">
            <summary>
            ベクトルの外積を求める
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint.CrossProduct(OpenCvSharp.CvPoint)">
            <summary>
            ベクトルの外積を求める
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.CvPoint2D32f">
            <summary>
            浮動小数点型（単精度）座標系による2次元の点
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.SizeOf">
            <summary>
            sizeof(CvPoint2D32f)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvPoint2D32f.Empty">
            <summary>
            プロパティを初期化しない状態の CvPoint2D32f 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.#ctor(System.Single,System.Single)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.#ctor(System.Double,System.Double)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Implicit(OpenCvSharp.CvPoint2D32f)~OpenCvSharp.CvPoint">
            <summary>
            CvPointへの暗黙のキャスト
            </summary>
            <param name="self">新しい CvPoint の値を指定する CvPoint2D32f</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Implicit(OpenCvSharp.CvPoint)~OpenCvSharp.CvPoint2D32f">
            <summary>
            CvPointからの明示的なキャスト
            </summary>
            <param name="p">新しい CvPoint2D32f の値を指定する CvPoint</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.Equals(OpenCvSharp.CvPoint2D32f)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Equality(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            == 演算子のオーバーロード。x,y座標値が等しければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Inequality(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            != 演算子のオーバーロード。x,y座標値が等しくなければtrueを返す 
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_UnaryPlus(OpenCvSharp.CvPoint2D32f)">
            <summary>
            単項プラス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_UnaryNegation(OpenCvSharp.CvPoint2D32f)">
            <summary>
            単項マイナス演算子
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Addition(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Subtraction(OpenCvSharp.CvPoint2D32f,OpenCvSharp.CvPoint2D32f)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.op_Multiply(OpenCvSharp.CvPoint2D32f,System.Double)">
            <summary>
            あるオフセットで点を移動させる
            </summary>
            <param name="pt"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvPoint2D32f.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.Interpolation">
            <summary>
            画像の補間方法
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.NearestNeighbor">
            <summary>
            最近隣接補間 
            [CV_INTER_NN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Linear">
            <summary>
            バイリニア補間 
            [CV_INTER_LINEAR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Cubic">
            <summary>
            バイキュービック補間 
            [CV_INTER_CUBIC]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Area">
            <summary>
            ピクセル領域の関係を用いてリサンプリングする．画像縮小の際は，モアレの無い処理結果を得ることができる手法である．拡大の際は，CV_INTER_NN と同様 .
            [CV_INTER_AREA]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.FillOutliers">
            <summary>
            出力画像の全ピクセルの値を埋める．対応ピクセルが入力画像外であるようなピクセルである場合は， fillvalがセットされる 
            [CV_WARP_FILL_OUTLIERS]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.InverseMap">
            <summary>
            このフラグは map_matrixが出力画像から入力画像への逆変換のための行列であることを意味するので，直接ピクセル補間に用いることができる．
            これがセットされていない場合，この関数は map_matrix を使って逆変換を計算する. 
            [CV_WARP_INVERSE_MAP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Lanczos4">
            <summary>
            [INTER_LANCZOS4]
            </summary>
        </member>
        <member name="F:OpenCvSharp.Interpolation.Max">
            <summary>
            [INTER_MAX]
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvTrackbar">
            <summary>
            CvWindowに貼り付けて操作するトラックバー
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvTrackbar.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            初期化(目盛りは0~100)
            </summary>
            <param name="name">トラックバーの名前</param>
            <param name="window">トラックバーの親ウィンドウ名</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            初期化
            </summary>
            <param name="name">トラックバーの名前</param>
            <param name="window">トラックバーの親ウィンドウ名</param>
            <param name="value">スライダの初期位置</param>
            <param name="max">スライダの最大値．最小値は常に 0.</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.#ctor(System.String,System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            初期化
            </summary>
            <param name="name">トラックバーの名前</param>
            <param name="window">トラックバーの親ウィンドウ名</param>
            <param name="value">スライダの初期位置</param>
            <param name="max">スライダの最大値．最小値は常に 0.</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
            <param name="userdata"></param>
        </member>
        <member name="M:OpenCvSharp.CvTrackbar.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.TrackbarName">
            <summary>
            トラックバーの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.WindowName">
            <summary>
            親ウィンドウの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Pos">
            <summary>
            トラックバーの現在の値を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Max">
            <summary>
            トラックバーの目盛りの最大値を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Callback">
            <summary>
            スライダが動いた際のコールバックイベントデリゲートを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Userdata">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvTrackbar.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvWindow">
            <summary>
            cvNamedWindow関数によるHighGUIウィンドウのラッパー
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvWindow.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor">
            <summary>
            適当なウィンドウ名で初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(OpenCvSharp.CvArr)">
            <summary>
            適当なウィンドウ名で、始めから表示しておく画像を指定して初期化
            </summary>
            <param name="image">ウィンドウに表示する画像</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(OpenCvSharp.WindowMode,OpenCvSharp.CvArr)">
            <summary>
            適当なウィンドウ名で、画像の表示モードを指定して初期化
            </summary>
            <param name="flags">ウィンドウのフラグ</param>
            <param name="image">ウィンドウに表示する画像</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String)">
            <summary>
            ウィンドウ名を指定して初期化
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される．</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.WindowMode)">
            <summary>
            ウィンドウ名と画像の表示モードを指定して初期化
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される．</param>
            <param name="flags">ウィンドウのフラグ</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.CvArr)">
            <summary>
            ウィンドウ名と始めから表示しておく画像を指定して初期化
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される．</param>
            <param name="image">ウィンドウに表示する画像</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.#ctor(System.String,OpenCvSharp.WindowMode,OpenCvSharp.CvArr)">
            <summary>
            ウィンドウ名と画像の表示モードと始めから表示しておく画像を指定して初期化
            </summary>
            <param name="name">ウィンドウの識別に用いられるウィンドウ名で，ウィンドウのタイトルバ ーに表示される．</param>
            <param name="flags">ウィンドウのフラグ</param>
            <param name="image">ウィンドウに表示する画像</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DefaultName">
            <summary>
            ウィンドウ名が指定されなかったときに、適当な名前を作成して返す.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Close">
            <summary>
            ウィンドウを閉じる
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DestroyAllWindows">
            <summary>
            全ての HighGUI ウィンドウを破棄する
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar(System.String,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            ウィンドウにトラックバーを作成し、作成したトラックバーを返す
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback)">
            <summary>
            ウィンドウにトラックバーを作成し、作成したトラックバーを返す
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="value">スライダの初期位置</param>
            <param name="max">スライダの最大値．最小値は常に 0.</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.CreateTrackbar2(System.String,System.Int32,System.Int32,OpenCvSharp.CvTrackbarCallback2,System.Object)">
            <summary>
            ウィンドウにトラックバーを作成し、作成したトラックバーを返す
            </summary>
            <param name="trackbarName">トラックバーの名前</param>
            <param name="value">スライダの初期位置</param>
            <param name="max">スライダの最大値．最小値は常に 0.</param>
            <param name="callback">スライダの位置が変更されるたびに呼び出されるデリゲート</param>
            <param name="userdata"></param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DisplayOverlay(System.String,System.Int32)">
            <summary>
            ウィンドウ画像上に，delay ミリ秒間だけテキストをオーバレイ表示します．これは，画像データを変更しません．テキストは画像の一番上に表示されます．
            </summary>
            <param name="text">ウィンドウ画像上に描画される，オーバレイテキスト．</param>
            <param name="delayms">オーバレイテキストを表示する時間．直前のオーバレイテキストがタイムアウトするより前に，この関数が呼ばれると，タイマーは再起動されてテキストが更新されます．この値が0の場合，テキストは表示されません．</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.DisplayStatusBar(System.String,System.Int32)">
            <summary>
            ウィンドウのステータスバーに，delay ミリ秒間だけテキストを表示します．
            </summary>
            <param name="text">ウィンドウのステータスバー上に描画されるテキスト．</param>
            <param name="delayms">テキストが表示される時間．直前のテキストがタイムアウトするより前に，この関数が呼ばれると，タイマーは再起動されてテキストが更新されます．この値が0の場合，テキストは表示されません．</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.GetProperty(OpenCvSharp.WindowProperty)">
            <summary>
            ウィンドウのプロパティを取得する
            </summary>
            <param name="propId">プロパティの種類</param>
            <returns>プロパティの値</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.LoadWindowParameters">
            <summary>
            ウィンドウのパラメータを読み込みます．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Move(System.Int32,System.Int32)">
            <summary>
            ウィンドウの位置を変更する
            </summary>
            <param name="x">左上のコーナーの新しい x 座標</param>
            <param name="y">左上のコーナーの新しい y 座標</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.Resize(System.Int32,System.Int32)">
            <summary>
            ウィンドウサイズを変更する
            </summary>
            <param name="width">新しい幅</param>
            <param name="height">新しい高さ</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.SaveWindowParameters">
            <summary>
            ウィンドウのパラメータを保存します．
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvWindow.SetProperty(OpenCvSharp.WindowProperty,System.Double)">
            <summary>
            ウィンドウのプロパティを設定する
            </summary>
            <param name="propId">プロパティの種類</param>
            <param name="propValue">プロパティに設定する値</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.ShowImage(OpenCvSharp.CvArr)">
            <summary>
            指定したウィンドウ内に画像を表示する(cvShowImage相当)．
            このウィンドウのフラグに AutoSize が指定されていた場合は，画像はオリジナルサイズで表示される．
            それ以外の場合，ウィンドウサイズに合わせて 表示画像サイズが変更される． 
            </summary>
            <param name="img">画像ヘッダ</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.WaitKey">
            <summary>
            何かキーが押されるまで待機する．
            </summary>
            <returns>押されたキーのキーコード</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.WaitKey(System.Int32)">
            <summary>
            何かキーが押されるか、若しくはdelayで指定した時間(ミリ秒)待機する。
            </summary>
            <param name="delay">遅延時間（ミリ秒）</param>
            <returns>キーが押された場合はそのキーコードを，キーが押されないまま指定されたタイムアウト時間が過ぎてしまった場合は -1</returns>
        </member>
        <member name="M:OpenCvSharp.CvWindow.ShowImages(OpenCvSharp.CvArr[])">
            <summary>
            引数に指定した画像をそれぞれ別のウィンドウで表示し、キー入力待ち状態にする。
            </summary>
            <param name="images">表示させる画像。任意の個数を指定できる。</param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.ShowImages(System.Collections.Generic.IEnumerable{OpenCvSharp.CvArr},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="images"></param>
            <param name="names"></param>
        </member>
        <member name="M:OpenCvSharp.CvWindow.GetWindowByName(System.String)">
            <summary>
            指定した名前に対応するウィンドウを得る
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Image">
            <summary>
            表示する画像を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Name">
            <summary>
            ウィンドウの名前を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.Handle">
            <summary>
            ウィンドウハンドルを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.MouseCallback">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenCvSharp.CvWindow.OnMouseCallback">
            <summary>
            マウスイベントが発生したときのイベントハンドラ
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvWindow.HasQt">
            <summary>
            Qtを有効にしてビルドされたhighguiライブラリであればtrueを返す
            </summary>
        </member>
        <member name="T:OpenCvSharp.LoadMode">
            <summary>
            cvLoadImageで用いる読み込みフラグ ．
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.Unchanged">
            <summary>
            8 ビット，カラーまたはグレースケール [CV_LOAD_IMAGE_UNCHANGED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.GrayScale">
            <summary>
            8 ビット，グレースケール [CV_LOAD_IMAGE_GRAYSCALE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.Color">
            <summary>
            AnyDepth と併用されない限り 8 ビット，カラー [CV_LOAD_IMAGE_COLOR]
            </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.AnyDepth">
             <summary>
            任意のデプス，グレー [CV_LOAD_IMAGE_ANYDEPTH]
             </summary>
        </member>
        <member name="F:OpenCvSharp.LoadMode.AnyColor">
            <summary>
            8 ビット，カラーまたはグレースケール [CV_LOAD_IMAGE_ANYCOLOR]. 
            AnyDepth と併用可能.
            </summary>
        </member>
        <member name="T:OpenCvSharp.IplImage">
            <summary>
            IPL 画像ヘッダ
            </summary>
        </member>
        <member name="F:OpenCvSharp.IplImage.disposed">
            <summary>
            Track whether Dispose has been called
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor">
            <summary>
            構造体分のメモリ領域を確保して初期化
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Boolean)">
            <summary>
            sizeof(IplImage)の分のメモリの割り当てだけ行って、GC禁止設定で初期化
            </summary>
            <param name="isEnabledDispose">If true, this matrix will be disposed by GC automatically.</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.String)">
            <summary>
            画像ファイルから初期化
            </summary>
            <param name="fileName">ファイル名</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.String,OpenCvSharp.LoadMode)">
            <summary>
            画像ファイルから初期化
            </summary>
            <param name="fileName">ファイル名</param>
            <param name="flags">読み込む画像がカラー/グレースケールのどちらか，とビット深度を指定する</param>
            <returns>画像へのポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            画像のヘッダを作成し，データ領域を確保する (cvCreateImage).
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Int32,System.Int32,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            画像のヘッダを作成し，データ領域を確保する (cvCreateImage).
            </summary>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.IntPtr)">
            <summary>
            ポインタから初期化
            </summary>
            <param name="ptr">IntPtr</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            ポインタと自動解放の可否を指定して初期化
            </summary>
            <param name="ptr"></param>
            <param name="isEnabledDispose"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.Dispose(System.Boolean)">
             <summary>
             リソースの解放
             </summary>
             <param name="disposing">
             trueの場合は、このメソッドがユーザコードから直接が呼ばれたことを示す。マネージ・アンマネージ双方のリソースが解放される。
             falseの場合は、このメソッドはランタイムからファイナライザによって呼ばれ、もうほかのオブジェクトから参照されていないことを示す。アンマネージリソースのみ解放される。
            </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromFile(System.String)">
            <summary>
            画像ファイルからIplImageを生成する
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromFile(System.String,OpenCvSharp.LoadMode)">
            <summary>
            画像ファイルからIplImageを生成する.
            初めにcvLoadImageでの読み込みを試み、失敗した場合はGDI+による読み込みを試みる
            </summary>
            <param name="fileName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromImageData(System.Byte[],OpenCvSharp.LoadMode)">
            <summary>
            画像データ(JPEG等の画像をメモリに展開したもの)からIplImageを生成する (cvDecodeImage)
            </summary>
            <param name="bytes"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromStream(System.IO.Stream,OpenCvSharp.LoadMode)">
            <summary>
            System.IO.StreamのインスタンスからIplImageを生成する
            </summary>
            <param name="stream"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.IntPtr)">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータの先頭ポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータの先頭ポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,System.Array)">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,OpenCvSharp.BitDepth,System.Int32,System.Array)">
            <summary>
            ピクセルデータの配列からIplImageを生成する
            </summary>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.Byte[])">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(OpenCvSharp.CvSize,System.Int32,System.Int16[])">
            <summary>
            ピクセルデータのbyte配列からIplImageを生成する
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.FromPixelData(System.Int32,System.Int32,System.Int32,System.Int16[])">
            <summary>
            ピクセルデータの配列からIplImageを生成する
            </summary>
            <param name="width">画像の幅</param>
            <param name="height">画像の高さ</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．</param>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="F:OpenCvSharp.IplImage.SizeOf">
            <summary>
            sizeof(IplImage) 
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_UnaryPlus(OpenCvSharp.IplImage)">
            <summary>
            行列の単項+演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_UnaryNegation(OpenCvSharp.IplImage)">
            <summary>
            行列の単項-演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_OnesComplement(OpenCvSharp.IplImage)">
            <summary>
            行列の単項not演算子
            </summary>
            <param name="a">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Addition(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列の加算演算子。cvAddにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Addition(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの加算演算子。cvAddSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Subtraction(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列の減算演算子。cvSubにより減算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Subtraction(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーの減算演算子。cvSubSにより加算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Multiply(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列の乗算演算子。cvMatMulにより乗算する。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Multiply(OpenCvSharp.IplImage,System.Double)">
            <summary>
            行列とスカラーの乗算演算子。aの要素ごとにbをかけた結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_Division(OpenCvSharp.IplImage,System.Double)">
            <summary>
            行列とスカラーの除算演算子。aの要素ごとにbで割った結果をcvAddWeightedにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseAnd(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列のand演算子。cvAndにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseAnd(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのand演算子。cvAndSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseOr(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列のor演算子。cvOrにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_BitwiseOr(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのor演算子。cvOrSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_ExclusiveOr(OpenCvSharp.IplImage,OpenCvSharp.IplImage)">
            <summary>
            行列と行列のxor演算子。cvXorにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">行列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.op_ExclusiveOr(OpenCvSharp.IplImage,OpenCvSharp.CvScalar)">
            <summary>
            行列とスカラーのxor演算子。cvXorSにより求める。
            </summary>
            <param name="a">行列</param>
            <param name="b">スカラー</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CheckChessboard(OpenCvSharp.CvSize)">
            <summary>
            チェスボードが画像中にあるかどうかを高速に判定する。
            チェスボードが無い画像でcvFindChessboardCornersが遅くなる問題への対処として利用できる。
            </summary>
            <param name="size">チェスボードのサイズ</param>
            <returns>1のときは、チェスボードが画像中に存在し、cvFindChessboardCornersを呼び出せる。
            0のときはチェスボードが存在しない。-1はエラーを示す。</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.Clone">
            <summary>
            ヘッダ，ROI，データを含む画像の完全なコピーを作成する． 
            </summary>
            <returns>コピーされた画像</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.Clone(OpenCvSharp.CvRect)">
            <summary>
            指定した矩形領域を切り出した、画像の完全なコピーを作成する． 
            </summary>
            <returns>コピーされた画像</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.EmptyClone">
            <summary>
            このIplImageと同じサイズ・ビット深度・チャネル数を持つ
            IplImageオブジェクトを新たに作成し、返す
            </summary>
            <returns>コピーされた画像</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CreateHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            メモリ確保と初期化を行い，IplImage クラスを返す (cvCreateImageHeader).
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像要素のビットデプス</param>
            <param name="channels">要素（ピクセル）毎のチャンネル数．1,2,3,4 のいずれか．このチャンネルはインタリーブされる．例えば，通常のカラー画像のデータレイアウトは，b0 g0 r0 b1 g1 r1 ...となっている．</param>
            <returns>画像ポインタ</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.DeleteMoire">
            <summary>
            入力画像のモアレを削除する
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.FindFace(OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetCOI">
            <summary>
            画像の COI（channel of interest）を返す.
            全チャンネルが選択される場合には，0 が返される）．
            </summary>
            <returns>COI（channel of interest）を返す（全チャンネルが選択される場合には，0 が返される）.</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetROI">
            <summary>
            画像の ROI 座標を返す (cvGetImageROI)．
            ROI が存在しない場合には，矩形 cvRect(0,0,image.Width,image.Height) が返される．
            </summary>
            <returns>ROI</returns> 
        </member>
        <member name="M:OpenCvSharp.IplImage.GetDataStream(System.String,System.Int32[])">
            <summary>
            dataポインタを指すStreamを取得する (返却値は要Close)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す (cvInitImageHeader).
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す (cvInitImageHeader).
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <param name="origin">初期化される画像ヘッダ</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.InitImageHeader(OpenCvSharp.CvSize,OpenCvSharp.BitDepth,System.Int32,OpenCvSharp.ImageOrigin,System.Int32)">
            <summary>
            ユーザから渡された参照が指す, ユーザによって確保された画像のヘッダ構造体を初期化し，その参照を返す (cvInitImageHeader).
            </summary>
            <param name="size">画像の幅と高さ</param>
            <param name="depth">画像のカラーデプス</param>
            <param name="channels">チャンネル数</param>
            <param name="origin">初期化される画像ヘッダ</param>
            <param name="align">画像の行のアライメント，通常は4，あるいは 8 バイト．</param>
            <returns>初期化された画像ヘッダ</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.PostBoostingFindFace(OpenCvSharp.CvMemStorage)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.PyrSegmentation(OpenCvSharp.IplImage,System.Int32,System.Double,System.Double)">
            <summary>
            画像ピラミッドによる画像のセグメント化を実装する．ピラミッドは，levelまで作成する．(out引数のcompがいらないときバージョン)
            </summary>
            <param name="dst">出力画像</param>
            <param name="level">セグメント化のためのピラミッドの最大レベル</param>
            <param name="threshold1">リンク構築のための誤差閾値</param>
            <param name="threshold2">セグメントクラスタリングのための誤差閾値</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.PyrSegmentation(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage,OpenCvSharp.CvSeq@,System.Int32,System.Double,System.Double)">
            <summary>
            画像ピラミッドによる画像のセグメント化を実装する． ピラミッドは，levelまで作成する． 
            </summary>
            <param name="dst">出力画像</param>
            <param name="storage">結果として得られる連結成分のシーケンスを保存するための領域</param>
            <param name="comp">セグメント化された成分の出力シーケンスへのポインタ</param>
            <param name="level">セグメント化のためのピラミッドの最大レベル</param>
            <param name="threshold1">リンク構築のための誤差閾値</param>
            <param name="threshold2">セグメントクラスタリングのための誤差閾値</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.ResetROI">
            <summary>
            画像の ROI を解放する．解放後は全画像が選択されている状態と同じになる (cvResetImageROI)．
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.SetImageCOI(System.Int32)">
            <summary>
            与えられた値を channel of interest（COI）としてセットする (cvSetImageCOI).
            値 0 は全てのチャンネルが選択されている事を意味し，値 1 は最初のチャンネルが選択されている事を意味する．
            </summary>
            <param name="coi">COI（Channel of interest）</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SetROI(OpenCvSharp.CvRect)">
            <summary>
            与えられた矩形を画像の ROI としてセットする (cvSetImageROI)．
            </summary>
            <param name="rect">ROI を表す矩形</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SetROI(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            与えられた矩形を画像の ROI としてセットする (cvSetImageROI)．
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single,System.Single,System.Single,OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
            <param name="calcGradient">勾配フラグ．trueの場合，この関数は全ての画像ピクセルに対する勾配の強さを計算し，これをエネルギー場と見なす． falseの場合は，入力画像自体がエネルギー場と見なされる．</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.SnakeImage(OpenCvSharp.CvPoint[],System.Single[],System.Single[],System.Single[],OpenCvSharp.CvSize,OpenCvSharp.CvTermCriteria,System.Boolean)">
            <summary>
            内部エネルギーと外部エネルギーの総和が最小になるように snake を更新する． 
            内部エネルギーは輪郭形状に依存する（滑らかな輪郭ほど内部エネルギーが小さい）．
            外部エネルギーはエネルギー場に依存し，画像勾配の場合は画像のエッジに対応するような局所的なエネルギー極小値において最小になる.
            </summary>
            <param name="points">輪郭点. ここに格納されている点をもとに計算をし、結果もここに入る</param>
            <param name="alpha">連続エネルギーの重み．pointsと同じ長さを持つ浮動小数点型配列（各輪郭点に配列の各要素が対応）．</param>
            <param name="beta">曲率エネルギーの重み．alpha と同様．</param>
            <param name="gamma">画像エネルギーの重み．alpha と同様．</param>
            <param name="win">最小値を探索する各点の近傍のサイズ． Width と Height は奇数でなければならない．</param>
            <param name="criteria">終了条件</param>
            <param name="calcGradient">勾配フラグ．trueの場合，この関数は全ての画像ピクセルに対する勾配の強さを計算し，これをエネルギー場と見なす． falseの場合は，入力画像自体がエネルギー場と見なされる．</param>
        </member>
        <member name="M:OpenCvSharp.IplImage.Split">
            <summary>
            マルチチャンネルの配列を，複数のシングルチャンネルの配列に分割する．
            </summary>
            <returns>各チャンネルごとの配列</returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.Transpose">
            <summary>
            行列の転置を行う.
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.T">
            <summary>
            行列の転置を行う.
            </summary>
        </member>
        <member name="M:OpenCvSharp.IplImage.CopyPixelData(System.Array)">
            <summary>
            この画像にピクセルデータをコピーする
            </summary>
            <param name="data">ピクセルデータ配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.CopyPixelData(System.IntPtr)">
            <summary>
            この画像にピクセルデータをコピーする
            </summary>
            <param name="data">ピクセルデータの先頭ポインタ</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetSubImage(OpenCvSharp.CvRect)">
            <summary>
            画像の一部分を切り取った新しい画像を生成して返す.
            (使い終わったら解放が必要)
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawImage(OpenCvSharp.CvRect,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="roi"></param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.DrawImage(System.Int32,System.Int32,System.Int32,System.Int32,OpenCvSharp.CvArr)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="image"></param>
        </member>
        <member name="M:OpenCvSharp.IplImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            SerializationInfo に、オブジェクトをシリアル化するために必要なデータを設定します。 
            </summary>
            <param name="info">データを読み込む先の SerializationInfo。</param>
            <param name="context">このシリアル化のシリアル化先。 </param>
        </member>
        <member name="M:OpenCvSharp.IplImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズ化の際の初期化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:OpenCvSharp.IplImage.Align">
            <summary>
            画像の行のアライメント（4 あるいは 8）を取得する．
            OpenCV はこれを無視して，代わりに widthStep を使用する．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.AlphaChannel">
            <summary>
            OpenCVでは無視される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.BorderMode">
            <summary>
            OpenCVでは無視される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.BorderConst">
            <summary>
            OpenCVでは無視される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ColorModel">
            <summary>
            OpenCVでは無視される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ChannelSeq">
            <summary>
            OpenCVでは無視される．
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.DataOrder">
            <summary>
            0 - インタリーブカラーチャンネル, 1 - 分離カラーチャンネル，
            cvCreateImage が作成できるのは，インタリーブ画像のみ
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Depth">
            <summary>
            ピクセルの色深度のビット数を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Height">
            <summary>
            画像のピクセル高さを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ID">
            <summary>
            バージョン (=0) を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageData">
            <summary>
            アライメントが調整された画像データへのポインタを取得する. これを通してピクセルデータにアクセスできる。
            利用する際は System.Byte* にキャストすべし。
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageDataPtr">
            <summary>
            アライメントが調整された画像データへの, byte*にキャスト済みのポインタを取得する. これを通してピクセルデータにアクセスできる。
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageDataOrigin">
             <summary>
             オリジナル画像データへのポインタを取得する
            （アライメントが調整されているとは限らない）- これは画像を正しく解放するために必要．
             </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ImageSize">
            <summary>
            画像データのバイトサイズを取得する
            (インタリーブデータの場合は，=image->height*image->widthStep）
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.MaskROI">
            <summary>
            OpenCVでは必ずNULL
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.NChannels">
            <summary>
            チャンネル数をを取得する. OpenCV のほとんどの関数が，1,2,3および4チャンネルをサポートする
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.NSize">
            <summary>
            sizeof(IplImage)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Origin">
            <summary>
            画像の原点をを取得する. 
            0 - 左上原点，1 - 左下原点（Windowsのビットマップ形式）
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ROIPointer">
            <summary>
            画像 ROI の矩形のポインタを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ROIValue">
            <summary>
            画像 ROI の矩形のポインタを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Width">
            <summary>
            画像のピクセル幅を取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.WidthStep">
            <summary>
            アライメントが調整された画像の行のバイトサイズを取得する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.TileInfo">
            <summary>
            OpenCVでは必ずNULL
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Size">
            <summary>
            画像のサイズを取得する(ROIのサイズではなく、元々のサイズ)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.COI">
            <summary>
            COI (channel of interest)を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.ROI">
            <summary>
            画像 ROI の矩形を取得・設定する
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Dims">
            <summary>
            配列の次元数を取得する (2固定)
            </summary>
        </member>
        <member name="P:OpenCvSharp.IplImage.Bpp">
            <summary>
            画像の色深度 (Bits per pixel)
            </summary>
        </member>
        <member name="T:OpenCvSharp.MouseEvent">
            <summary>
            マウスイベント
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MouseMove">
            <summary>
            [CV_EVENT_MOUSEMOVE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonDown">
            <summary>
            [CV_EVENT_LBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonDown">
            <summary>
            [CV_EVENT_RBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonDown">
            <summary>
            [CV_EVENT_MBUTTONDOWN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonUp">
            <summary>
            [CV_EVENT_LBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonUp">
            <summary>
            [CV_EVENT_RBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonUp">
            <summary>
            [CV_EVENT_MBUTTONUP]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.LButtonDoubleClick">
            <summary>
            [CV_EVENT_LBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.RButtonDoubleClick">
            <summary>
            [CV_EVENT_RBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.MButtonDoubleClick">
            <summary>
            [CV_EVENT_MBUTTONDBLCLK]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagLButton">
            <summary>
            [CV_EVENT_FLAG_LBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagRButton">
            <summary>
            [CV_EVENT_FLAG_RBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagMButton">
            <summary>
            [CV_EVENT_FLAG_MBUTTON]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagCtrlKey">
            <summary>
            [CV_EVENT_FLAG_CTRLKEY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagShiftKey">
            <summary>
            [CV_EVENT_FLAG_SHIFTKEY]
            </summary>
        </member>
        <member name="F:OpenCvSharp.MouseEvent.FlagAltKey">
            <summary>
            [CV_EVENT_FLAG_ALTKEY]
            </summary>
        </member>
        <member name="T:OpenCvSharp.WindowMode">
            <summary>
            cvNamedWindowで使用するウィンドウのフラグ
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.None">
            <summary>
            フラグ無し
            [0]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.AutoSize">
            <summary>
            表示される画像サイズに合わせてウィンドウサイズが自動的に調整される 
            [CV_WINDOW_AUTOSIZE]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.OpenGL">
            <summary>
            window with opengl support
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.ExpandedGui">
            <summary>
            機能強化された新しいGUIを表示する（Qtバックエンドのみ）
            [CV_GUI_EXPANDED]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.NormalGui">
            <summary>
            ステータスバーとツールバーのない以前のウィンドウを表示する（Qtバックエンドのみ）
            [CV_GUI_NORMAL]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.StretchImage">
            <summary>
            ウィンドウサイズに合わせて 表示画像サイズが変更される
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.Fullscreen">
            <summary>
            フルスクリーン
            [CV_WND_PROP_FULLSCREEN]
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.FreeRatio">
            <summary>
            アスペクト比を固定しない
            </summary>
        </member>
        <member name="F:OpenCvSharp.WindowMode.KeepRatio">
            <summary>
            アスペクト比を保つ
            </summary>
        </member>
        <member name="T:OpenCvSharp.NativeMethods">
            <summary>
            DllImportによるOpenCVの関数をまとめたクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.NativeMethods.cvLoadCalled">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenCvSharp.NativeMethods.hasQt">
            <summary>
            repsresents whether OpenCV is built with Qt
            </summary>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.LoadLibraries(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load DLL files dynamically using Win32 LoadLibrary
            </summary>
            <param name="additionalPaths"></param>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.IsWindows">
            <summary>
            Returns whether the OS is Windows or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.IsUnix">
            <summary>
            Returns whether the OS is *nix or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.IsMono">
            <summary>
            Returns whether the runtime is Mono or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.NativeMethods.CheckQt">
            <summary>
            Throws exception when HasQt is false
            </summary>
        </member>
        <member name="F:OpenCvSharp.NativeMethods.ErrorHandlerThrowException">
            <summary>
            Custom error handler to be thrown by OpenCV
            </summary>
        </member>
        <member name="F:OpenCvSharp.NativeMethods.ErrorHandlerIgnorance">
            <summary>
            Custom error handler to ignore all OpenCV errors
            </summary>
        </member>
        <member name="F:OpenCvSharp.NativeMethods.ErrorHandlerDefault">
            <summary>
            Default error handler
            </summary>
        </member>
        <member name="P:OpenCvSharp.NativeMethods.HasQt">
            <summary>
            Returns true if the library is compiled with Qt
            </summary>
        </member>
        <member name="T:OpenCvSharp.OpenCvSharpException">
            <summary>
            OpenCvSharpから投げられる例外
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="messageFormat"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenCvSharp.OpenCvSharpException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:OpenCvSharp.CvRect">
            <summary>
            矩形のオフセットとサイズ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.SizeOf">
            <summary>
            sizeof(CvRect)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.X">
            <summary>
            x座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Y">
            <summary>
            y座標
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Width">
            <summary>
            矩形の幅
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Height">
            <summary>
            矩形の高さ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvRect.Empty">
            <summary>
            プロパティを初期化しない状態の CvRect 構造体を表します。 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <param name="width">矩形の幅</param>
            <param name="height">矩形の高さ</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.#ctor(OpenCvSharp.CvPoint,OpenCvSharp.CvSize)">
            <summary>
            初期化 
            </summary>
            <param name="point">左上の頂点の座標</param>
            <param name="size">矩形の大きさ</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            左上隅および右下隅の座標から初期化
            </summary>
            <param name="left">左上隅のx座標</param>
            <param name="top">構造体の左上隅のy座標</param>
            <param name="right">構造体の右下隅のx座標</param>
            <param name="bottom">構造体の右下隅のy座標</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Equals(OpenCvSharp.CvRect)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Equality(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Inequality(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Addition(OpenCvSharp.CvRect,OpenCvSharp.CvPoint)">
            <summary>
            あるオフセットで矩形を移動させる
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Subtraction(OpenCvSharp.CvRect,OpenCvSharp.CvPoint)">
            <summary>
            あるオフセットで矩形を移動させる
            </summary>
            <param name="rect"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Addition(OpenCvSharp.CvRect,OpenCvSharp.CvSize)">
            <summary>
            指定したサイズ応じて、矩形を膨張または縮小する
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_Subtraction(OpenCvSharp.CvRect,OpenCvSharp.CvSize)">
            <summary>
            指定したサイズ応じて、矩形を膨張または縮小する
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_BitwiseAnd(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            2つの矩形の交差部分を表す矩形を取得する
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.op_BitwiseOr(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            2つの矩形の和集合を表す矩形を取得する 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(System.Int32,System.Int32)">
            <summary>
            指定した点がこの矩形に含まれているかどうかを判断する
            </summary>
            <param name="x">x座標</param>
            <param name="y">y座標</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(OpenCvSharp.CvPoint)">
            <summary>
            指定した点がこの矩形に含まれているかどうかを判断する
            </summary>
            <param name="pt">点</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Contains(OpenCvSharp.CvRect)">
            <summary>
            指定した矩形がこの矩形に含まれているかどうかを判断する
            </summary>
            <param name="rect">矩形</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(System.Int32,System.Int32)">
            <summary>
            このCvRectを指定の量だけ膨らませる 
            </summary>
            <param name="width">水平方向の膨張量</param>
            <param name="height">垂直方向の膨張量</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(OpenCvSharp.CvSize)">
            <summary>
            このCvRectを指定の量だけ膨らませる 
            </summary>
            <param name="size">この四角形の膨張量</param>
        </member>
        <member name="M:OpenCvSharp.CvRect.Inflate(OpenCvSharp.CvRect,System.Int32,System.Int32)">
            <summary>
            このCvRectを指定の量だけ膨らませる 
            </summary>
            <param name="rect">対象の矩形</param>
            <param name="x">水平方向の膨張量</param>
            <param name="y">垂直方向の膨張量</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Intersect(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            2つの矩形の交差部分を表す矩形を取得する
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Intersect(OpenCvSharp.CvRect)">
            <summary>
            2 つの矩形の交差部分を表す矩形を取得する
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.IntersectsWith(OpenCvSharp.CvRect)">
            <summary>
            指定した矩形がこの矩形と交差するかどうか判定する
            </summary>
            <param name="rect">矩形</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Union(OpenCvSharp.CvRect)">
            <summary>
            2つの矩形の和集合を表す矩形を取得する 
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Union(OpenCvSharp.CvRect,OpenCvSharp.CvRect)">
            <summary>
            2つの矩形の和集合を表す矩形を取得する 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvRect.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="P:OpenCvSharp.CvRect.Top">
            <summary>
            上端のy座標 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Bottom">
            <summary>
            下端のy座標 (Y + Height) 
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Left">
            <summary>
            左端のx座標
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Right">
            <summary>
            右端のx座標 (X + Width)
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Location">
            <summary>
            矩形の左上頂点の位置 [CvPoint(X, Y)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.Size">
            <summary>
            矩形の大きさ [CvSize(Width, Height)]
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.TopLeft">
            <summary>
            左上の頂点
            </summary>
        </member>
        <member name="P:OpenCvSharp.CvRect.BottomRight">
            <summary>
            右下の頂点
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvScalar">
            <summary>
            4個までの数を納めるコンテナ. マネージdouble配列と可換。
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.SizeOf">
            <summary>
            sizeof(CvScalar) 
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val0">
            <summary>
            1番目の要素
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val1">
            <summary>
            2番目の要素
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val2">
            <summary>
            3番目の要素
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvScalar.Val3">
            <summary>
            4番目の要素
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double)">
            <summary>
            1つのスカラー値を指定して初期化. 残りは0で埋める.
            </summary>
            <param name="val0"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double)">
            <summary>
            2つのスカラー値を指定して初期化. 残りは0で埋める.
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            3つのスカラー値を指定して初期化. 残りは0で埋める.
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
            <param name="val2"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            すべてのスカラー値を指定して初期化
            </summary>
            <param name="val0"></param>
            <param name="val1"></param>
            <param name="val2"></param>
            <param name="val3"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.ScalarAll(System.Double)">
            <summary>
            指定した値を配列のすべての要素として初期化し、返す
            </summary>
            <param name="val0123"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.RealScalar(System.Double)">
            <summary>
            指定した値を先頭要素とし、残りを0で初期化し、返す
            </summary>
            <param name="val0"></param>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Explicit(System.Double[])~OpenCvSharp.CvScalar">
            <summary>
            マネージDouble配列から変換する明示的なキャスト
            </summary>
            <param name="obj">新しい CvScalar の値を指定する double 配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Implicit(System.Double)~OpenCvSharp.CvScalar">
            <summary>
            Double型の値から変換する暗黙のキャスト. RealScalarで初期化して返す.
            </summary>
            <param name="obj">新しい CvScalar の値を指定する double 配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Explicit(OpenCvSharp.CvScalar)~System.Double[]">
            <summary>
            マネージDouble配列に変換する明示的なキャスト
            </summary>
            <param name="self">新しい Double配列 の値を指定する CvScalar 配列</param>
            <returns>double[4]</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Implicit(OpenCvSharp.CvScalar)~System.Double">
            <summary>
            Double型の値に変換する暗黙のキャスト. 先頭の要素を返す.
            </summary>
            <param name="self">新しい CvScalar の値を指定する double 配列</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.Equals(OpenCvSharp.CvScalar)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Equality(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.op_Inequality(OpenCvSharp.CvScalar,OpenCvSharp.CvScalar)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvScalar.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="P:OpenCvSharp.CvScalar.Item(System.Int32)">
            <summary>
            インデクサ
            </summary>
        </member>
        <member name="T:OpenCvSharp.CvSize">
            <summary>
            矩形のピクセル精度でのサイズ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.SizeOf">
            <summary>
            sizeof(CvSize)
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Width">
            <summary>
            矩形の幅
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Height">
            <summary>
            矩形の高さ
            </summary>
        </member>
        <member name="F:OpenCvSharp.CvSize.Empty">
            <summary>
            プロパティを初期化しない状態の CvSize 構造体を表す 
            </summary>
        </member>
        <member name="M:OpenCvSharp.CvSize.#ctor(System.Int32,System.Int32)">
            <summary>
            初期化 
            </summary>
            <param name="width">矩形の幅</param>
            <param name="height">矩形の高さ</param>
        </member>
        <member name="M:OpenCvSharp.CvSize.Equals(OpenCvSharp.CvSize)">
            <summary>
            指定したオブジェクトと等しければtrueを返す 
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns>型が同じで、メンバの値が等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.op_Equality(OpenCvSharp.CvSize,OpenCvSharp.CvSize)">
            <summary>
            == 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.op_Inequality(OpenCvSharp.CvSize,OpenCvSharp.CvSize)">
            <summary>
            != 演算子のオーバーロード
            </summary>
            <param name="lhs">左辺値</param>
            <param name="rhs">右辺値</param>
            <returns>等しくなければtrue</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.Equals(System.Object)">
            <summary>
            Equalsのオーバーライド
            </summary>
            <param name="obj">比較するオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.GetHashCode">
            <summary>
            GetHashCodeのオーバーライド
            </summary>
            <returns>このオブジェクトのハッシュ値を指定する整数値。</returns>
        </member>
        <member name="M:OpenCvSharp.CvSize.ToString">
            <summary>
            文字列形式を返す 
            </summary>
            <returns>文字列形式</returns>
        </member>
        <member name="T:OpenCvSharp.Utilities.ScopedGCHandle">
            <summary>
            IDisposableを実装したGCHandle
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Object)">
            <summary>
            指定したオブジェクトに System.Runtime.InteropServices.GCHandleType.Normal ハンドルを割り当てます
            </summary>
            <param name="value">GCの対象からはずすオブジェクト</param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            指定したオブジェクトに指定した型のハンドルを割り当てます
            </summary>
            <param name="value">GCの対象からはずすオブジェクト</param>
            <param name="type">作成する System.Runtime.InteropServices.GCHandle の型を示す、System.Runtime.InteropServices.GCHandleType 値の 1 つ</param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.#ctor(System.Runtime.InteropServices.GCHandle)">
            <summary>
            GCHandleから初期化
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Alloc(System.Object)">
            <summary>
            指定したオブジェクトに System.Runtime.InteropServices.GCHandleType.Normal ハンドルを割り当てます
            </summary>
            <param name="value">System.Runtime.InteropServices.GCHandle を使用するオブジェクト</param>
            <returns>オブジェクトをガベージ コレクションから保護する新しい System.Runtime.InteropServices.GCHandle。
            System.Runtime.InteropServices.GCHandle は、不要になったときに System.Runtime.InteropServices.GCHandle.Free() で解放する必要があります。</returns>
            <exception cref="T:System.ArgumentException">非プリミティブ (blittable でない) メンバを持つインスタンスは固定できません</exception>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            指定したオブジェクトに指定した型のハンドルを割り当てます
            </summary>
            <param name="value">System.Runtime.InteropServices.GCHandle を使用するオブジェクト</param>
            <param name="type">作成する System.Runtime.InteropServices.GCHandle の型を示す、System.Runtime.InteropServices.GCHandleType 値の 1 つ</param>
            <returns>オブジェクトをガベージ コレクションから保護する新しい System.Runtime.InteropServices.GCHandle。
            System.Runtime.InteropServices.GCHandle は、不要になったときに System.Runtime.InteropServices.GCHandle.Free() で解放する必要があります。</returns>
            <exception cref="T:System.ArgumentException">非プリミティブ (blittable でない) メンバを持つインスタンスは固定できません</exception>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Dispose">
            <summary>
            GCHandle.Freeによりリソースの解放を行う
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.FromIntPtr(System.IntPtr)">
            <summary>
            マネージ オブジェクトを識別するハンドルから作成された新しい System.Runtime.InteropServices.GCHandle オブジェクトを返します
            </summary>
            <param name="value">System.Runtime.InteropServices.GCHandle オブジェクトの作成元のマネージ オブジェクトを識別する System.IntPtr ハンドル</param>
            <exception cref="T:System.InvalidOperationException">value パラメータの値が System.IntPtr.Zero です</exception>
            <returns>値パラメータに対応する新しい System.Runtime.InteropServices.GCHandle オブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.ToIntPtr(OpenCvSharp.Utilities.ScopedGCHandle)">
            <summary>
            System.Runtime.InteropServices.GCHandle オブジェクトの内部整数表現を返します
            </summary>
            <param name="value">内部整数表現の取得元の System.Runtime.InteropServices.GCHandle オブジェクト</param>
            <returns>System.Runtime.InteropServices.GCHandle オブジェクトを表す System.IntPtr オブジェクト</returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.AddrOfPinnedObject">
            <summary>
            System.Runtime.InteropServices.GCHandleType.Pinned ハンドル内のオブジェクトのアドレスを取得します
            </summary>
            <returns>System.IntPtr としての Pinned オブジェクトのアドレス</returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Equals(System.Object)">
            <summary>
            指定した System.Runtime.InteropServices.GCHandle オブジェクトが、現在の System.Runtime.InteropServices.GCHandle オブジェクトと等しいかどうかを判断します
            </summary>
            <param name="obj">現在の System.Runtime.InteropServices.GCHandle オブジェクトと比較する System.Runtime.InteropServices.GCHandle オブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.Free">
            <summary>
            System.Runtime.InteropServices.GCHandle を解放します
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.GetHashCode">
            <summary>
            現在の System.Runtime.InteropServices.GCHandle オブジェクトの識別子を返します
            </summary>
            <returns>現在の System.Runtime.InteropServices.GCHandle オブジェクトの識別子</returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.ScopedGCHandle.ToString">
            <summary>
            文字列形式を返す
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.Handle">
            <summary>
            内部で保持するGCHandle
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.IsAllocated">
            <summary>
            ハンドルが割り当てられているかどうかを示す値を取得します
            </summary>
        </member>
        <member name="P:OpenCvSharp.Utilities.ScopedGCHandle.Target">
            <summary>
            ハンドルが表すオブジェクトを取得または設定します
            </summary>
        </member>
        <member name="T:OpenCvSharp.Win32API">
            <summary>
            Win32API Wrapper
            </summary>
        </member>
        <member name="M:OpenCvSharp.Win32API.SetDIBitsToDevice(System.IntPtr,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr,OpenCvSharp.Win32API.BITMAPINFO@,System.UInt32)">
            <summary>
            
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="XDest">転送先長方形の左上隅の x 座標</param>
            <param name="YDest">転送先長方形の左上隅の y 座標</param>
            <param name="dwWidth">転送元長方形の幅</param>
            <param name="dwHeight">転送元長方形の高さ</param>
            <param name="XSrc">転送元長方形の左下隅の x 座標</param>
            <param name="YSrc">転送元長方形の左下隅の y 座標</param>
            <param name="uStartScan">配列内の最初の走査行</param>
            <param name="cScanLines">走査行の数</param>
            <param name="lpvBits">DIB ビットからなる配列</param>
            <param name="lpbmi">ビットマップ情報</param>
            <param name="fuColorUse">RGB 値またはパレットインデックス</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Win32API.SetStretchBltMode(System.IntPtr,System.Int32)">
            <summary>
            指定されたデバイスコンテキストのビットマップ伸縮モードを設定します
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="iStretchMode">ビットマップの伸縮モード</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Win32API.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,OpenCvSharp.Win32API.BITMAPINFO@,System.UInt32,System.UInt32)">
            <summary>
            指定されたデバイス独立ビットマップ（DIB）内の長方形ピクセルの色データを、指定された長方形へコピーします。
            コピー先長方形がコピー元長方形より大きい場合、この関数はコピー先長方形に合わせて、色データの行と列を拡大します。
            コピー先長方形がコピー元長方形より小さい場合、この関数は指定されたラスタオペレーションを使って、行と列を縮小します。
            </summary>
            <param name="hdc">デバイスコンテキストのハンドル</param>
            <param name="XDest">コピー先長方形の左上隅の x 座標</param>
            <param name="YDest">コピー先長方形の左上隅の y 座標</param>
            <param name="nDestWidth">コピー先長方形の幅</param>
            <param name="nDestHeight">コピー先長方形の高さ</param>
            <param name="XSrc">コピー元長方形の左上隅の x 座標</param>
            <param name="YSrc">コピー元長方形の左上隅の x 座標</param>
            <param name="nSrcWidth">コピー元長方形の幅</param>
            <param name="nSrcHeight">コピー元長方形の高さ</param>
            <param name="lpBits">ビットマップのビット</param>
            <param name="lpBitsInfo">ビットマップのデータ</param>
            <param name="iUsage">データの種類</param>
            <param name="dwRop">ラスタオペレーションコード</param>
            <returns></returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Byte">
            <summary>
            Byte* を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Byte.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.#ctor(System.Byte*)">
            <summary>
            Byte*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Byte.Set(System.Int32,System.Byte)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Byte.Ptr">
            <summary>
            内部で保持しているポインタ (Single*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Byte.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Int16">
            <summary>
            Int16* を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Int16.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.#ctor(System.Int16*)">
            <summary>
            Int16*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int16.Set(System.Int32,System.Int16)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int16.Ptr">
            <summary>
            内部で保持しているポインタ (Int16*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int16.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Int32">
            <summary>
            Int32* を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Int32.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.#ctor(System.Int32*)">
            <summary>
            Int32*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.Set(System.Int32,System.Int32)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Int32.ToArray(System.Int32)">
            <summary>
            マネージ配列に変換する
            </summary>
            <param name="length">変換後のマネージ配列の長さ</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int32.Ptr">
            <summary>
            内部で保持しているポインタ (Int32*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Int32.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Single">
            <summary>
            Single* を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Single.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.#ctor(System.Single*)">
            <summary>
            Single*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.Set(System.Int32,System.Single)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Single.ToArray(System.Int32)">
            <summary>
            マネージ配列に変換する
            </summary>
            <param name="length">変換後のマネージ配列の長さ</param>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Single.Ptr">
            <summary>
            内部で保持しているポインタ (Single*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Single.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.PointerAccessor1D_Double">
            <summary>
            Double* を配列のようにアクセスできるようにするためのクラス
            </summary>
        </member>
        <member name="F:OpenCvSharp.PointerAccessor1D_Double.ptr">
            <summary>
            Pointer
            </summary>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.#ctor(System.IntPtr)">
            <summary>
            IntPtrで初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.#ctor(System.Double*)">
            <summary>
            Double*で初期化
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.Get(System.Int32)">
            <summary>
            指定したインデックスの配列の要素を取得する
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="M:OpenCvSharp.PointerAccessor1D_Double.Set(System.Int32,System.Double)">
            <summary>
            指定したインデックスの配列の要素を設定する
            </summary>
            <param name="index">配列のインデックス</param>
            <param name="value">割り当てる値</param>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Double.Ptr">
            <summary>
            内部で保持しているポインタ (Double*)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenCvSharp.PointerAccessor1D_Double.Item(System.Int32)">
            <summary>
            配列の要素にアクセスするインデクサ
            </summary>
            <param name="index">配列のインデックス</param>
            <returns>要素の値</returns>
        </member>
        <member name="T:OpenCvSharp.OpenCVException">
            <summary>
            OpenCVから投げられる例外
            </summary>
        </member>
        <member name="M:OpenCvSharp.OpenCVException.#ctor(OpenCvSharp.CvStatus,System.String,System.String,System.String,System.Int32)">
            <summary>
            初期化
            </summary>
            <param name="status">エラーステータス</param>
            <param name="funcName">エラーが発生した関数名</param>
            <param name="errMsg">エラーについての追加情報/診断結果</param>
            <param name="fileName">エラーが発生したファイル名</param>
            <param name="line">エラーが発生した行番号</param>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.Status">
            <summary>
            エラーステータス
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.FuncName">
            <summary>
            エラーが発生したOpenCVの関数名．
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.ErrMsg">
            <summary>
            エラーについての追加情報/診断結果
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.FileName">
            <summary>
            エラーが発生したファイル名
            </summary>
        </member>
        <member name="P:OpenCvSharp.OpenCVException.Line">
            <summary>
            エラーが発生した行番号
            </summary>
        </member>
        <member name="T:OpenCvSharp.Utilities.Util">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.CopyMemory(System.Void*,System.Void*,System.UInt32)">
            <summary>
            指定されたメモリブロックの内容を、他の場所へコピーします。
            </summary>
            <param name="outDest"></param>
            <param name="inSrc"></param>
            <param name="inNumOfBytes"></param>
            <remarks>
            Yanesdk.NET (http://yanesdkdotnet.sourceforge.jp/) の Screen2DGl.cs から借用させて頂きました。
            </remarks>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.ZeroMemory(System.Void*,System.UInt32)">
            <summary>
            指定されたメモリブロックの内容を、他の場所へコピーします。
            </summary>
            <param name="outDest"></param>
            <param name="inNumOfBytes"></param>
            <remarks>
            Yanesdk.NET (http://yanesdkdotnet.sourceforge.jp/) の Screen2DGl.cs から借用させて頂きました。
            </remarks>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.Cast``1(System.IntPtr)">
            <summary>
            void*からT型のオブジェクトに変換を試みる.
            TがOpenCVのオブジェクトの場合は、IntPtrを取るコンストラクタ呼び出しを試みる.
            </summary>
            <typeparam name="T">オブジェクトの型. プリミティブ型か、OpenCVのオブジェクト(ICvObject).</typeparam>
            <param name="p">変換するポインタ</param>
            <returns>T型に変換した結果</returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.ToObject``1(System.IntPtr)">
            <summary>
            ポインタから構造体にキャストを試みる
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.CheckType(System.Type,System.Type)">
            <summary>
            testとtargetが同じ型かどうかチェック
            </summary>
            <param name="test">source type</param>
            <param name="target">generic type</param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.SizeOf(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCvSharp.Utilities.Util.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt;.ToArray of LINQ
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
    </members>
</doc>
